require_relative "base_handler"
require_relative "../utils"
require_relative "../auto_generated/cloud_queue_client_service"
require_relative "../converter/core_converter"
require_relative "../converter/queue_converter"
require_relative "../infrastructure/logging_aspect"


module Azure
  module Storage
    module Handler
      class CloudQueueClientHandler < BaseHandler
        def listQueues(listQueuesPayload, accountInfo)
          queueClient = Azure::Storage::Converter::QueueConverter.getQueueService(self, accountInfo)
          # ==== Construct Parameters ==== #
          reqOptions = Azure::Storage::Converter::CoreConverter.getCommonRequestOptions(listQueuesPayload.requestOptions, listQueuesPayload.thriftOperationContext)
          reqOptions[:prefix] = listQueuesPayload.prefix unless listQueuesPayload.prefix.nil?
          reqOptions[:metadata] = true if listQueuesPayload.detailsIncluded == Azure::Storage::AutoGenerated::ThriftQueueListingDetails::Metadata

          # ==== Operation ==== #
          temp = nil
          entries = []
          begin
            unless temp.nil?
              reqOptions[:marker] = temp.continuation_token
            end
            # Azure::Storage::Infrastructure::LoggingAspect.logger.debug reqOptions
            temp = queueClient.list_queues(reqOptions)
            temp.each do |queue|
              entry = Azure::Storage::AutoGenerated::CloudQueueResponse.new
              entry.name = queue.name
              entry.metadata = queue.metadata
              # TODO storageURI
              entries.push(entry)
            end
          end while temp.continuation_token != ""

          # ==== Construct Reture Value ==== #
          result = Azure::Storage::AutoGenerated::ListQueuesResponse.new
          result.queueList = entries
          return result
        end

        def listQueuesSegmented(listQueuesPayload, accountInfo, maxResults, currentToken)
          queueClient = Azure::Storage::Converter::QueueConverter.getQueueService(self, accountInfo)
          # ==== Construct Parameters ==== #
          reqOptions = Azure::Storage::Converter::CoreConverter.getCommonRequestOptions(listQueuesPayload.requestOptions, listQueuesPayload.thriftOperationContext)
          reqOptions[:prefix] = listQueuesPayload.prefix unless listQueuesPayload.prefix.nil?
          reqOptions[:metadata] = true if listQueuesPayload.detailsIncluded == Azure::Storage::AutoGenerated::ThriftQueueListingDetails::Metadata
          reqOptions[:max_results] = maxResults
          reqOptions[:marker] = currentToken.nextMarker
          # Azure::Storage::Infrastructure::LoggingAspect.logger.debug reqOptions

          # ==== Operation ==== #
          temp = queueClient.list_queues(reqOptions)

          # ==== Construct Reture Value ==== #
          entries = []
          temp.each do |queue|
            entry = Azure::Storage::AutoGenerated::CloudQueueResponse.new
            entry.name = queue.name
            entry.metadata = queue.metadata
            # TODO storageURI
            entries.push(entry)
          end
          result = Azure::Storage::AutoGenerated::ListQueuesResponse.new
          result.continuationToken.nextMarker = temp.continuation_token
          result.queueList = entries
          return result
        end

        def setProperties(thriftRequestOptions, accountInfo, thriftOperationContext, properties)
          queueClient = Azure::Storage::Converter::QueueConverter.getQueueService(self, accountInfo)
          # ==== Construct Parameters ==== #
          reqOptions = Azure::Storage::Converter::CoreConverter.getCommonRequestOptions(thriftRequestOptions, thriftOperationContext)
          serviceProperties = Azure::Storage::Converter::CoreConverter.convertThriftStorageServicePropertiesToServiceProperties(properties)

          # ==== Operation ==== #
          queueClient.set_service_properties(serviceProperties, reqOptions)

          # ==== Construct Reture Value ==== #
          return
        end
        def getProperties(thriftRequestOptions, thriftOperationContext, accountInfo)
          queueClient = Azure::Storage::Converter::QueueConverter.getQueueService(self, accountInfo)
          # ==== Construct Parameters ==== #
          reqOptions = Azure::Storage::Converter::CoreConverter.getCommonRequestOptions(thriftRequestOptions, thriftOperationContext)

          # ==== Operation ==== #
          queueClient.get_service_properties(reqOptions)

          # ==== Construct Reture Value ==== #
          result = Azure::Storage::AutoGenerated::ThriftStorageServiceProperties.new
          result.corsRules
          result.defaultServiceVersion
          result.logging
          result.minuteMetrics
          result.hourMetrics
          result.deleteRetentionProperties

          return result
        end
        def getServiceStats(thriftRequestOptions, thriftOperationContext, accountInfo)
          queueClient = Azure::Storage::Converter::QueueConverter.getQueueService(self, accountInfo)
          # ==== Construct Parameters ==== #
          # where is the interface of this function
          # ==== Operation ==== #


          # ==== Construct Reture Value ==== #
          result = Azure::Storage::AutoGenerated::ThriftServiceStats.new
          return result
        end
      end
    end
  end
end
