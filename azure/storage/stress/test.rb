# require "thrift"
# require_relative "service_handlers"

# begin
#   port = ARGV[0] || 9090

#   transport = Thrift::BufferedTransport.new(Thrift::Socket.new("localhost", port))
#   protocol = Thrift::BinaryProtocol.new(transport)
#   client1 = Azure::Storage::AutoGenerated::SupportedFeatures::Client.new(protocol)
#   client2 = Azure::Storage::AutoGenerated::SupportedFeatures::Client.new(protocol)

#   transport.open()

#   supported_features1 = client1.GetSupportedFeatures()
#   supported_features2 = client2.GetSupportedFeatures()

#   #---------------------------------------------------------|
#   # Begin debug code snippet
#   puts "\n" + "supported_features1".rjust(40, "-").ljust(80, "-") + "\n"
#   puts "supported_features1 is :" + "\n"
#   require "pp"
#   pp supported_features1
#   puts "\n" + "supported_features1".rjust(40, "-").ljust(80, "-") + "\n"
#   # Ends debug code snippet
#   #---------------------------------------------------------|

#   #---------------------------------------------------------|
#   # Begin debug code snippet
#   puts "\n" + "supported_features2".rjust(40, "-").ljust(80, "-") + "\n"
#   puts "supported_features2 is :" + "\n"
#   require "pp"
#   pp supported_features2
#   puts "\n" + "supported_features2".rjust(40, "-").ljust(80, "-") + "\n"
#   # Ends debug code snippet
#   #---------------------------------------------------------|

#   transport.close()

# rescue Thrift::Exception => tx
#   print 'Thrift::Exception: ', tx.message, "\n"
# end


require "aspector"
require_relative "utils"
require_relative "./auto_generated/blob_types_types"
require_relative "./infrastructure/logging_aspect"

def thriftizeString(moduleName, string)
  return nil if string.nil? || string.empty?
  constantsArray = moduleName.constants
  constantsArray.each { |constant| return moduleName.const_get(constant) if constant.to_s.casecmp(string) == 0 }
  nil
end


class Test
  def sample_method
    XSS::Infrastructure::LoggingAspect.logger.debug(" test debug ")
    puts "sample method"
    throw Exception.new("nothing")
  end
end

testobj = Test.new
XSS::Infrastructure::LoggingAspect.apply(testobj)
testobj.sample_method

