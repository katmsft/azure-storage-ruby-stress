require "azure/storage/queue"
require_relative "core_converter"
require_relative "../infrastructure/logging_aspect"
require_relative "../utils.rb"


module Azure::Storage::Stress
  module Converter
    class QueueConverter
      def self.getQueueService(handler, accountInfo, filters = [])
        client = XSS::Converter::CoreConverter.getStorageService(handler, accountInfo)
        queue_client = Azure::Storage::Queue::QueueService.new(client: client)
        filters.each { |filter| queue_client.with_filter(filter) }
        queue_client
      end


      def self.convertQueueMessageToThriftQueueMessage(message)
        result = XSS::AutoGenerated::ThriftQueueMessage.new
        if message.nil?
          result.messageId = ""
          result.insertionTime = 0
          result.expirationTime = 0
          result.nextVisibleTime = 0
          result.dequeueCount = 0
        else
          result.messageId = message.id
          result.popReceipt = message.pop_receipt if message.pop_receipt
          result.insertionTime = XSS::Utilities::timeStringToInteger(message.insertion_time)
          result.expirationTime = XSS::Utilities::timeStringToInteger(message.expiration_time)
          result.nextVisibleTime = message.time_next_visible ? XSS::Utilities::timeStringToInteger(message.time_next_visible) : result.insertionTime
          result.dequeueCount = message.dequeue_count
          result.payload = message.message_text
        end
        result
      end

      def self.buildCloudQueueResponseFromInternalRequestInfo(rInfo, queueName)
        result = XSS::AutoGenerated::CloudQueueResponse.new
        result.name = queueName
        result.storageUri = XSS::AutoGenerated::CloudStorageUri.new
        result.storageUri.primaryUri = rInfo.uri.to_s if rInfo.uri
        result
      end

      def self.buildCloudQueueResponseFromQueueAndClient(queue, queueClient)
        cloudQueueResponse = XSS::AutoGenerated::CloudQueueResponse.new
        cloudQueueResponse.name = queue.name
        cloudQueueResponse.serviceClientUri = XSS::Converter::CoreConverter::getCloudStorageUriWithClientAndPath(client, "")
        cloudQueueResponse.metadata = queue.metadata
        cloudQueueResponse
      end

      def self.getQueueContinuationToken(nextMarker, uri)
        r = XSS::AutoGenerated::ThriftQueueContinuationToken.new
        r.targetLocation = uri.to_s.include?("-secondary") ? XSS::AutoGenerated::StorageLocation::Secondary : XSS::AutoGenerated::StorageLocation::Primary
        r.nextMarker = nextMarker
        r
      end
    end
  end
end
