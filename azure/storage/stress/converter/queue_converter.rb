require "azure/storage"
require_relative "core_converter"
require_relative "../infrastructure/logging_aspect"
require_relative "../utils.rb"


module Azure::Storage::Stress
  module Converter
    class QueueConverter
      def self.getQueueService(handler, accountInfo, filters = [])
        storageService = XSS::Converter::CoreConverter.getStorageService(handler, accountInfo)
        queue_client = storageService.queue_client
        filters.each { |filter| queue_client.with_filter(filter) }
        queue_client
      end


      def self.convertQueueMessageToThriftQueueMessage(message)
        result = XSS::AutoGenerated::ThriftQueueMessage.new
        if message.nil?
          result.messageId = ""
          result.insertionTime = 0
          result.expirationTime = 0
          result.nextVisibleTime = 0
          result.dequeueCount = 0
        else
          result.messageId = message.id
          result.popReceipt = message.pop_receipt
          result.insertionTime = XSS::Utilities::timeStringToInteger(message.insertion_time)
          result.expirationTime = XSS::Utilities::timeStringToInteger(message.expiration_time)
          result.nextVisibleTime = XSS::Utilities::timeStringToInteger(message.time_next_visible)
          result.dequeueCount = message.dequeue_count
          result.payload = message.message_text
        end
        result
      end

      def self.buildCloudQueueResponseFromInternalRequestInfo(rInfo, queueName)
        result = XSS::AutoGenerated::CloudQueueResponse.new
        result.name = queueName
        # TODO: metadata
        # TODO: ApproximateMessageCount
        result.storageUri = rInfo.uri if rInfo.uri
        result
      end
    end
  end
end
