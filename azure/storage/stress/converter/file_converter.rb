require "azure/storage"
require_relative "core_converter"
require_relative "../utils"
require_relative "../infrastructure/logging_aspect"


module Azure::Storage::Stress
  module Converter
    class FileConverter
      def FileConverter.getFileService(handler, accountInfo, filters = [])
        storageService = XSS::Converter::CoreConverter.getStorageService(handler, accountInfo)
        file_client = storageService.file_client
        filters.each { |filter| file_client.with_filter(filter) }
        file_client
      end

      def self.getRequestOptions(thriftBlobRequestOptions)
        options = XSS::Converter::CoreConverter::getRequestOptions(thriftBlobRequestOptions)
      end

      def self.getFileContinuationToken(nextMarker, uri)
        r =XSS::AutoGenerated::ThriftFileContinuationToken.new
        r.targetLocation = uri.to_s.include?("-secondary") ? XSS::AutoGenerated::StorageLocation::Secondary : XSS::AutoGenerated::StorageLocation::Primary
        r.nextMarker = nextMarker
        r
      end

      def self.buildCloudFileShareResponseFromInternalRequestInfo(rInfo)
        result = XSS::AutoGenerated::CloudFileShareResponse.new

        result.etag = rInfo.responseHeaders["etag"] unless rInfo.responseHeaders["etag"].nil?

        result.lastModified = XSS::Utilities::timeStringToInteger(rInfo.responseHeaders["last-modified"]) unless rInfo.responseHeaders["last-modified"].nil?

        result.metadata = XSS::Utilities::metadataFromHeaders(rInfo.responseHeaders)

        result.snapshotTime = XSS::Utilities::timeStringToInteger(rInfo.responseHeaders["x-ms-snapshot"]) unless rInfo.responseHeaders["x-ms-snapshot"].nil?

        # result.copyState = XSS::Converter::CoreConverter::getCopyStateFromInternalRequestInfo(rInfo)

        # result.isIncrementalCopy = rInfo.responseHeaders["x-ms-incremental-copy"].to_s == "true" unless rInfo.responseHeaders["x-ms-incremental-copy"].nil?

        # TODO: 
        # result.shareQuota
        result
      end
    end
  end
end
