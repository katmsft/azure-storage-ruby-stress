require "azure/storage"
require_relative "core_converter"
require_relative "../utils"
require_relative "../infrastructure/logging_aspect"


module Azure::Storage::Stress
  module Converter
    class FileConverter
      def FileConverter.getFileService(handler, accountInfo, filters = [])
        storageService = XSS::Converter::CoreConverter.getStorageService(handler, accountInfo)
        file_client = storageService.file_client
        filters.each { |filter| file_client.with_filter(filter) }
        file_client
      end

      def self.getRequestOptions(thriftFileRequestOptions)
        options = XSS::Converter::CoreConverter::getRequestOptions(thriftFileRequestOptions)
      end

      def self.getFileContinuationToken(nextMarker, uri)
        r = XSS::AutoGenerated::ThriftFileContinuationToken.new
        r.targetLocation = uri.to_s.include?("-secondary") ? XSS::AutoGenerated::StorageLocation::Secondary : XSS::AutoGenerated::StorageLocation::Primary
        r.nextMarker = nextMarker
        r
      end

      def self.buildCloudFileShareResponseFromInternalRequestInfo(rInfo)
        result = XSS::AutoGenerated::CloudFileShareResponse.new
        result.etag = rInfo.responseHeaders["etag"] unless rInfo.responseHeaders["etag"].nil?
        result.lastModified = XSS::Utilities::timeStringToInteger(rInfo.responseHeaders["last-modified"]) unless rInfo.responseHeaders["last-modified"].nil?
        result.metadata = XSS::Utilities::metadataFromHeaders(rInfo.responseHeaders)
        result.snapshotTime = XSS::Utilities::timeStringToInteger(rInfo.responseHeaders["x-ms-snapshot"]) unless rInfo.responseHeaders["x-ms-snapshot"].nil?
        # TODO:
        # result.shareQuota
        result
      end


      def self.buildCloudFileShareResponseFromShare(share)
        result = XSS::AutoGenerated::CloudFileShareResponse.new
        properties = share.properties
        result.etag = properties["etag"] if properties["etag"]
        result.lastModified = XSS::Utilities::timeStringToInteger(properties["last-modified"]) if properties["last-modified"]
        result.metadata = share.metadata
        result.snapshotTime = XSS::Utilities::timeStringToInteger(properties["x-ms-snapshot"]) if properties["x-ms-snapshot"]
        # TODO: Not sure whether this is right
        result.shareQuota = share.quota
        result
      end
      def self.bulidCloudFileDirectoryResponseFromInternalRequestInfo(rInfo)
        result = XSS::AutoGenerated::CloudFileDirectoryResponse.new

        result.etag = rInfo.responseHeaders["etag"] unless rInfo.responseHeaders["etag"].nil?

        result.lastModified = XSS::Utilities::timeStringToInteger(rInfo.responseHeaders["last-modified"]) unless rInfo.responseHeaders["last-modified"].nil?

        result.metadata = XSS::Utilities::metadataFromHeaders(rInfo.responseHeaders)

        result
      end

      def self.bulidCloudFileDirectoryResponseFromFileOrDirectory(fileOrdirectory)
        result = XSS::AutoGenerated::CloudFileDirectoryResponse.new
        properties = fileOrdirectory.properties
        result.etag = properties[:etag] if properties[:etag]
        result.lastModified = XSS::Utilities::timeStringToInteger(properties[:last_modified]) if properties[:last_modified]
        result.metadata = fileOrdirectory.metadata
        result
      end

      def self.buildCloudFileDirectoryListItemWithDirectory(directory, filePath, client)
        result = XSS::AutoGenerated::CloudFileDirectoryListItem.new
        result.name = directory.name
        # TODO: Not sure whether path is right
        directoryPath = "#{filePath.shareName}/#{filePath.directoryName}/#{directory.name}"
        result.uri = XSS::Converter::CoreConverter::getCloudStorageUriWithClientAndPath(client, directoryPath)
        result.properties = self.bulidCloudFileDirectoryResponseFromFileOrDirectory(directory)
        result
      end

      def self.buildCloudFileListItemWithFile(file, filePath, client)
        result = XSS::AutoGenerated::CloudFileListItem.new
        result.name = file.name
        # TODO: Not sure whether path is right
        directoryPath = "#{filePath.shareName}/#{filePath.directoryName}/#{file.name}"
        result.uri = XSS::Converter::CoreConverter::getCloudStorageUriWithClientAndPath(client, directoryPath)
        result.properties = self.bulidCloudFileDirectoryResponseFromFileOrDirectory(file)
        result
      end

      def self.buildShareDetailWithShareAndClient(share, client)
        shareDetails = XSS::AutoGenerated::ShareDetail.new
        shareDetails.cloudStorageUri = XSS::Converter::CoreConverter::getCloudStorageUriWithClientAndPath(client, share.name)
        shareDetails.shareResponse = self.buildCloudFileShareResponseFromShare(share)
        shareDetails
      end

      def self.buildCloudFileResponseFromInternalRequestInfo(internalRequestInfo)
        result = XSS::AutoGenerated::CloudFileResponse.new
        self.updateCloudFileResponseFromInternalRequestInfo(result, internalRequestInfo)
        result
      end

      def self.updateCloudFileResponseFromInternalRequestInfo(response, internalRequestInfo)
        responseHeaders = internalRequestInfo.responseHeaders
        response.etag = responseHeaders["etag"].nil? ? "" : responseHeaders["etag"]
        response.lastModified = responseHeaders["last-modified"].nil? ? 0 : responseHeaders["last-modified"]
        response.length = responseHeaders["content-length"] if responseHeaders["content-length"]
        response.contentMd5 = responseHeaders["content-md5"] if responseHeaders["content-md5"]
        response.contentLanguage = responseHeaders["content-language"] if responseHeaders["content-language"]
        response.contentDisposition = responseHeaders["content-disposition"] if responseHeaders["content-disposition"]
        response.contentEncoding = responseHeaders["content-encoding"] if responseHeaders["content-encoding"]
        response.cacheControl = responseHeaders["cache-control"] if responseHeaders["cache-control"]
        response.metadata = XSS::Utilities::metadataFromHeaders(responseHeaders) if responseHeaders
        response.copyState = XSS::Converter::CoreConverter::getCopyStateFromInternalRequestInfo(internalRequestInfo)
      end

      def self.addPropertiesToOptions(properties, options)
        options[:cache_control] = properties.cacheControl if properties.cacheControl
        options[:content_disposition] = properties.contentDisposition if properties.contentDisposition
        options[:content_encoding] = properties.contentEncoding if properties.contentEncoding
        options[:content_language] = properties.contentLanguage if properties.contentLanguage
        options[:content_md5] = properties.contentMd5 if properties.contentMd5
        options[:content_type] = properties.contentType if properties.contentType
      end
    end
  end
end
