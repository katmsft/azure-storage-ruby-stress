require "azure/storage"
require_relative "core_converter"
require_relative "../utils"
require_relative "../infrastructure/logging_aspect"


module Azure::Storage::Stress
  module Converter
    class FileConverter
      def FileConverter.getFileService(handler, accountInfo, filters = [])
        storageService = XSS::Converter::CoreConverter.getStorageService(handler, accountInfo)
        file_client = storageService.file_client
        filters.each { |filter| file_client.with_filter(filter) }
        file_client
      end

      def self.getRequestOptions(thriftFileRequestOptions)
        options = XSS::Converter::CoreConverter::getRequestOptions(thriftFileRequestOptions)
      end

      def self.getFileContinuationToken(nextMarker, uri)
        r = XSS::AutoGenerated::ThriftFileContinuationToken.new
        r.storageLocation = uri.to_s.include?("-secondary") ? XSS::AutoGenerated::StorageLocation::Secondary : XSS::AutoGenerated::StorageLocation::Primary
        r.nextMarker = nextMarker
        r
      end

      def self.buildCloudFileShareResponseFromInternalRequestInfo(rInfo)
        result = XSS::AutoGenerated::CloudFileShareResponse.new
        result.etag = rInfo.responseHeaders["etag"] unless rInfo.responseHeaders["etag"].nil?
        result.lastModified = XSS::Utilities::timeStringToInteger(rInfo.responseHeaders["last-modified"]) unless rInfo.responseHeaders["last-modified"].nil?
        result.shareQuota = rInfo.responseHeaders["x-ms-share-quota"].to_i unless rInfo.responseHeaders["x-ms-share-quota"].nil?
        result.metadata = XSS::Utilities::metadataFromHeaders(rInfo.responseHeaders)
        result.snapshotTime = XSS::Utilities::timeStringToInteger(rInfo.responseHeaders["x-ms-snapshot"]) unless rInfo.responseHeaders["x-ms-snapshot"].nil?
        # TODO:
        # result.shareQuota
        result
      end


      def self.buildCloudFileShareResponseFromShare(share)
        result = XSS::AutoGenerated::CloudFileShareResponse.new
        properties = share.properties
        result.etag = properties["etag"] if properties["etag"]
        result.lastModified = XSS::Utilities::timeStringToInteger(properties["last-modified"]) if properties["last-modified"]
        result.metadata = share.metadata
        result.snapshotTime = XSS::Utilities::timeStringToInteger(properties["x-ms-snapshot"]) if properties["x-ms-snapshot"]
        # TODO: Not sure whether this is right
        result.shareQuota = share.quota
        result
      end
      def self.bulidCloudFileDirectoryResponseFromInternalRequestInfo(rInfo)
        result = XSS::AutoGenerated::CloudFileDirectoryResponse.new

        result.etag = rInfo.responseHeaders["etag"] unless rInfo.responseHeaders["etag"].nil?

        result.lastModified = XSS::Utilities::timeStringToInteger(rInfo.responseHeaders["last-modified"]) unless rInfo.responseHeaders["last-modified"].nil?

        result.metadata = XSS::Utilities::metadataFromHeaders(rInfo.responseHeaders)

        result
      end

      def self.bulidCloudFileDirectoryResponseFromDirectory(directory)
        result = XSS::AutoGenerated::CloudFileDirectoryResponse.new
        properties = directory.properties
        result.etag = properties[:etag] ? properties[:etag] : ""
        result.lastModified = properties[:last_modified] ? XSS::Utilities::timeStringToInteger(properties[:last_modified]) : 0
        result.metadata = directory.metadata
        result
      end

      def self.bulidCloudFileFromFile(file)
        result = XSS::AutoGenerated::CloudFileResponse.new
        properties = file.properties
        result.etag = properties[:etag] ? properties[:etag] : ""
        result.lastModified = properties[:last_modified] ? XSS::Utilities::timeStringToInteger(properties[:last_modified]) : 0
        result.length = properties[:content_length] if properties[:content_length]
        result.contentMd5 = properties[:content_md5] if properties[:content_md5]
        result.contentLanguage = properties[:content_language] if properties[:content_language]
        result.contentDisposition = properties[:content_disposition] if properties[:content_disposition]
        result.contentEncoding = properties[:content_encoding] if properties[:content_encoding]
        result.contentType = properties[:content_type] if properties[:content_type]
        result.cacheControl = properties[:cache_control] if properties[:cache_control]
        result.metadata = file.metadata
        result.copyState = self.getCopyStateFromFile(file)
        result
      end

      def self.getCopyStateFromFile(file)
        return nil if file.properties[:copy_id].nil? || file.properties[:copy_id].empty?
        copyState = XSS::AutoGenerated::ThriftCopyState.new
        copyState.copyID = file.properties[:copy_id]
        # TODO: assign bytesCopied and totalByte when available.
        copyState.completionTime = XSS::Utilities::timeStringToInteger(file.properties[:copy_completion_time]) if file.properties[:copy_completion_time]
        # TODO: assign URI when available
        copyState.copyStatus = XSS::Utilities::thriftizeString(XSS::AutoGenerated::ThriftCopyStatus, file.properties[:copy_status]) if file.properties[:copy_status]
        copyState.statusDescription = file.properties[:copy_status_description] if file.properties[:copy_status_description]
        # TODO: copyDestinationSnapshotID
        copyState
      end

      def self.buildCloudFileDirectoryListItemWithDirectory(directory, filePath, client)
        result = XSS::AutoGenerated::CloudFileDirectoryListItem.new
        result.name = directory.name
        # TODO: Not sure whether path is right
        directoryPath = "#{filePath.shareName}/#{filePath.directoryName}/#{directory.name}"
        result.uri = XSS::Converter::CoreConverter::getCloudStorageUriWithClientAndPath(client, directoryPath)
        result.properties = self.bulidCloudFileDirectoryResponseFromDirectory(directory)
        result
      end

      def self.buildCloudFileListItemWithFile(file, filePath, client)
        result = XSS::AutoGenerated::CloudFileListItem.new
        result.name = file.name
        # TODO: Not sure whether path is right
        directoryPath = "#{filePath.shareName}/#{filePath.directoryName}/#{file.name}"
        result.uri = XSS::Converter::CoreConverter::getCloudStorageUriWithClientAndPath(client, directoryPath)
        result.attributes = self.bulidCloudFileFromFile(file)
        result
      end

      def self.buildShareDetailWithShareAndClient(share, client)
        shareDetails = XSS::AutoGenerated::ShareDetail.new
        shareDetails.cloudStorageUri = XSS::Converter::CoreConverter::getCloudStorageUriWithClientAndPath(client, share.name)
        shareDetails.shareResponse = self.buildCloudFileShareResponseFromShare(share)
        shareDetails
      end

      def self.buildCloudFileResponseFromInternalRequestInfo(internalRequestInfo)
        result = XSS::AutoGenerated::CloudFileResponse.new
        self.updateCloudFileResponseFromInternalRequestInfo(result, internalRequestInfo)
        result
      end

      def self.updateCloudFileResponseFromInternalRequestInfo(response, internalRequestInfo)
        responseHeaders = internalRequestInfo.responseHeaders
        response.etag = responseHeaders["etag"].nil? ? "" : responseHeaders["etag"]
        response.lastModified = responseHeaders["last-modified"].nil? ? 0 : XSS::Utilities::timeStringToInteger(responseHeaders["last-modified"])
        response.length = responseHeaders["content-length"].to_i if responseHeaders["content-length"]
        response.contentMd5 = responseHeaders["content-md5"] if responseHeaders["content-md5"]
        response.contentLanguage = responseHeaders["content-language"] if responseHeaders["content-language"]
        response.contentDisposition = responseHeaders["content-disposition"] if responseHeaders["content-disposition"]
        response.contentEncoding = responseHeaders["content-encoding"] if responseHeaders["content-encoding"]
        response.cacheControl = responseHeaders["cache-control"] if responseHeaders["cache-control"]
        response.metadata = XSS::Utilities::metadataFromHeaders(responseHeaders) if responseHeaders
        response.copyState = XSS::Converter::CoreConverter::getCopyStateFromInternalRequestInfo(internalRequestInfo)
      end

      def self.addPropertiesToOptions(properties, options)
        options[:cache_control] = properties.cacheControl if properties.cacheControl
        options[:content_disposition] = properties.contentDisposition if properties.contentDisposition
        options[:content_encoding] = properties.contentEncoding if properties.contentEncoding
        options[:content_language] = properties.contentLanguage if properties.contentLanguage
        options[:content_md5] = properties.contentMd5 if properties.contentMd5
        options[:content_type] = properties.contentType if properties.contentType
      end
    end
  end
end
