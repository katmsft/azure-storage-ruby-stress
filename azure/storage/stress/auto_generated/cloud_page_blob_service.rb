#
# Auto-generated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require "thrift"
require_relative "cloud_blob_service"
require_relative "blob_types"

module Azure::Storage::Stress
  module AutoGenerated
    module CloudPageBlobService
      class Client < ::XSS::AutoGenerated::CloudBlobService::Client
        include ::Thrift::Client

        def create(requestInfo, accountInfo, size)
          send_create(requestInfo, accountInfo, size)
          return recv_create()
        end

        def send_create(requestInfo, accountInfo, size)
          send_message("create", Create_args, requestInfo: requestInfo, accountInfo: accountInfo, size: size)
        end

        def recv_create()
          result = receive_message(Create_result)
          return result.success unless result.success.nil?
          raise result.wse unless result.wse.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, "create failed: unknown result")
        end

        def resize(requestInfo, accountInfo, size)
          send_resize(requestInfo, accountInfo, size)
          return recv_resize()
        end

        def send_resize(requestInfo, accountInfo, size)
          send_message("resize", Resize_args, requestInfo: requestInfo, accountInfo: accountInfo, size: size)
        end

        def recv_resize()
          result = receive_message(Resize_result)
          return result.success unless result.success.nil?
          raise result.wse unless result.wse.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, "resize failed: unknown result")
        end

        def setSequenceNumber(requestInfo, accountInfo, sequenceNumberAction, sequenceNumber)
          send_setSequenceNumber(requestInfo, accountInfo, sequenceNumberAction, sequenceNumber)
          return recv_setSequenceNumber()
        end

        def send_setSequenceNumber(requestInfo, accountInfo, sequenceNumberAction, sequenceNumber)
          send_message("setSequenceNumber", SetSequenceNumber_args, requestInfo: requestInfo, accountInfo: accountInfo, SequenceNumberAction: sequenceNumberAction, sequenceNumber: sequenceNumber)
        end

        def recv_setSequenceNumber()
          result = receive_message(SetSequenceNumber_result)
          return result.success unless result.success.nil?
          raise result.wse unless result.wse.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, "setSequenceNumber failed: unknown result")
        end

        def writePages(writePagesPayload, accountInfo)
          send_writePages(writePagesPayload, accountInfo)
          return recv_writePages()
        end

        def send_writePages(writePagesPayload, accountInfo)
          send_message("writePages", WritePages_args, writePagesPayload: writePagesPayload, accountInfo: accountInfo)
        end

        def recv_writePages()
          result = receive_message(WritePages_result)
          return result.success unless result.success.nil?
          raise result.wse unless result.wse.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, "writePages failed: unknown result")
        end

        def clearPages(requestInfo, accountInfo, startOffset, length)
          send_clearPages(requestInfo, accountInfo, startOffset, length)
          return recv_clearPages()
        end

        def send_clearPages(requestInfo, accountInfo, startOffset, length)
          send_message("clearPages", ClearPages_args, requestInfo: requestInfo, accountInfo: accountInfo, startOffset: startOffset, length: length)
        end

        def recv_clearPages()
          result = receive_message(ClearPages_result)
          return result.success unless result.success.nil?
          raise result.wse unless result.wse.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, "clearPages failed: unknown result")
        end

        def getPageRanges(requestInfo, accountInfo, offset, length)
          send_getPageRanges(requestInfo, accountInfo, offset, length)
          return recv_getPageRanges()
        end

        def send_getPageRanges(requestInfo, accountInfo, offset, length)
          send_message("getPageRanges", GetPageRanges_args, requestInfo: requestInfo, accountInfo: accountInfo, offset: offset, length: length)
        end

        def recv_getPageRanges()
          result = receive_message(GetPageRanges_result)
          return result.success unless result.success.nil?
          raise result.wse unless result.wse.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, "getPageRanges failed: unknown result")
        end

        def getPageRangesDiff(requestInfo, accountInfo, offset, length, previous)
          send_getPageRangesDiff(requestInfo, accountInfo, offset, length, previous)
          return recv_getPageRangesDiff()
        end

        def send_getPageRangesDiff(requestInfo, accountInfo, offset, length, previous)
          send_message("getPageRangesDiff", GetPageRangesDiff_args, requestInfo: requestInfo, accountInfo: accountInfo, offset: offset, length: length, previous: previous)
        end

        def recv_getPageRangesDiff()
          result = receive_message(GetPageRangesDiff_result)
          return result.success unless result.success.nil?
          raise result.wse unless result.wse.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, "getPageRangesDiff failed: unknown result")
        end

        def uploadFromStream(requestInfo, accountInfo, source, length)
          send_uploadFromStream(requestInfo, accountInfo, source, length)
          return recv_uploadFromStream()
        end

        def send_uploadFromStream(requestInfo, accountInfo, source, length)
          send_message("uploadFromStream", UploadFromStream_args, requestInfo: requestInfo, accountInfo: accountInfo, source: source, length: length)
        end

        def recv_uploadFromStream()
          result = receive_message(UploadFromStream_result)
          return result.success unless result.success.nil?
          raise result.wse unless result.wse.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, "uploadFromStream failed: unknown result")
        end

        def uploadFromFile(requestInfo, accountInfo, path, fileMode)
          send_uploadFromFile(requestInfo, accountInfo, path, fileMode)
          return recv_uploadFromFile()
        end

        def send_uploadFromFile(requestInfo, accountInfo, path, fileMode)
          send_message("uploadFromFile", UploadFromFile_args, requestInfo: requestInfo, accountInfo: accountInfo, path: path, fileMode: fileMode)
        end

        def recv_uploadFromFile()
          result = receive_message(UploadFromFile_result)
          return result.success unless result.success.nil?
          raise result.wse unless result.wse.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, "uploadFromFile failed: unknown result")
        end

        def startIncrementalCopy(requestInfo, accountInfo, uri)
          send_startIncrementalCopy(requestInfo, accountInfo, uri)
          return recv_startIncrementalCopy()
        end

        def send_startIncrementalCopy(requestInfo, accountInfo, uri)
          send_message("startIncrementalCopy", StartIncrementalCopy_args, requestInfo: requestInfo, accountInfo: accountInfo, uri: uri)
        end

        def recv_startIncrementalCopy()
          result = receive_message(StartIncrementalCopy_result)
          return result.success unless result.success.nil?
          raise result.wse unless result.wse.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, "startIncrementalCopy failed: unknown result")
        end

        def setPremiumPageBlobTier(requestInfo, accountInfo, premiumPageBlobTier)
          send_setPremiumPageBlobTier(requestInfo, accountInfo, premiumPageBlobTier)
          return recv_setPremiumPageBlobTier()
        end

        def send_setPremiumPageBlobTier(requestInfo, accountInfo, premiumPageBlobTier)
          send_message("setPremiumPageBlobTier", SetPremiumPageBlobTier_args, requestInfo: requestInfo, accountInfo: accountInfo, premiumPageBlobTier: premiumPageBlobTier)
        end

        def recv_setPremiumPageBlobTier()
          result = receive_message(SetPremiumPageBlobTier_result)
          return result.success unless result.success.nil?
          raise result.wse unless result.wse.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, "setPremiumPageBlobTier failed: unknown result")
        end
      end

      class Processor < ::XSS::AutoGenerated::CloudBlobService::Processor
        include ::Thrift::Processor

        def process_create(seqid, iprot, oprot)
          args = read_args(iprot, Create_args)
          result = Create_result.new()
          begin
            result.success = @handler.create(args.requestInfo, args.accountInfo, args.size)
          rescue ::XSS::AutoGenerated::WrappedStorageException => wse
            result.wse = wse
          end
          write_result(result, oprot, "create", seqid)
        end

        def process_resize(seqid, iprot, oprot)
          args = read_args(iprot, Resize_args)
          result = Resize_result.new()
          begin
            result.success = @handler.resize(args.requestInfo, args.accountInfo, args.size)
          rescue ::XSS::AutoGenerated::WrappedStorageException => wse
            result.wse = wse
          end
          write_result(result, oprot, "resize", seqid)
        end

        def process_setSequenceNumber(seqid, iprot, oprot)
          args = read_args(iprot, SetSequenceNumber_args)
          result = SetSequenceNumber_result.new()
          begin
            result.success = @handler.setSequenceNumber(args.requestInfo, args.accountInfo, args.SequenceNumberAction, args.sequenceNumber)
          rescue ::XSS::AutoGenerated::WrappedStorageException => wse
            result.wse = wse
          end
          write_result(result, oprot, "setSequenceNumber", seqid)
        end

        def process_writePages(seqid, iprot, oprot)
          args = read_args(iprot, WritePages_args)
          result = WritePages_result.new()
          begin
            result.success = @handler.writePages(args.writePagesPayload, args.accountInfo)
          rescue ::XSS::AutoGenerated::WrappedStorageException => wse
            result.wse = wse
          end
          write_result(result, oprot, "writePages", seqid)
        end

        def process_clearPages(seqid, iprot, oprot)
          args = read_args(iprot, ClearPages_args)
          result = ClearPages_result.new()
          begin
            result.success = @handler.clearPages(args.requestInfo, args.accountInfo, args.startOffset, args.length)
          rescue ::XSS::AutoGenerated::WrappedStorageException => wse
            result.wse = wse
          end
          write_result(result, oprot, "clearPages", seqid)
        end

        def process_getPageRanges(seqid, iprot, oprot)
          args = read_args(iprot, GetPageRanges_args)
          result = GetPageRanges_result.new()
          begin
            result.success = @handler.getPageRanges(args.requestInfo, args.accountInfo, args.offset, args.length)
          rescue ::XSS::AutoGenerated::WrappedStorageException => wse
            result.wse = wse
          end
          write_result(result, oprot, "getPageRanges", seqid)
        end

        def process_getPageRangesDiff(seqid, iprot, oprot)
          args = read_args(iprot, GetPageRangesDiff_args)
          result = GetPageRangesDiff_result.new()
          begin
            result.success = @handler.getPageRangesDiff(args.requestInfo, args.accountInfo, args.offset, args.length, args.previous)
          rescue ::XSS::AutoGenerated::WrappedStorageException => wse
            result.wse = wse
          end
          write_result(result, oprot, "getPageRangesDiff", seqid)
        end

        def process_uploadFromStream(seqid, iprot, oprot)
          args = read_args(iprot, UploadFromStream_args)
          result = UploadFromStream_result.new()
          begin
            result.success = @handler.uploadFromStream(args.requestInfo, args.accountInfo, args.source, args.length)
          rescue ::XSS::AutoGenerated::WrappedStorageException => wse
            result.wse = wse
          end
          write_result(result, oprot, "uploadFromStream", seqid)
        end

        def process_uploadFromFile(seqid, iprot, oprot)
          args = read_args(iprot, UploadFromFile_args)
          result = UploadFromFile_result.new()
          begin
            result.success = @handler.uploadFromFile(args.requestInfo, args.accountInfo, args.path, args.fileMode)
          rescue ::XSS::AutoGenerated::WrappedStorageException => wse
            result.wse = wse
          end
          write_result(result, oprot, "uploadFromFile", seqid)
        end

        def process_startIncrementalCopy(seqid, iprot, oprot)
          args = read_args(iprot, StartIncrementalCopy_args)
          result = StartIncrementalCopy_result.new()
          begin
            result.success = @handler.startIncrementalCopy(args.requestInfo, args.accountInfo, args.uri)
          rescue ::XSS::AutoGenerated::WrappedStorageException => wse
            result.wse = wse
          end
          write_result(result, oprot, "startIncrementalCopy", seqid)
        end

        def process_setPremiumPageBlobTier(seqid, iprot, oprot)
          args = read_args(iprot, SetPremiumPageBlobTier_args)
          result = SetPremiumPageBlobTier_result.new()
          begin
            result.success = @handler.setPremiumPageBlobTier(args.requestInfo, args.accountInfo, args.premiumPageBlobTier)
          rescue ::XSS::AutoGenerated::WrappedStorageException => wse
            result.wse = wse
          end
          write_result(result, oprot, "setPremiumPageBlobTier", seqid)
        end
      end

      # HELPER FUNCTIONS AND STRUCTURES

      class Create_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        REQUESTINFO = 1
        ACCOUNTINFO = 2
        SIZE = 3

        FIELDS = {
          REQUESTINFO => { type: ::Thrift::Types::STRUCT, name: "requestInfo", class: ::XSS::AutoGenerated::BlobRequestInfo },
          ACCOUNTINFO => { type: ::Thrift::Types::STRUCT, name: "accountInfo", class: ::XSS::AutoGenerated::StorageAccountInfo },
          SIZE => { type: ::Thrift::Types::I64, name: "size" }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Create_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        WSE = 1

        FIELDS = {
          SUCCESS => { type: ::Thrift::Types::STRUCT, name: "success", class: ::XSS::AutoGenerated::CloudBlobResponse },
          WSE => { type: ::Thrift::Types::STRUCT, name: "wse", class: ::XSS::AutoGenerated::WrappedStorageException }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Resize_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        REQUESTINFO = 1
        ACCOUNTINFO = 2
        SIZE = 3

        FIELDS = {
          REQUESTINFO => { type: ::Thrift::Types::STRUCT, name: "requestInfo", class: ::XSS::AutoGenerated::BlobRequestInfo },
          ACCOUNTINFO => { type: ::Thrift::Types::STRUCT, name: "accountInfo", class: ::XSS::AutoGenerated::StorageAccountInfo },
          SIZE => { type: ::Thrift::Types::I64, name: "size" }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Resize_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        WSE = 1

        FIELDS = {
          SUCCESS => { type: ::Thrift::Types::STRUCT, name: "success", class: ::XSS::AutoGenerated::CloudBlobResponse },
          WSE => { type: ::Thrift::Types::STRUCT, name: "wse", class: ::XSS::AutoGenerated::WrappedStorageException }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class SetSequenceNumber_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        REQUESTINFO = 1
        ACCOUNTINFO = 2
        SEQUENCENUMBERACTION = 3
        SEQUENCENUMBER = 4

        FIELDS = {
          REQUESTINFO => { type: ::Thrift::Types::STRUCT, name: "requestInfo", class: ::XSS::AutoGenerated::BlobRequestInfo },
          ACCOUNTINFO => { type: ::Thrift::Types::STRUCT, name: "accountInfo", class: ::XSS::AutoGenerated::StorageAccountInfo },
          SEQUENCENUMBERACTION => { type: ::Thrift::Types::I32, name: "SequenceNumberAction", enum_class: ::XSS::AutoGenerated::SequenceNumberAction },
          SEQUENCENUMBER => { type: ::Thrift::Types::I64, name: "sequenceNumber" }
        }

        def struct_fields; FIELDS; end

        def validate
          unless @SequenceNumberAction.nil? || ::XSS::AutoGenerated::SequenceNumberAction::VALID_VALUES.include?(@SequenceNumberAction)
            raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, "Invalid value of field SequenceNumberAction!")
          end
        end

        ::Thrift::Struct.generate_accessors self
      end

      class SetSequenceNumber_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        WSE = 1

        FIELDS = {
          SUCCESS => { type: ::Thrift::Types::STRUCT, name: "success", class: ::XSS::AutoGenerated::CloudBlobResponse },
          WSE => { type: ::Thrift::Types::STRUCT, name: "wse", class: ::XSS::AutoGenerated::WrappedStorageException }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class WritePages_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        WRITEPAGESPAYLOAD = 1
        ACCOUNTINFO = 2

        FIELDS = {
          WRITEPAGESPAYLOAD => { type: ::Thrift::Types::STRUCT, name: "writePagesPayload", class: ::XSS::AutoGenerated::WritePagesPayload },
          ACCOUNTINFO => { type: ::Thrift::Types::STRUCT, name: "accountInfo", class: ::XSS::AutoGenerated::StorageAccountInfo }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class WritePages_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        WSE = 1

        FIELDS = {
          SUCCESS => { type: ::Thrift::Types::STRUCT, name: "success", class: ::XSS::AutoGenerated::CloudBlobResponse },
          WSE => { type: ::Thrift::Types::STRUCT, name: "wse", class: ::XSS::AutoGenerated::WrappedStorageException }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class ClearPages_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        REQUESTINFO = 1
        ACCOUNTINFO = 2
        STARTOFFSET = 3
        LENGTH = 4

        FIELDS = {
          REQUESTINFO => { type: ::Thrift::Types::STRUCT, name: "requestInfo", class: ::XSS::AutoGenerated::BlobRequestInfo },
          ACCOUNTINFO => { type: ::Thrift::Types::STRUCT, name: "accountInfo", class: ::XSS::AutoGenerated::StorageAccountInfo },
          STARTOFFSET => { type: ::Thrift::Types::I64, name: "startOffset" },
          LENGTH => { type: ::Thrift::Types::I64, name: "length" }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class ClearPages_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        WSE = 1

        FIELDS = {
          SUCCESS => { type: ::Thrift::Types::STRUCT, name: "success", class: ::XSS::AutoGenerated::CloudBlobResponse },
          WSE => { type: ::Thrift::Types::STRUCT, name: "wse", class: ::XSS::AutoGenerated::WrappedStorageException }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class GetPageRanges_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        REQUESTINFO = 1
        ACCOUNTINFO = 2
        OFFSET = 3
        LENGTH = 4

        FIELDS = {
          REQUESTINFO => { type: ::Thrift::Types::STRUCT, name: "requestInfo", class: ::XSS::AutoGenerated::BlobRequestInfo },
          ACCOUNTINFO => { type: ::Thrift::Types::STRUCT, name: "accountInfo", class: ::XSS::AutoGenerated::StorageAccountInfo },
          OFFSET => { type: ::Thrift::Types::I64, name: "offset" },
          LENGTH => { type: ::Thrift::Types::I64, name: "length" }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class GetPageRanges_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        WSE = 1

        FIELDS = {
          SUCCESS => { type: ::Thrift::Types::STRUCT, name: "success", class: ::XSS::AutoGenerated::BlobGetPageRangesResponse },
          WSE => { type: ::Thrift::Types::STRUCT, name: "wse", class: ::XSS::AutoGenerated::WrappedStorageException }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class GetPageRangesDiff_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        REQUESTINFO = 1
        ACCOUNTINFO = 2
        OFFSET = 3
        LENGTH = 4
        PREVIOUS = 5

        FIELDS = {
          REQUESTINFO => { type: ::Thrift::Types::STRUCT, name: "requestInfo", class: ::XSS::AutoGenerated::BlobRequestInfo },
          ACCOUNTINFO => { type: ::Thrift::Types::STRUCT, name: "accountInfo", class: ::XSS::AutoGenerated::StorageAccountInfo },
          OFFSET => { type: ::Thrift::Types::I64, name: "offset" },
          LENGTH => { type: ::Thrift::Types::I64, name: "length" },
          PREVIOUS => { type: ::Thrift::Types::STRING, name: "previous" }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class GetPageRangesDiff_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        WSE = 1

        FIELDS = {
          SUCCESS => { type: ::Thrift::Types::STRUCT, name: "success", class: ::XSS::AutoGenerated::BlobGetPageDiffRangesResponse },
          WSE => { type: ::Thrift::Types::STRUCT, name: "wse", class: ::XSS::AutoGenerated::WrappedStorageException }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class UploadFromStream_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        REQUESTINFO = 1
        ACCOUNTINFO = 2
        SOURCE = 3
        LENGTH = 4

        FIELDS = {
          REQUESTINFO => { type: ::Thrift::Types::STRUCT, name: "requestInfo", class: ::XSS::AutoGenerated::BlobRequestInfo },
          ACCOUNTINFO => { type: ::Thrift::Types::STRUCT, name: "accountInfo", class: ::XSS::AutoGenerated::StorageAccountInfo },
          SOURCE => { type: ::Thrift::Types::STRING, name: "source", binary: true },
          LENGTH => { type: ::Thrift::Types::I64, name: "length" }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class UploadFromStream_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        WSE = 1

        FIELDS = {
          SUCCESS => { type: ::Thrift::Types::STRUCT, name: "success", class: ::XSS::AutoGenerated::CloudBlobResponse },
          WSE => { type: ::Thrift::Types::STRUCT, name: "wse", class: ::XSS::AutoGenerated::WrappedStorageException }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class UploadFromFile_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        REQUESTINFO = 1
        ACCOUNTINFO = 2
        PATH = 3
        FILEMODE = 4

        FIELDS = {
          REQUESTINFO => { type: ::Thrift::Types::STRUCT, name: "requestInfo", class: ::XSS::AutoGenerated::BlobRequestInfo },
          ACCOUNTINFO => { type: ::Thrift::Types::STRUCT, name: "accountInfo", class: ::XSS::AutoGenerated::StorageAccountInfo },
          PATH => { type: ::Thrift::Types::STRING, name: "path" },
          FILEMODE => { type: ::Thrift::Types::I32, name: "fileMode", enum_class: ::XSS::AutoGenerated::FileMode }
        }

        def struct_fields; FIELDS; end

        def validate
          unless @fileMode.nil? || ::XSS::AutoGenerated::FileMode::VALID_VALUES.include?(@fileMode)
            raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, "Invalid value of field fileMode!")
          end
        end

        ::Thrift::Struct.generate_accessors self
      end

      class UploadFromFile_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        WSE = 1

        FIELDS = {
          SUCCESS => { type: ::Thrift::Types::STRUCT, name: "success", class: ::XSS::AutoGenerated::CloudBlobResponse },
          WSE => { type: ::Thrift::Types::STRUCT, name: "wse", class: ::XSS::AutoGenerated::WrappedStorageException }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class StartIncrementalCopy_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        REQUESTINFO = 1
        ACCOUNTINFO = 2
        URI = 3

        FIELDS = {
          REQUESTINFO => { type: ::Thrift::Types::STRUCT, name: "requestInfo", class: ::XSS::AutoGenerated::CopyBlobRequestInfo },
          ACCOUNTINFO => { type: ::Thrift::Types::STRUCT, name: "accountInfo", class: ::XSS::AutoGenerated::StorageAccountInfo },
          URI => { type: ::Thrift::Types::STRUCT, name: "uri", class: ::XSS::AutoGenerated::CloudStorageUri }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class StartIncrementalCopy_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        WSE = 1

        FIELDS = {
          SUCCESS => { type: ::Thrift::Types::STRUCT, name: "success", class: ::XSS::AutoGenerated::BlobStartCopyFromBlobResponse },
          WSE => { type: ::Thrift::Types::STRUCT, name: "wse", class: ::XSS::AutoGenerated::WrappedStorageException }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class SetPremiumPageBlobTier_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        REQUESTINFO = 1
        ACCOUNTINFO = 2
        PREMIUMPAGEBLOBTIER = 3

        FIELDS = {
          REQUESTINFO => { type: ::Thrift::Types::STRUCT, name: "requestInfo", class: ::XSS::AutoGenerated::BlobRequestInfo },
          ACCOUNTINFO => { type: ::Thrift::Types::STRUCT, name: "accountInfo", class: ::XSS::AutoGenerated::StorageAccountInfo },
          PREMIUMPAGEBLOBTIER => { type: ::Thrift::Types::I32, name: "premiumPageBlobTier", enum_class: ::XSS::AutoGenerated::PremiumPageBlobTier }
        }

        def struct_fields; FIELDS; end

        def validate
          unless @premiumPageBlobTier.nil? || ::XSS::AutoGenerated::PremiumPageBlobTier::VALID_VALUES.include?(@premiumPageBlobTier)
            raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, "Invalid value of field premiumPageBlobTier!")
          end
        end

        ::Thrift::Struct.generate_accessors self
      end

      class SetPremiumPageBlobTier_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        WSE = 1

        FIELDS = {
          SUCCESS => { type: ::Thrift::Types::STRUCT, name: "success", class: ::XSS::AutoGenerated::CloudBlobResponse },
          WSE => { type: ::Thrift::Types::STRUCT, name: "wse", class: ::XSS::AutoGenerated::WrappedStorageException }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end
    end
  end
end
