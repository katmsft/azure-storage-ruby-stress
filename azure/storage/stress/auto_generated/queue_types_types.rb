#
# Auto-generated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require "thrift"
require_relative "core_types"


module Azure::Storage::Stress
  module AutoGenerated
    module ThriftMessageUpdateFields
      Visibility = 1
      Content = 2
      VALUE_MAP = { 1 => "Visibility", 2 => "Content" }
      VALID_VALUES = Set.new([Visibility, Content]).freeze
    end

    module ThriftSharedAccessQueuePermissions
      None = 0
      Read = 1
      Add = 2
      Update = 4
      ProcessMessages = 8
      VALUE_MAP = { 0 => "None", 1 => "Read", 2 => "Add", 4 => "Update", 8 => "ProcessMessages" }
      VALID_VALUES = Set.new([None, Read, Add, Update, ProcessMessages]).freeze
    end

    module ThriftQueueListingDetails
      None = 0
      Metadata = 1
      VALUE_MAP = { 0 => "None", 1 => "Metadata" }
      VALID_VALUES = Set.new([None, Metadata]).freeze
    end

    class ThriftQueueRequestOptions
      include ::Thrift::Struct, ::Thrift::Struct_Union
      LOCATIONMODE = 1
      MAXIMUMEXECUTIONTIMESECONDS = 2
      SERVERTIMEOUTSECONDS = 3

      FIELDS = {
        LOCATIONMODE => { type: ::Thrift::Types::I32, name: "locationMode", optional: true, enum_class: ::XSS::AutoGenerated::LocationMode },
        MAXIMUMEXECUTIONTIMESECONDS => { type: ::Thrift::Types::I32, name: "maximumExecutionTimeSeconds", optional: true },
        SERVERTIMEOUTSECONDS => { type: ::Thrift::Types::I32, name: "serverTimeoutSeconds", optional: true }
      }

      def struct_fields; FIELDS; end

      def validate
        unless @locationMode.nil? || ::XSS::AutoGenerated::LocationMode::VALID_VALUES.include?(@locationMode)
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, "Invalid value of field locationMode!")
        end
      end

      ::Thrift::Struct.generate_accessors self
    end

    class ThriftQueueMessage
      include ::Thrift::Struct, ::Thrift::Struct_Union
      MESSAGEID = 1
      POPRECEIPT = 2
      INSERTIONTIME = 3
      EXPIRATIONTIME = 4
      NEXTVISIBLETIME = 5
      DEQUEUECOUNT = 6
      PAYLOAD = 7

      FIELDS = {
        MESSAGEID => { type: ::Thrift::Types::STRING, name: "messageId" },
        POPRECEIPT => { type: ::Thrift::Types::STRING, name: "popReceipt", optional: true },
        INSERTIONTIME => { type: ::Thrift::Types::I64, name: "insertionTime" },
        EXPIRATIONTIME => { type: ::Thrift::Types::I64, name: "expirationTime" },
        NEXTVISIBLETIME => { type: ::Thrift::Types::I64, name: "nextVisibleTime" },
        DEQUEUECOUNT => { type: ::Thrift::Types::I32, name: "dequeueCount" },
        PAYLOAD => { type: ::Thrift::Types::STRING, name: "payload", binary: true }
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, "Required field messageId is unset!") unless @messageId
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, "Required field insertionTime is unset!") unless @insertionTime
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, "Required field expirationTime is unset!") unless @expirationTime
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, "Required field nextVisibleTime is unset!") unless @nextVisibleTime
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, "Required field dequeueCount is unset!") unless @dequeueCount
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, "Required field payload is unset!") unless @payload
      end

      ::Thrift::Struct.generate_accessors self
    end

    class ThriftSharedAccessQueuePolicy
      include ::Thrift::Struct, ::Thrift::Struct_Union
      PERMISSIONS = 1
      EXPIRYTIME = 2
      STARTTIME = 3

      FIELDS = {
        PERMISSIONS => { type: ::Thrift::Types::STRING, name: "permissions" },
        EXPIRYTIME => { type: ::Thrift::Types::I64, name: "expiryTime", optional: true },
        STARTTIME => { type: ::Thrift::Types::I64, name: "startTime", optional: true }
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, "Required field permissions is unset!") unless @permissions
      end

      ::Thrift::Struct.generate_accessors self
    end

    class ThriftQueueContinuationToken
      include ::Thrift::Struct, ::Thrift::Struct_Union
      NEXTMARKER = 1
      TARGETLOCATION = 2

      FIELDS = {
        NEXTMARKER => { type: ::Thrift::Types::STRING, name: "nextMarker" },
        TARGETLOCATION => { type: ::Thrift::Types::I32, name: "targetLocation", optional: true, enum_class: ::XSS::AutoGenerated::StorageLocation }
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, "Required field nextMarker is unset!") unless @nextMarker
        unless @targetLocation.nil? || ::XSS::AutoGenerated::StorageLocation::VALID_VALUES.include?(@targetLocation)
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, "Invalid value of field targetLocation!")
        end
      end

      ::Thrift::Struct.generate_accessors self
    end

    class CloudQueueResponse
      include ::Thrift::Struct, ::Thrift::Struct_Union
      NAME = 1
      APPROXIMATEMESSAGECOUNT = 2
      METADATA = 3
      STORAGEURI = 4

      FIELDS = {
        NAME => { type: ::Thrift::Types::STRING, name: "name" },
        APPROXIMATEMESSAGECOUNT => { type: ::Thrift::Types::I32, name: "ApproximateMessageCount", optional: true },
        METADATA => { type: ::Thrift::Types::MAP, name: "metadata", key: { type: ::Thrift::Types::STRING }, value: { type: ::Thrift::Types::STRING }, optional: true },
        STORAGEURI => { type: ::Thrift::Types::STRUCT, name: "storageUri", class: ::XSS::AutoGenerated::CloudStorageUri, optional: true }
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, "Required field name is unset!") unless @name
      end

      ::Thrift::Struct.generate_accessors self
    end

    class CreateQueueResponse
      include ::Thrift::Struct, ::Thrift::Struct_Union
      CREATED = 1
      RESPONSE = 2

      FIELDS = {
        CREATED => { type: ::Thrift::Types::BOOL, name: "created" },
        RESPONSE => { type: ::Thrift::Types::STRUCT, name: "response", class: ::XSS::AutoGenerated::CloudQueueResponse, optional: true }
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, "Required field created is unset!") if @created.nil?
      end

      ::Thrift::Struct.generate_accessors self
    end

    class UpdateMessageResponse
      include ::Thrift::Struct, ::Thrift::Struct_Union
      POPRECEIPT = 1
      NEXTVISIBLETIME = 2

      FIELDS = {
        POPRECEIPT => { type: ::Thrift::Types::STRING, name: "popReceipt" },
        NEXTVISIBLETIME => { type: ::Thrift::Types::I64, name: "nextVisibleTime" }
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, "Required field popReceipt is unset!") unless @popReceipt
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, "Required field nextVisibleTime is unset!") unless @nextVisibleTime
      end

      ::Thrift::Struct.generate_accessors self
    end

    class CreateMessageResponse
      include ::Thrift::Struct, ::Thrift::Struct_Union
      MESSAGEID = 1
      POPRECEIPT = 2
      INSERTIONTIME = 3
      EXPIRATIONTIME = 4
      NEXTVISIBLETIME = 5

      FIELDS = {
        MESSAGEID => { type: ::Thrift::Types::STRING, name: "messageId" },
        POPRECEIPT => { type: ::Thrift::Types::STRING, name: "popReceipt", optional: true },
        INSERTIONTIME => { type: ::Thrift::Types::I64, name: "insertionTime" },
        EXPIRATIONTIME => { type: ::Thrift::Types::I64, name: "expirationTime" },
        NEXTVISIBLETIME => { type: ::Thrift::Types::I64, name: "nextVisibleTime" }
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, "Required field messageId is unset!") unless @messageId
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, "Required field insertionTime is unset!") unless @insertionTime
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, "Required field expirationTime is unset!") unless @expirationTime
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, "Required field nextVisibleTime is unset!") unless @nextVisibleTime
      end

      ::Thrift::Struct.generate_accessors self
    end
  end
end
