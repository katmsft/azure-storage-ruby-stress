#
# Auto-generated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require "thrift"
require_relative "cloud_queue_types"

module Azure::Storage::Stress
  module AutoGenerated
    module CloudQueueService
      class Client
        include ::Thrift::Client

        def create(requestInfo, accountInfo, createIfNotExists, metadata)
          send_create(requestInfo, accountInfo, createIfNotExists, metadata)
          return recv_create()
        end

        def send_create(requestInfo, accountInfo, createIfNotExists, metadata)
          send_message("create", Create_args, requestInfo: requestInfo, accountInfo: accountInfo, createIfNotExists: createIfNotExists, metadata: metadata)
        end

        def recv_create()
          result = receive_message(Create_result)
          return result.success unless result.success.nil?
          raise result.storageException unless result.storageException.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, "create failed: unknown result")
        end

        def deleteQueue(requestInfo, accountInfo, deleteIfExists)
          send_deleteQueue(requestInfo, accountInfo, deleteIfExists)
          return recv_deleteQueue()
        end

        def send_deleteQueue(requestInfo, accountInfo, deleteIfExists)
          send_message("deleteQueue", DeleteQueue_args, requestInfo: requestInfo, accountInfo: accountInfo, deleteIfExists: deleteIfExists)
        end

        def recv_deleteQueue()
          result = receive_message(DeleteQueue_result)
          return result.success unless result.success.nil?
          raise result.storageException unless result.storageException.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, "deleteQueue failed: unknown result")
        end

        def exists(requestInfo, accountInfo)
          send_exists(requestInfo, accountInfo)
          return recv_exists()
        end

        def send_exists(requestInfo, accountInfo)
          send_message("exists", Exists_args, requestInfo: requestInfo, accountInfo: accountInfo)
        end

        def recv_exists()
          result = receive_message(Exists_result)
          return result.success unless result.success.nil?
          raise result.storageException unless result.storageException.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, "exists failed: unknown result")
        end

        def clearMessages(requestInfo, accountInfo)
          send_clearMessages(requestInfo, accountInfo)
          recv_clearMessages()
        end

        def send_clearMessages(requestInfo, accountInfo)
          send_message("clearMessages", ClearMessages_args, requestInfo: requestInfo, accountInfo: accountInfo)
        end

        def recv_clearMessages()
          result = receive_message(ClearMessages_result)
          raise result.storageException unless result.storageException.nil?
          return
        end

        def fetchAttributes(requestInfo, accountInfo)
          send_fetchAttributes(requestInfo, accountInfo)
          return recv_fetchAttributes()
        end

        def send_fetchAttributes(requestInfo, accountInfo)
          send_message("fetchAttributes", FetchAttributes_args, requestInfo: requestInfo, accountInfo: accountInfo)
        end

        def recv_fetchAttributes()
          result = receive_message(FetchAttributes_result)
          return result.success unless result.success.nil?
          raise result.storageException unless result.storageException.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, "fetchAttributes failed: unknown result")
        end

        def setMetadata(requestInfo, accountInfo, metadata)
          send_setMetadata(requestInfo, accountInfo, metadata)
          recv_setMetadata()
        end

        def send_setMetadata(requestInfo, accountInfo, metadata)
          send_message("setMetadata", SetMetadata_args, requestInfo: requestInfo, accountInfo: accountInfo, metadata: metadata)
        end

        def recv_setMetadata()
          result = receive_message(SetMetadata_result)
          raise result.storageException unless result.storageException.nil?
          return
        end

        def addMessage(addMessagePayload, accountInfo)
          send_addMessage(addMessagePayload, accountInfo)
          return recv_addMessage()
        end

        def send_addMessage(addMessagePayload, accountInfo)
          send_message("addMessage", AddMessage_args, addMessagePayload: addMessagePayload, accountInfo: accountInfo)
        end

        def recv_addMessage()
          result = receive_message(AddMessage_result)
          return result.success unless result.success.nil?
          raise result.storageException unless result.storageException.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, "addMessage failed: unknown result")
        end

        def updateMessage(updateMessagePayload, accountInfo, visibilityTimeout, updateFields)
          send_updateMessage(updateMessagePayload, accountInfo, visibilityTimeout, updateFields)
          return recv_updateMessage()
        end

        def send_updateMessage(updateMessagePayload, accountInfo, visibilityTimeout, updateFields)
          send_message("updateMessage", UpdateMessage_args, updateMessagePayload: updateMessagePayload, accountInfo: accountInfo, visibilityTimeout: visibilityTimeout, updateFields: updateFields)
        end

        def recv_updateMessage()
          result = receive_message(UpdateMessage_result)
          return result.success unless result.success.nil?
          raise result.storageException unless result.storageException.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, "updateMessage failed: unknown result")
        end

        def getMessage(requestInfo, accountInfo, visibilityTimeout)
          send_getMessage(requestInfo, accountInfo, visibilityTimeout)
          return recv_getMessage()
        end

        def send_getMessage(requestInfo, accountInfo, visibilityTimeout)
          send_message("getMessage", GetMessage_args, requestInfo: requestInfo, accountInfo: accountInfo, visibilityTimeout: visibilityTimeout)
        end

        def recv_getMessage()
          result = receive_message(GetMessage_result)
          return result.success unless result.success.nil?
          raise result.storageException unless result.storageException.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, "getMessage failed: unknown result")
        end

        def peekMessage(requestInfo, accountInfo)
          send_peekMessage(requestInfo, accountInfo)
          return recv_peekMessage()
        end

        def send_peekMessage(requestInfo, accountInfo)
          send_message("peekMessage", PeekMessage_args, requestInfo: requestInfo, accountInfo: accountInfo)
        end

        def recv_peekMessage()
          result = receive_message(PeekMessage_result)
          return result.success unless result.success.nil?
          raise result.storageException unless result.storageException.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, "peekMessage failed: unknown result")
        end

        def getMessages(requestInfo, accountInfo, visibilityTimeout, messageCount)
          send_getMessages(requestInfo, accountInfo, visibilityTimeout, messageCount)
          return recv_getMessages()
        end

        def send_getMessages(requestInfo, accountInfo, visibilityTimeout, messageCount)
          send_message("getMessages", GetMessages_args, requestInfo: requestInfo, accountInfo: accountInfo, visibilityTimeout: visibilityTimeout, messageCount: messageCount)
        end

        def recv_getMessages()
          result = receive_message(GetMessages_result)
          return result.success unless result.success.nil?
          raise result.storageException unless result.storageException.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, "getMessages failed: unknown result")
        end

        def peekMessages(requestInfo, accountInfo, messageCount)
          send_peekMessages(requestInfo, accountInfo, messageCount)
          return recv_peekMessages()
        end

        def send_peekMessages(requestInfo, accountInfo, messageCount)
          send_message("peekMessages", PeekMessages_args, requestInfo: requestInfo, accountInfo: accountInfo, messageCount: messageCount)
        end

        def recv_peekMessages()
          result = receive_message(PeekMessages_result)
          return result.success unless result.success.nil?
          raise result.storageException unless result.storageException.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, "peekMessages failed: unknown result")
        end

        def deleteMessage(requestInfo, accountInfo, messageId, popReceipt)
          send_deleteMessage(requestInfo, accountInfo, messageId, popReceipt)
          recv_deleteMessage()
        end

        def send_deleteMessage(requestInfo, accountInfo, messageId, popReceipt)
          send_message("deleteMessage", DeleteMessage_args, requestInfo: requestInfo, accountInfo: accountInfo, messageId: messageId, popReceipt: popReceipt)
        end

        def recv_deleteMessage()
          result = receive_message(DeleteMessage_result)
          raise result.storageException unless result.storageException.nil?
          return
        end

        def setPermissions(requestInfo, accountInfo, permissions)
          send_setPermissions(requestInfo, accountInfo, permissions)
          recv_setPermissions()
        end

        def send_setPermissions(requestInfo, accountInfo, permissions)
          send_message("setPermissions", SetPermissions_args, requestInfo: requestInfo, accountInfo: accountInfo, permissions: permissions)
        end

        def recv_setPermissions()
          result = receive_message(SetPermissions_result)
          raise result.storageException unless result.storageException.nil?
          return
        end

        def getPermissions(requestInfo, accountInfo)
          send_getPermissions(requestInfo, accountInfo)
          return recv_getPermissions()
        end

        def send_getPermissions(requestInfo, accountInfo)
          send_message("getPermissions", GetPermissions_args, requestInfo: requestInfo, accountInfo: accountInfo)
        end

        def recv_getPermissions()
          result = receive_message(GetPermissions_result)
          return result.success unless result.success.nil?
          raise result.storageException unless result.storageException.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, "getPermissions failed: unknown result")
        end
      end

      class Processor
        include ::Thrift::Processor

        def process_create(seqid, iprot, oprot)
          args = read_args(iprot, Create_args)
          result = Create_result.new()
          begin
            result.success = @handler.create(args.requestInfo, args.accountInfo, args.createIfNotExists, args.metadata)
          rescue ::XSS::AutoGenerated::WrappedStorageException => storageException
            result.storageException = storageException
          end
          write_result(result, oprot, "create", seqid)
        end

        def process_deleteQueue(seqid, iprot, oprot)
          args = read_args(iprot, DeleteQueue_args)
          result = DeleteQueue_result.new()
          begin
            result.success = @handler.deleteQueue(args.requestInfo, args.accountInfo, args.deleteIfExists)
          rescue ::XSS::AutoGenerated::WrappedStorageException => storageException
            result.storageException = storageException
          end
          write_result(result, oprot, "deleteQueue", seqid)
        end

        def process_exists(seqid, iprot, oprot)
          args = read_args(iprot, Exists_args)
          result = Exists_result.new()
          begin
            result.success = @handler.exists(args.requestInfo, args.accountInfo)
          rescue ::XSS::AutoGenerated::WrappedStorageException => storageException
            result.storageException = storageException
          end
          write_result(result, oprot, "exists", seqid)
        end

        def process_clearMessages(seqid, iprot, oprot)
          args = read_args(iprot, ClearMessages_args)
          result = ClearMessages_result.new()
          begin
            @handler.clearMessages(args.requestInfo, args.accountInfo)
          rescue ::XSS::AutoGenerated::WrappedStorageException => storageException
            result.storageException = storageException
          end
          write_result(result, oprot, "clearMessages", seqid)
        end

        def process_fetchAttributes(seqid, iprot, oprot)
          args = read_args(iprot, FetchAttributes_args)
          result = FetchAttributes_result.new()
          begin
            result.success = @handler.fetchAttributes(args.requestInfo, args.accountInfo)
          rescue ::XSS::AutoGenerated::WrappedStorageException => storageException
            result.storageException = storageException
          end
          write_result(result, oprot, "fetchAttributes", seqid)
        end

        def process_setMetadata(seqid, iprot, oprot)
          args = read_args(iprot, SetMetadata_args)
          result = SetMetadata_result.new()
          begin
            @handler.setMetadata(args.requestInfo, args.accountInfo, args.metadata)
          rescue ::XSS::AutoGenerated::WrappedStorageException => storageException
            result.storageException = storageException
          end
          write_result(result, oprot, "setMetadata", seqid)
        end

        def process_addMessage(seqid, iprot, oprot)
          args = read_args(iprot, AddMessage_args)
          result = AddMessage_result.new()
          begin
            result.success = @handler.addMessage(args.addMessagePayload, args.accountInfo)
          rescue ::XSS::AutoGenerated::WrappedStorageException => storageException
            result.storageException = storageException
          end
          write_result(result, oprot, "addMessage", seqid)
        end

        def process_updateMessage(seqid, iprot, oprot)
          args = read_args(iprot, UpdateMessage_args)
          result = UpdateMessage_result.new()
          begin
            result.success = @handler.updateMessage(args.updateMessagePayload, args.accountInfo, args.visibilityTimeout, args.updateFields)
          rescue ::XSS::AutoGenerated::WrappedStorageException => storageException
            result.storageException = storageException
          end
          write_result(result, oprot, "updateMessage", seqid)
        end

        def process_getMessage(seqid, iprot, oprot)
          args = read_args(iprot, GetMessage_args)
          result = GetMessage_result.new()
          begin
            result.success = @handler.getMessage(args.requestInfo, args.accountInfo, args.visibilityTimeout)
          rescue ::XSS::AutoGenerated::WrappedStorageException => storageException
            result.storageException = storageException
          end
          write_result(result, oprot, "getMessage", seqid)
        end

        def process_peekMessage(seqid, iprot, oprot)
          args = read_args(iprot, PeekMessage_args)
          result = PeekMessage_result.new()
          begin
            result.success = @handler.peekMessage(args.requestInfo, args.accountInfo)
          rescue ::XSS::AutoGenerated::WrappedStorageException => storageException
            result.storageException = storageException
          end
          write_result(result, oprot, "peekMessage", seqid)
        end

        def process_getMessages(seqid, iprot, oprot)
          args = read_args(iprot, GetMessages_args)
          result = GetMessages_result.new()
          begin
            result.success = @handler.getMessages(args.requestInfo, args.accountInfo, args.visibilityTimeout, args.messageCount)
          rescue ::XSS::AutoGenerated::WrappedStorageException => storageException
            result.storageException = storageException
          end
          write_result(result, oprot, "getMessages", seqid)
        end

        def process_peekMessages(seqid, iprot, oprot)
          args = read_args(iprot, PeekMessages_args)
          result = PeekMessages_result.new()
          begin
            result.success = @handler.peekMessages(args.requestInfo, args.accountInfo, args.messageCount)
          rescue ::XSS::AutoGenerated::WrappedStorageException => storageException
            result.storageException = storageException
          end
          write_result(result, oprot, "peekMessages", seqid)
        end

        def process_deleteMessage(seqid, iprot, oprot)
          args = read_args(iprot, DeleteMessage_args)
          result = DeleteMessage_result.new()
          begin
            @handler.deleteMessage(args.requestInfo, args.accountInfo, args.messageId, args.popReceipt)
          rescue ::XSS::AutoGenerated::WrappedStorageException => storageException
            result.storageException = storageException
          end
          write_result(result, oprot, "deleteMessage", seqid)
        end

        def process_setPermissions(seqid, iprot, oprot)
          args = read_args(iprot, SetPermissions_args)
          result = SetPermissions_result.new()
          begin
            @handler.setPermissions(args.requestInfo, args.accountInfo, args.permissions)
          rescue ::XSS::AutoGenerated::WrappedStorageException => storageException
            result.storageException = storageException
          end
          write_result(result, oprot, "setPermissions", seqid)
        end

        def process_getPermissions(seqid, iprot, oprot)
          args = read_args(iprot, GetPermissions_args)
          result = GetPermissions_result.new()
          begin
            result.success = @handler.getPermissions(args.requestInfo, args.accountInfo)
          rescue ::XSS::AutoGenerated::WrappedStorageException => storageException
            result.storageException = storageException
          end
          write_result(result, oprot, "getPermissions", seqid)
        end
      end

      # HELPER FUNCTIONS AND STRUCTURES

      class Create_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        REQUESTINFO = 1
        ACCOUNTINFO = 2
        CREATEIFNOTEXISTS = 3
        METADATA = 4

        FIELDS = {
          REQUESTINFO => { type: ::Thrift::Types::STRUCT, name: "requestInfo", class: ::XSS::AutoGenerated::QueueRequestInfo },
          ACCOUNTINFO => { type: ::Thrift::Types::STRUCT, name: "accountInfo", class: ::XSS::AutoGenerated::StorageAccountInfo },
          CREATEIFNOTEXISTS => { type: ::Thrift::Types::BOOL, name: "createIfNotExists" },
          METADATA => { type: ::Thrift::Types::MAP, name: "metadata", key: { type: ::Thrift::Types::STRING }, value: { type: ::Thrift::Types::STRING } }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Create_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        STORAGEEXCEPTION = 1

        FIELDS = {
          SUCCESS => { type: ::Thrift::Types::STRUCT, name: "success", class: ::XSS::AutoGenerated::CreateQueueResponse },
          STORAGEEXCEPTION => { type: ::Thrift::Types::STRUCT, name: "storageException", class: ::XSS::AutoGenerated::WrappedStorageException }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class DeleteQueue_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        REQUESTINFO = 1
        ACCOUNTINFO = 2
        DELETEIFEXISTS = 3

        FIELDS = {
          REQUESTINFO => { type: ::Thrift::Types::STRUCT, name: "requestInfo", class: ::XSS::AutoGenerated::QueueRequestInfo },
          ACCOUNTINFO => { type: ::Thrift::Types::STRUCT, name: "accountInfo", class: ::XSS::AutoGenerated::StorageAccountInfo },
          DELETEIFEXISTS => { type: ::Thrift::Types::BOOL, name: "deleteIfExists" }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class DeleteQueue_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        STORAGEEXCEPTION = 1

        FIELDS = {
          SUCCESS => { type: ::Thrift::Types::BOOL, name: "success" },
          STORAGEEXCEPTION => { type: ::Thrift::Types::STRUCT, name: "storageException", class: ::XSS::AutoGenerated::WrappedStorageException }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Exists_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        REQUESTINFO = 1
        ACCOUNTINFO = 2

        FIELDS = {
          REQUESTINFO => { type: ::Thrift::Types::STRUCT, name: "requestInfo", class: ::XSS::AutoGenerated::QueueRequestInfo },
          ACCOUNTINFO => { type: ::Thrift::Types::STRUCT, name: "accountInfo", class: ::XSS::AutoGenerated::StorageAccountInfo }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Exists_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        STORAGEEXCEPTION = 1

        FIELDS = {
          SUCCESS => { type: ::Thrift::Types::STRUCT, name: "success", class: ::XSS::AutoGenerated::QueueExistsResponse },
          STORAGEEXCEPTION => { type: ::Thrift::Types::STRUCT, name: "storageException", class: ::XSS::AutoGenerated::WrappedStorageException }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class ClearMessages_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        REQUESTINFO = 1
        ACCOUNTINFO = 2

        FIELDS = {
          REQUESTINFO => { type: ::Thrift::Types::STRUCT, name: "requestInfo", class: ::XSS::AutoGenerated::QueueRequestInfo },
          ACCOUNTINFO => { type: ::Thrift::Types::STRUCT, name: "accountInfo", class: ::XSS::AutoGenerated::StorageAccountInfo }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class ClearMessages_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        STORAGEEXCEPTION = 1

        FIELDS = {
          STORAGEEXCEPTION => { type: ::Thrift::Types::STRUCT, name: "storageException", class: ::XSS::AutoGenerated::WrappedStorageException }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class FetchAttributes_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        REQUESTINFO = 1
        ACCOUNTINFO = 2

        FIELDS = {
          REQUESTINFO => { type: ::Thrift::Types::STRUCT, name: "requestInfo", class: ::XSS::AutoGenerated::QueueRequestInfo },
          ACCOUNTINFO => { type: ::Thrift::Types::STRUCT, name: "accountInfo", class: ::XSS::AutoGenerated::StorageAccountInfo }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class FetchAttributes_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        STORAGEEXCEPTION = 1

        FIELDS = {
          SUCCESS => { type: ::Thrift::Types::STRUCT, name: "success", class: ::XSS::AutoGenerated::CloudQueueResponse },
          STORAGEEXCEPTION => { type: ::Thrift::Types::STRUCT, name: "storageException", class: ::XSS::AutoGenerated::WrappedStorageException }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class SetMetadata_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        REQUESTINFO = 1
        ACCOUNTINFO = 2
        METADATA = 3

        FIELDS = {
          REQUESTINFO => { type: ::Thrift::Types::STRUCT, name: "requestInfo", class: ::XSS::AutoGenerated::QueueRequestInfo },
          ACCOUNTINFO => { type: ::Thrift::Types::STRUCT, name: "accountInfo", class: ::XSS::AutoGenerated::StorageAccountInfo },
          METADATA => { type: ::Thrift::Types::MAP, name: "metadata", key: { type: ::Thrift::Types::STRING }, value: { type: ::Thrift::Types::STRING } }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class SetMetadata_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        STORAGEEXCEPTION = 1

        FIELDS = {
          STORAGEEXCEPTION => { type: ::Thrift::Types::STRUCT, name: "storageException", class: ::XSS::AutoGenerated::WrappedStorageException }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class AddMessage_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        ADDMESSAGEPAYLOAD = 1
        ACCOUNTINFO = 2

        FIELDS = {
          ADDMESSAGEPAYLOAD => { type: ::Thrift::Types::STRUCT, name: "addMessagePayload", class: ::XSS::AutoGenerated::AddMessagePayload },
          ACCOUNTINFO => { type: ::Thrift::Types::STRUCT, name: "accountInfo", class: ::XSS::AutoGenerated::StorageAccountInfo }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class AddMessage_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        STORAGEEXCEPTION = 1

        FIELDS = {
          SUCCESS => { type: ::Thrift::Types::STRUCT, name: "success", class: ::XSS::AutoGenerated::CreateMessageResponse },
          STORAGEEXCEPTION => { type: ::Thrift::Types::STRUCT, name: "storageException", class: ::XSS::AutoGenerated::WrappedStorageException }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class UpdateMessage_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        UPDATEMESSAGEPAYLOAD = 1
        ACCOUNTINFO = 2
        VISIBILITYTIMEOUT = 3
        UPDATEFIELDS = 4

        FIELDS = {
          UPDATEMESSAGEPAYLOAD => { type: ::Thrift::Types::STRUCT, name: "updateMessagePayload", class: ::XSS::AutoGenerated::UpdateMessagePayload },
          ACCOUNTINFO => { type: ::Thrift::Types::STRUCT, name: "accountInfo", class: ::XSS::AutoGenerated::StorageAccountInfo },
          VISIBILITYTIMEOUT => { type: ::Thrift::Types::I64, name: "visibilityTimeout" },
          UPDATEFIELDS => { type: ::Thrift::Types::I32, name: "updateFields" }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class UpdateMessage_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        STORAGEEXCEPTION = 1

        FIELDS = {
          SUCCESS => { type: ::Thrift::Types::STRUCT, name: "success", class: ::XSS::AutoGenerated::UpdateMessageResponse },
          STORAGEEXCEPTION => { type: ::Thrift::Types::STRUCT, name: "storageException", class: ::XSS::AutoGenerated::WrappedStorageException }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class GetMessage_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        REQUESTINFO = 1
        ACCOUNTINFO = 2
        VISIBILITYTIMEOUT = 3

        FIELDS = {
          REQUESTINFO => { type: ::Thrift::Types::STRUCT, name: "requestInfo", class: ::XSS::AutoGenerated::QueueRequestInfo },
          ACCOUNTINFO => { type: ::Thrift::Types::STRUCT, name: "accountInfo", class: ::XSS::AutoGenerated::StorageAccountInfo },
          VISIBILITYTIMEOUT => { type: ::Thrift::Types::I64, name: "visibilityTimeout" }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class GetMessage_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        STORAGEEXCEPTION = 1

        FIELDS = {
          SUCCESS => { type: ::Thrift::Types::STRUCT, name: "success", class: ::XSS::AutoGenerated::ThriftQueueMessage },
          STORAGEEXCEPTION => { type: ::Thrift::Types::STRUCT, name: "storageException", class: ::XSS::AutoGenerated::WrappedStorageException }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class PeekMessage_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        REQUESTINFO = 1
        ACCOUNTINFO = 2

        FIELDS = {
          REQUESTINFO => { type: ::Thrift::Types::STRUCT, name: "requestInfo", class: ::XSS::AutoGenerated::QueueRequestInfo },
          ACCOUNTINFO => { type: ::Thrift::Types::STRUCT, name: "accountInfo", class: ::XSS::AutoGenerated::StorageAccountInfo }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class PeekMessage_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        STORAGEEXCEPTION = 1

        FIELDS = {
          SUCCESS => { type: ::Thrift::Types::STRUCT, name: "success", class: ::XSS::AutoGenerated::ThriftQueueMessage },
          STORAGEEXCEPTION => { type: ::Thrift::Types::STRUCT, name: "storageException", class: ::XSS::AutoGenerated::WrappedStorageException }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class GetMessages_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        REQUESTINFO = 1
        ACCOUNTINFO = 2
        VISIBILITYTIMEOUT = 3
        MESSAGECOUNT = 4

        FIELDS = {
          REQUESTINFO => { type: ::Thrift::Types::STRUCT, name: "requestInfo", class: ::XSS::AutoGenerated::QueueRequestInfo },
          ACCOUNTINFO => { type: ::Thrift::Types::STRUCT, name: "accountInfo", class: ::XSS::AutoGenerated::StorageAccountInfo },
          VISIBILITYTIMEOUT => { type: ::Thrift::Types::I64, name: "visibilityTimeout" },
          MESSAGECOUNT => { type: ::Thrift::Types::I32, name: "messageCount" }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class GetMessages_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        STORAGEEXCEPTION = 1

        FIELDS = {
          SUCCESS => { type: ::Thrift::Types::LIST, name: "success", element: { type: ::Thrift::Types::STRUCT, class: ::XSS::AutoGenerated::ThriftQueueMessage } },
          STORAGEEXCEPTION => { type: ::Thrift::Types::STRUCT, name: "storageException", class: ::XSS::AutoGenerated::WrappedStorageException }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class PeekMessages_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        REQUESTINFO = 1
        ACCOUNTINFO = 2
        MESSAGECOUNT = 3

        FIELDS = {
          REQUESTINFO => { type: ::Thrift::Types::STRUCT, name: "requestInfo", class: ::XSS::AutoGenerated::QueueRequestInfo },
          ACCOUNTINFO => { type: ::Thrift::Types::STRUCT, name: "accountInfo", class: ::XSS::AutoGenerated::StorageAccountInfo },
          MESSAGECOUNT => { type: ::Thrift::Types::I32, name: "messageCount" }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class PeekMessages_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        STORAGEEXCEPTION = 1

        FIELDS = {
          SUCCESS => { type: ::Thrift::Types::LIST, name: "success", element: { type: ::Thrift::Types::STRUCT, class: ::XSS::AutoGenerated::ThriftQueueMessage } },
          STORAGEEXCEPTION => { type: ::Thrift::Types::STRUCT, name: "storageException", class: ::XSS::AutoGenerated::WrappedStorageException }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class DeleteMessage_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        REQUESTINFO = 1
        ACCOUNTINFO = 2
        MESSAGEID = 3
        POPRECEIPT = 4

        FIELDS = {
          REQUESTINFO => { type: ::Thrift::Types::STRUCT, name: "requestInfo", class: ::XSS::AutoGenerated::QueueRequestInfo },
          ACCOUNTINFO => { type: ::Thrift::Types::STRUCT, name: "accountInfo", class: ::XSS::AutoGenerated::StorageAccountInfo },
          MESSAGEID => { type: ::Thrift::Types::STRING, name: "messageId" },
          POPRECEIPT => { type: ::Thrift::Types::STRING, name: "popReceipt" }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class DeleteMessage_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        STORAGEEXCEPTION = 1

        FIELDS = {
          STORAGEEXCEPTION => { type: ::Thrift::Types::STRUCT, name: "storageException", class: ::XSS::AutoGenerated::WrappedStorageException }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class SetPermissions_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        REQUESTINFO = 1
        ACCOUNTINFO = 2
        PERMISSIONS = 3

        FIELDS = {
          REQUESTINFO => { type: ::Thrift::Types::STRUCT, name: "requestInfo", class: ::XSS::AutoGenerated::QueueRequestInfo },
          ACCOUNTINFO => { type: ::Thrift::Types::STRUCT, name: "accountInfo", class: ::XSS::AutoGenerated::StorageAccountInfo },
          PERMISSIONS => { type: ::Thrift::Types::MAP, name: "permissions", key: { type: ::Thrift::Types::STRING }, value: { type: ::Thrift::Types::STRUCT, class: ::XSS::AutoGenerated::ThriftSharedAccessQueuePolicy } }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class SetPermissions_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        STORAGEEXCEPTION = 1

        FIELDS = {
          STORAGEEXCEPTION => { type: ::Thrift::Types::STRUCT, name: "storageException", class: ::XSS::AutoGenerated::WrappedStorageException }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class GetPermissions_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        REQUESTINFO = 1
        ACCOUNTINFO = 2

        FIELDS = {
          REQUESTINFO => { type: ::Thrift::Types::STRUCT, name: "requestInfo", class: ::XSS::AutoGenerated::QueueRequestInfo },
          ACCOUNTINFO => { type: ::Thrift::Types::STRUCT, name: "accountInfo", class: ::XSS::AutoGenerated::StorageAccountInfo }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class GetPermissions_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        STORAGEEXCEPTION = 1

        FIELDS = {
          SUCCESS => { type: ::Thrift::Types::MAP, name: "success", key: { type: ::Thrift::Types::STRING }, value: { type: ::Thrift::Types::STRUCT, class: ::XSS::AutoGenerated::ThriftSharedAccessQueuePolicy } },
          STORAGEEXCEPTION => { type: ::Thrift::Types::STRUCT, name: "storageException", class: ::XSS::AutoGenerated::WrappedStorageException }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end
    end
  end
end
