#
# Auto-generated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require "thrift"
require_relative "cloud_file_share_types"

module Azure::Storage::Stress
  module AutoGenerated
    module CloudFileShareService
      class Client
        include ::Thrift::Client

        def createShare(accountInfo, shareName, createIfNotExists, snapshotTime, fileRequestOptions, operationContext)
          send_createShare(accountInfo, shareName, createIfNotExists, snapshotTime, fileRequestOptions, operationContext)
          return recv_createShare()
        end

        def send_createShare(accountInfo, shareName, createIfNotExists, snapshotTime, fileRequestOptions, operationContext)
          send_message("createShare", CreateShare_args, accountInfo: accountInfo, shareName: shareName, createIfNotExists: createIfNotExists, snapshotTime: snapshotTime, fileRequestOptions: fileRequestOptions, operationContext: operationContext)
        end

        def recv_createShare()
          result = receive_message(CreateShare_result)
          return result.success unless result.success.nil?
          raise result.wse unless result.wse.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, "createShare failed: unknown result")
        end

        def deleteShare(accountInfo, shareName, deleteIfExists, snapshotTime, deleteSnapshotOptions, accessCondition, fileRequestOptions, operationContext)
          send_deleteShare(accountInfo, shareName, deleteIfExists, snapshotTime, deleteSnapshotOptions, accessCondition, fileRequestOptions, operationContext)
          return recv_deleteShare()
        end

        def send_deleteShare(accountInfo, shareName, deleteIfExists, snapshotTime, deleteSnapshotOptions, accessCondition, fileRequestOptions, operationContext)
          send_message("deleteShare", DeleteShare_args, accountInfo: accountInfo, shareName: shareName, deleteIfExists: deleteIfExists, snapshotTime: snapshotTime, deleteSnapshotOptions: deleteSnapshotOptions, accessCondition: accessCondition, fileRequestOptions: fileRequestOptions, operationContext: operationContext)
        end

        def recv_deleteShare()
          result = receive_message(DeleteShare_result)
          return result.success unless result.success.nil?
          raise result.wse unless result.wse.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, "deleteShare failed: unknown result")
        end

        def fetchAttributes(accountInfo, shareName, snapshotTime, accessCondition, fileRequestOptions, operationContext)
          send_fetchAttributes(accountInfo, shareName, snapshotTime, accessCondition, fileRequestOptions, operationContext)
          return recv_fetchAttributes()
        end

        def send_fetchAttributes(accountInfo, shareName, snapshotTime, accessCondition, fileRequestOptions, operationContext)
          send_message("fetchAttributes", FetchAttributes_args, accountInfo: accountInfo, shareName: shareName, snapshotTime: snapshotTime, accessCondition: accessCondition, fileRequestOptions: fileRequestOptions, operationContext: operationContext)
        end

        def recv_fetchAttributes()
          result = receive_message(FetchAttributes_result)
          return result.success unless result.success.nil?
          raise result.wse unless result.wse.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, "fetchAttributes failed: unknown result")
        end

        def exists(accountInfo, shareName, snapshotTime, fileRequestOptions, operationContext)
          send_exists(accountInfo, shareName, snapshotTime, fileRequestOptions, operationContext)
          return recv_exists()
        end

        def send_exists(accountInfo, shareName, snapshotTime, fileRequestOptions, operationContext)
          send_message("exists", Exists_args, accountInfo: accountInfo, shareName: shareName, snapshotTime: snapshotTime, fileRequestOptions: fileRequestOptions, operationContext: operationContext)
        end

        def recv_exists()
          result = receive_message(Exists_result)
          return result.success unless result.success.nil?
          raise result.wse unless result.wse.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, "exists failed: unknown result")
        end

        def setMetadata(accountInfo, shareName, metadata, snapshotTime, accessCondition, fileRequestOptions, operationContext)
          send_setMetadata(accountInfo, shareName, metadata, snapshotTime, accessCondition, fileRequestOptions, operationContext)
          return recv_setMetadata()
        end

        def send_setMetadata(accountInfo, shareName, metadata, snapshotTime, accessCondition, fileRequestOptions, operationContext)
          send_message("setMetadata", SetMetadata_args, accountInfo: accountInfo, shareName: shareName, metadata: metadata, snapshotTime: snapshotTime, accessCondition: accessCondition, fileRequestOptions: fileRequestOptions, operationContext: operationContext)
        end

        def recv_setMetadata()
          result = receive_message(SetMetadata_result)
          return result.success unless result.success.nil?
          raise result.wse unless result.wse.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, "setMetadata failed: unknown result")
        end

        def setProperties(requestInfo, accountInfo, properties)
          send_setProperties(requestInfo, accountInfo, properties)
          return recv_setProperties()
        end

        def send_setProperties(requestInfo, accountInfo, properties)
          send_message("setProperties", SetProperties_args, requestInfo: requestInfo, accountInfo: accountInfo, properties: properties)
        end

        def recv_setProperties()
          result = receive_message(SetProperties_result)
          return result.success unless result.success.nil?
          raise result.wse unless result.wse.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, "setProperties failed: unknown result")
        end

        def setPermissions(reqInfo, accountInfo, permissions)
          send_setPermissions(reqInfo, accountInfo, permissions)
          return recv_setPermissions()
        end

        def send_setPermissions(reqInfo, accountInfo, permissions)
          send_message("setPermissions", SetPermissions_args, reqInfo: reqInfo, accountInfo: accountInfo, permissions: permissions)
        end

        def recv_setPermissions()
          result = receive_message(SetPermissions_result)
          return result.success unless result.success.nil?
          raise result.storageException unless result.storageException.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, "setPermissions failed: unknown result")
        end

        def getPermissions(reqInfo, accountInfo)
          send_getPermissions(reqInfo, accountInfo)
          return recv_getPermissions()
        end

        def send_getPermissions(reqInfo, accountInfo)
          send_message("getPermissions", GetPermissions_args, reqInfo: reqInfo, accountInfo: accountInfo)
        end

        def recv_getPermissions()
          result = receive_message(GetPermissions_result)
          return result.success unless result.success.nil?
          raise result.storageException unless result.storageException.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, "getPermissions failed: unknown result")
        end

        def getShareStats(shareName, snapshotTime, fileRequestOptions, thriftOperationContext, accountInfo)
          send_getShareStats(shareName, snapshotTime, fileRequestOptions, thriftOperationContext, accountInfo)
          return recv_getShareStats()
        end

        def send_getShareStats(shareName, snapshotTime, fileRequestOptions, thriftOperationContext, accountInfo)
          send_message("getShareStats", GetShareStats_args, shareName: shareName, snapshotTime: snapshotTime, fileRequestOptions: fileRequestOptions, thriftOperationContext: thriftOperationContext, accountInfo: accountInfo)
        end

        def recv_getShareStats()
          result = receive_message(GetShareStats_result)
          return result.success unless result.success.nil?
          raise result.wse unless result.wse.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, "getShareStats failed: unknown result")
        end

        def snapshotShare(accountInfo, shareName, metadata, snapshotTime, accessCondition, fileRequestOptions, operationContext)
          send_snapshotShare(accountInfo, shareName, metadata, snapshotTime, accessCondition, fileRequestOptions, operationContext)
          return recv_snapshotShare()
        end

        def send_snapshotShare(accountInfo, shareName, metadata, snapshotTime, accessCondition, fileRequestOptions, operationContext)
          send_message("snapshotShare", SnapshotShare_args, accountInfo: accountInfo, shareName: shareName, metadata: metadata, snapshotTime: snapshotTime, accessCondition: accessCondition, fileRequestOptions: fileRequestOptions, operationContext: operationContext)
        end

        def recv_snapshotShare()
          result = receive_message(SnapshotShare_result)
          return result.success unless result.success.nil?
          raise result.wse unless result.wse.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, "snapshotShare failed: unknown result")
        end
      end

      class Processor
        include ::Thrift::Processor

        def process_createShare(seqid, iprot, oprot)
          args = read_args(iprot, CreateShare_args)
          result = CreateShare_result.new()
          begin
            result.success = @handler.createShare(args.accountInfo, args.shareName, args.createIfNotExists, args.snapshotTime, args.fileRequestOptions, args.operationContext)
          rescue ::XSS::AutoGenerated::WrappedStorageException => wse
            result.wse = wse
          end
          write_result(result, oprot, "createShare", seqid)
        end

        def process_deleteShare(seqid, iprot, oprot)
          args = read_args(iprot, DeleteShare_args)
          result = DeleteShare_result.new()
          begin
            result.success = @handler.deleteShare(args.accountInfo, args.shareName, args.deleteIfExists, args.snapshotTime, args.deleteSnapshotOptions, args.accessCondition, args.fileRequestOptions, args.operationContext)
          rescue ::XSS::AutoGenerated::WrappedStorageException => wse
            result.wse = wse
          end
          write_result(result, oprot, "deleteShare", seqid)
        end

        def process_fetchAttributes(seqid, iprot, oprot)
          args = read_args(iprot, FetchAttributes_args)
          result = FetchAttributes_result.new()
          begin
            result.success = @handler.fetchAttributes(args.accountInfo, args.shareName, args.snapshotTime, args.accessCondition, args.fileRequestOptions, args.operationContext)
          rescue ::XSS::AutoGenerated::WrappedStorageException => wse
            result.wse = wse
          end
          write_result(result, oprot, "fetchAttributes", seqid)
        end

        def process_exists(seqid, iprot, oprot)
          args = read_args(iprot, Exists_args)
          result = Exists_result.new()
          begin
            result.success = @handler.exists(args.accountInfo, args.shareName, args.snapshotTime, args.fileRequestOptions, args.operationContext)
          rescue ::XSS::AutoGenerated::WrappedStorageException => wse
            result.wse = wse
          end
          write_result(result, oprot, "exists", seqid)
        end

        def process_setMetadata(seqid, iprot, oprot)
          args = read_args(iprot, SetMetadata_args)
          result = SetMetadata_result.new()
          begin
            result.success = @handler.setMetadata(args.accountInfo, args.shareName, args.metadata, args.snapshotTime, args.accessCondition, args.fileRequestOptions, args.operationContext)
          rescue ::XSS::AutoGenerated::WrappedStorageException => wse
            result.wse = wse
          end
          write_result(result, oprot, "setMetadata", seqid)
        end

        def process_setProperties(seqid, iprot, oprot)
          args = read_args(iprot, SetProperties_args)
          result = SetProperties_result.new()
          begin
            result.success = @handler.setProperties(args.requestInfo, args.accountInfo, args.properties)
          rescue ::XSS::AutoGenerated::WrappedStorageException => wse
            result.wse = wse
          end
          write_result(result, oprot, "setProperties", seqid)
        end

        def process_setPermissions(seqid, iprot, oprot)
          args = read_args(iprot, SetPermissions_args)
          result = SetPermissions_result.new()
          begin
            result.success = @handler.setPermissions(args.reqInfo, args.accountInfo, args.permissions)
          rescue ::XSS::AutoGenerated::WrappedStorageException => storageException
            result.storageException = storageException
          end
          write_result(result, oprot, "setPermissions", seqid)
        end

        def process_getPermissions(seqid, iprot, oprot)
          args = read_args(iprot, GetPermissions_args)
          result = GetPermissions_result.new()
          begin
            result.success = @handler.getPermissions(args.reqInfo, args.accountInfo)
          rescue ::XSS::AutoGenerated::WrappedStorageException => storageException
            result.storageException = storageException
          end
          write_result(result, oprot, "getPermissions", seqid)
        end

        def process_getShareStats(seqid, iprot, oprot)
          args = read_args(iprot, GetShareStats_args)
          result = GetShareStats_result.new()
          begin
            result.success = @handler.getShareStats(args.shareName, args.snapshotTime, args.fileRequestOptions, args.thriftOperationContext, args.accountInfo)
          rescue ::XSS::AutoGenerated::WrappedStorageException => wse
            result.wse = wse
          end
          write_result(result, oprot, "getShareStats", seqid)
        end

        def process_snapshotShare(seqid, iprot, oprot)
          args = read_args(iprot, SnapshotShare_args)
          result = SnapshotShare_result.new()
          begin
            result.success = @handler.snapshotShare(args.accountInfo, args.shareName, args.metadata, args.snapshotTime, args.accessCondition, args.fileRequestOptions, args.operationContext)
          rescue ::XSS::AutoGenerated::WrappedStorageException => wse
            result.wse = wse
          end
          write_result(result, oprot, "snapshotShare", seqid)
        end
      end

      # HELPER FUNCTIONS AND STRUCTURES

      class CreateShare_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        ACCOUNTINFO = 1
        SHARENAME = 2
        CREATEIFNOTEXISTS = 3
        SNAPSHOTTIME = 4
        FILEREQUESTOPTIONS = 5
        OPERATIONCONTEXT = 6

        FIELDS = {
          ACCOUNTINFO => { type: ::Thrift::Types::STRUCT, name: "accountInfo", class: ::XSS::AutoGenerated::StorageAccountInfo },
          SHARENAME => { type: ::Thrift::Types::STRING, name: "shareName" },
          CREATEIFNOTEXISTS => { type: ::Thrift::Types::BOOL, name: "createIfNotExists" },
          SNAPSHOTTIME => { type: ::Thrift::Types::STRING, name: "snapshotTime" },
          FILEREQUESTOPTIONS => { type: ::Thrift::Types::STRUCT, name: "fileRequestOptions", class: ::XSS::AutoGenerated::ThriftFileRequestOptions },
          OPERATIONCONTEXT => { type: ::Thrift::Types::STRUCT, name: "operationContext", class: ::XSS::AutoGenerated::OperationContext }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class CreateShare_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        WSE = 1

        FIELDS = {
          SUCCESS => { type: ::Thrift::Types::STRUCT, name: "success", class: ::XSS::AutoGenerated::CreateFileShareResponse },
          WSE => { type: ::Thrift::Types::STRUCT, name: "wse", class: ::XSS::AutoGenerated::WrappedStorageException }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class DeleteShare_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        ACCOUNTINFO = 1
        SHARENAME = 2
        DELETEIFEXISTS = 3
        SNAPSHOTTIME = 4
        DELETESNAPSHOTOPTIONS = 5
        ACCESSCONDITION = 6
        FILEREQUESTOPTIONS = 7
        OPERATIONCONTEXT = 8

        FIELDS = {
          ACCOUNTINFO => { type: ::Thrift::Types::STRUCT, name: "accountInfo", class: ::XSS::AutoGenerated::StorageAccountInfo },
          SHARENAME => { type: ::Thrift::Types::STRING, name: "shareName" },
          DELETEIFEXISTS => { type: ::Thrift::Types::BOOL, name: "deleteIfExists" },
          SNAPSHOTTIME => { type: ::Thrift::Types::STRING, name: "snapshotTime" },
          DELETESNAPSHOTOPTIONS => { type: ::Thrift::Types::I32, name: "deleteSnapshotOptions", enum_class: ::XSS::AutoGenerated::ThriftDeleteShareSnapshotsOption },
          ACCESSCONDITION => { type: ::Thrift::Types::STRUCT, name: "accessCondition", class: ::XSS::AutoGenerated::ThriftAccessCondition },
          FILEREQUESTOPTIONS => { type: ::Thrift::Types::STRUCT, name: "fileRequestOptions", class: ::XSS::AutoGenerated::ThriftFileRequestOptions },
          OPERATIONCONTEXT => { type: ::Thrift::Types::STRUCT, name: "operationContext", class: ::XSS::AutoGenerated::OperationContext }
        }

        def struct_fields; FIELDS; end

        def validate
          unless @deleteSnapshotOptions.nil? || ::XSS::AutoGenerated::ThriftDeleteShareSnapshotsOption::VALID_VALUES.include?(@deleteSnapshotOptions)
            raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, "Invalid value of field deleteSnapshotOptions!")
          end
        end

        ::Thrift::Struct.generate_accessors self
      end

      class DeleteShare_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        WSE = 1

        FIELDS = {
          SUCCESS => { type: ::Thrift::Types::BOOL, name: "success" },
          WSE => { type: ::Thrift::Types::STRUCT, name: "wse", class: ::XSS::AutoGenerated::WrappedStorageException }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class FetchAttributes_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        ACCOUNTINFO = 1
        SHARENAME = 2
        SNAPSHOTTIME = 3
        ACCESSCONDITION = 4
        FILEREQUESTOPTIONS = 5
        OPERATIONCONTEXT = 6

        FIELDS = {
          ACCOUNTINFO => { type: ::Thrift::Types::STRUCT, name: "accountInfo", class: ::XSS::AutoGenerated::StorageAccountInfo },
          SHARENAME => { type: ::Thrift::Types::STRING, name: "shareName" },
          SNAPSHOTTIME => { type: ::Thrift::Types::STRING, name: "snapshotTime" },
          ACCESSCONDITION => { type: ::Thrift::Types::STRUCT, name: "accessCondition", class: ::XSS::AutoGenerated::ThriftAccessCondition },
          FILEREQUESTOPTIONS => { type: ::Thrift::Types::STRUCT, name: "fileRequestOptions", class: ::XSS::AutoGenerated::ThriftFileRequestOptions },
          OPERATIONCONTEXT => { type: ::Thrift::Types::STRUCT, name: "operationContext", class: ::XSS::AutoGenerated::OperationContext }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class FetchAttributes_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        WSE = 1

        FIELDS = {
          SUCCESS => { type: ::Thrift::Types::STRUCT, name: "success", class: ::XSS::AutoGenerated::CloudFileShareResponse },
          WSE => { type: ::Thrift::Types::STRUCT, name: "wse", class: ::XSS::AutoGenerated::WrappedStorageException }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Exists_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        ACCOUNTINFO = 1
        SHARENAME = 2
        SNAPSHOTTIME = 3
        FILEREQUESTOPTIONS = 4
        OPERATIONCONTEXT = 5

        FIELDS = {
          ACCOUNTINFO => { type: ::Thrift::Types::STRUCT, name: "accountInfo", class: ::XSS::AutoGenerated::StorageAccountInfo },
          SHARENAME => { type: ::Thrift::Types::STRING, name: "shareName" },
          SNAPSHOTTIME => { type: ::Thrift::Types::STRING, name: "snapshotTime" },
          FILEREQUESTOPTIONS => { type: ::Thrift::Types::STRUCT, name: "fileRequestOptions", class: ::XSS::AutoGenerated::ThriftFileRequestOptions },
          OPERATIONCONTEXT => { type: ::Thrift::Types::STRUCT, name: "operationContext", class: ::XSS::AutoGenerated::OperationContext }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Exists_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        WSE = 1

        FIELDS = {
          SUCCESS => { type: ::Thrift::Types::STRUCT, name: "success", class: ::XSS::AutoGenerated::ExistsFileShareResponse },
          WSE => { type: ::Thrift::Types::STRUCT, name: "wse", class: ::XSS::AutoGenerated::WrappedStorageException }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class SetMetadata_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        ACCOUNTINFO = 1
        SHARENAME = 2
        METADATA = 3
        SNAPSHOTTIME = 4
        ACCESSCONDITION = 5
        FILEREQUESTOPTIONS = 6
        OPERATIONCONTEXT = 7

        FIELDS = {
          ACCOUNTINFO => { type: ::Thrift::Types::STRUCT, name: "accountInfo", class: ::XSS::AutoGenerated::StorageAccountInfo },
          SHARENAME => { type: ::Thrift::Types::STRING, name: "shareName" },
          METADATA => { type: ::Thrift::Types::MAP, name: "metadata", key: { type: ::Thrift::Types::STRING }, value: { type: ::Thrift::Types::STRING } },
          SNAPSHOTTIME => { type: ::Thrift::Types::STRING, name: "snapshotTime" },
          ACCESSCONDITION => { type: ::Thrift::Types::STRUCT, name: "accessCondition", class: ::XSS::AutoGenerated::ThriftAccessCondition },
          FILEREQUESTOPTIONS => { type: ::Thrift::Types::STRUCT, name: "fileRequestOptions", class: ::XSS::AutoGenerated::ThriftFileRequestOptions },
          OPERATIONCONTEXT => { type: ::Thrift::Types::STRUCT, name: "operationContext", class: ::XSS::AutoGenerated::OperationContext }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class SetMetadata_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        WSE = 1

        FIELDS = {
          SUCCESS => { type: ::Thrift::Types::STRUCT, name: "success", class: ::XSS::AutoGenerated::CloudFileShareResponse },
          WSE => { type: ::Thrift::Types::STRUCT, name: "wse", class: ::XSS::AutoGenerated::WrappedStorageException }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class SetProperties_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        REQUESTINFO = 1
        ACCOUNTINFO = 2
        PROPERTIES = 3

        FIELDS = {
          REQUESTINFO => { type: ::Thrift::Types::STRUCT, name: "requestInfo", class: ::XSS::AutoGenerated::FileShareRequestInfo },
          ACCOUNTINFO => { type: ::Thrift::Types::STRUCT, name: "accountInfo", class: ::XSS::AutoGenerated::StorageAccountInfo },
          PROPERTIES => { type: ::Thrift::Types::STRUCT, name: "properties", class: ::XSS::AutoGenerated::CloudFileShareResponse }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class SetProperties_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        WSE = 1

        FIELDS = {
          SUCCESS => { type: ::Thrift::Types::STRUCT, name: "success", class: ::XSS::AutoGenerated::CloudFileShareResponse },
          WSE => { type: ::Thrift::Types::STRUCT, name: "wse", class: ::XSS::AutoGenerated::WrappedStorageException }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class SetPermissions_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        REQINFO = 1
        ACCOUNTINFO = 2
        PERMISSIONS = 3

        FIELDS = {
          REQINFO => { type: ::Thrift::Types::STRUCT, name: "reqInfo", class: ::XSS::AutoGenerated::FileShareRequestInfo },
          ACCOUNTINFO => { type: ::Thrift::Types::STRUCT, name: "accountInfo", class: ::XSS::AutoGenerated::StorageAccountInfo },
          PERMISSIONS => { type: ::Thrift::Types::STRUCT, name: "permissions", class: ::XSS::AutoGenerated::ThriftFileSharePermissions }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class SetPermissions_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        STORAGEEXCEPTION = 1

        FIELDS = {
          SUCCESS => { type: ::Thrift::Types::STRUCT, name: "success", class: ::XSS::AutoGenerated::CloudFileShareResponse },
          STORAGEEXCEPTION => { type: ::Thrift::Types::STRUCT, name: "storageException", class: ::XSS::AutoGenerated::WrappedStorageException }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class GetPermissions_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        REQINFO = 1
        ACCOUNTINFO = 2

        FIELDS = {
          REQINFO => { type: ::Thrift::Types::STRUCT, name: "reqInfo", class: ::XSS::AutoGenerated::FileShareRequestInfo },
          ACCOUNTINFO => { type: ::Thrift::Types::STRUCT, name: "accountInfo", class: ::XSS::AutoGenerated::StorageAccountInfo }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class GetPermissions_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        STORAGEEXCEPTION = 1

        FIELDS = {
          SUCCESS => { type: ::Thrift::Types::STRUCT, name: "success", class: ::XSS::AutoGenerated::ThriftFileSharePermissions },
          STORAGEEXCEPTION => { type: ::Thrift::Types::STRUCT, name: "storageException", class: ::XSS::AutoGenerated::WrappedStorageException }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class GetShareStats_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SHARENAME = 1
        SNAPSHOTTIME = 2
        FILEREQUESTOPTIONS = 3
        THRIFTOPERATIONCONTEXT = 4
        ACCOUNTINFO = 5

        FIELDS = {
          SHARENAME => { type: ::Thrift::Types::STRING, name: "shareName" },
          SNAPSHOTTIME => { type: ::Thrift::Types::STRING, name: "snapshotTime" },
          FILEREQUESTOPTIONS => { type: ::Thrift::Types::STRUCT, name: "fileRequestOptions", class: ::XSS::AutoGenerated::ThriftFileRequestOptions },
          THRIFTOPERATIONCONTEXT => { type: ::Thrift::Types::STRUCT, name: "thriftOperationContext", class: ::XSS::AutoGenerated::OperationContext },
          ACCOUNTINFO => { type: ::Thrift::Types::STRUCT, name: "accountInfo", class: ::XSS::AutoGenerated::StorageAccountInfo }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class GetShareStats_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        WSE = 1

        FIELDS = {
          SUCCESS => { type: ::Thrift::Types::STRUCT, name: "success", class: ::XSS::AutoGenerated::ThriftFileShareStats },
          WSE => { type: ::Thrift::Types::STRUCT, name: "wse", class: ::XSS::AutoGenerated::WrappedStorageException }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class SnapshotShare_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        ACCOUNTINFO = 1
        SHARENAME = 2
        METADATA = 3
        SNAPSHOTTIME = 4
        ACCESSCONDITION = 5
        FILEREQUESTOPTIONS = 6
        OPERATIONCONTEXT = 7

        FIELDS = {
          ACCOUNTINFO => { type: ::Thrift::Types::STRUCT, name: "accountInfo", class: ::XSS::AutoGenerated::StorageAccountInfo },
          SHARENAME => { type: ::Thrift::Types::STRING, name: "shareName" },
          METADATA => { type: ::Thrift::Types::MAP, name: "metadata", key: { type: ::Thrift::Types::STRING }, value: { type: ::Thrift::Types::STRING } },
          SNAPSHOTTIME => { type: ::Thrift::Types::STRING, name: "snapshotTime" },
          ACCESSCONDITION => { type: ::Thrift::Types::STRUCT, name: "accessCondition", class: ::XSS::AutoGenerated::ThriftAccessCondition },
          FILEREQUESTOPTIONS => { type: ::Thrift::Types::STRUCT, name: "fileRequestOptions", class: ::XSS::AutoGenerated::ThriftFileRequestOptions },
          OPERATIONCONTEXT => { type: ::Thrift::Types::STRUCT, name: "operationContext", class: ::XSS::AutoGenerated::OperationContext }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class SnapshotShare_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        WSE = 1

        FIELDS = {
          SUCCESS => { type: ::Thrift::Types::STRUCT, name: "success", class: ::XSS::AutoGenerated::ShareResponseDetails },
          WSE => { type: ::Thrift::Types::STRUCT, name: "wse", class: ::XSS::AutoGenerated::WrappedStorageException }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end
    end
  end
end
