#
# Auto-generated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require "thrift"
require_relative "cloud_blob_service"
require_relative "blob_types"

module Azure::Storage::Stress
  module AutoGenerated
    module CloudAppendBlobService
      class Client < ::XSS::AutoGenerated::CloudBlobService::Client
        include ::Thrift::Client

        def create(requestInfo, accountInfo)
          send_create(requestInfo, accountInfo)
          return recv_create()
        end

        def send_create(requestInfo, accountInfo)
          send_message("create", Create_args, requestInfo: requestInfo, accountInfo: accountInfo)
        end

        def recv_create()
          result = receive_message(Create_result)
          return result.success unless result.success.nil?
          raise result.wse unless result.wse.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, "create failed: unknown result")
        end

        def appendBlockFromByteArray(requestPayload, accountInfo)
          send_appendBlockFromByteArray(requestPayload, accountInfo)
          return recv_appendBlockFromByteArray()
        end

        def send_appendBlockFromByteArray(requestPayload, accountInfo)
          send_message("appendBlockFromByteArray", AppendBlockFromByteArray_args, requestPayload: requestPayload, accountInfo: accountInfo)
        end

        def recv_appendBlockFromByteArray()
          result = receive_message(AppendBlockFromByteArray_result)
          return result.success unless result.success.nil?
          raise result.wse unless result.wse.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, "appendBlockFromByteArray failed: unknown result")
        end

        def appendBlockFromStream(requestInfo, accountInfo, buffer, length)
          send_appendBlockFromStream(requestInfo, accountInfo, buffer, length)
          return recv_appendBlockFromStream()
        end

        def send_appendBlockFromStream(requestInfo, accountInfo, buffer, length)
          send_message("appendBlockFromStream", AppendBlockFromStream_args, requestInfo: requestInfo, accountInfo: accountInfo, buffer: buffer, length: length)
        end

        def recv_appendBlockFromStream()
          result = receive_message(AppendBlockFromStream_result)
          return result.success unless result.success.nil?
          raise result.wse unless result.wse.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, "appendBlockFromStream failed: unknown result")
        end
      end

      class Processor < ::XSS::AutoGenerated::CloudBlobService::Processor
        include ::Thrift::Processor

        def process_create(seqid, iprot, oprot)
          args = read_args(iprot, Create_args)
          result = Create_result.new()
          begin
            result.success = @handler.create(args.requestInfo, args.accountInfo)
          rescue ::XSS::AutoGenerated::WrappedStorageException => wse
            result.wse = wse
          end
          write_result(result, oprot, "create", seqid)
        end

        def process_appendBlockFromByteArray(seqid, iprot, oprot)
          args = read_args(iprot, AppendBlockFromByteArray_args)
          result = AppendBlockFromByteArray_result.new()
          begin
            result.success = @handler.appendBlockFromByteArray(args.requestPayload, args.accountInfo)
          rescue ::XSS::AutoGenerated::WrappedStorageException => wse
            result.wse = wse
          end
          write_result(result, oprot, "appendBlockFromByteArray", seqid)
        end

        def process_appendBlockFromStream(seqid, iprot, oprot)
          args = read_args(iprot, AppendBlockFromStream_args)
          result = AppendBlockFromStream_result.new()
          begin
            result.success = @handler.appendBlockFromStream(args.requestInfo, args.accountInfo, args.buffer, args.length)
          rescue ::XSS::AutoGenerated::WrappedStorageException => wse
            result.wse = wse
          end
          write_result(result, oprot, "appendBlockFromStream", seqid)
        end
      end

      # HELPER FUNCTIONS AND STRUCTURES

      class Create_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        REQUESTINFO = 1
        ACCOUNTINFO = 2

        FIELDS = {
          REQUESTINFO => { type: ::Thrift::Types::STRUCT, name: "requestInfo", class: ::XSS::AutoGenerated::BlobRequestInfo },
          ACCOUNTINFO => { type: ::Thrift::Types::STRUCT, name: "accountInfo", class: ::XSS::AutoGenerated::StorageAccountInfo }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Create_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        WSE = 1

        FIELDS = {
          SUCCESS => { type: ::Thrift::Types::STRUCT, name: "success", class: ::XSS::AutoGenerated::CloudBlobResponse },
          WSE => { type: ::Thrift::Types::STRUCT, name: "wse", class: ::XSS::AutoGenerated::WrappedStorageException }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class AppendBlockFromByteArray_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        REQUESTPAYLOAD = 1
        ACCOUNTINFO = 2

        FIELDS = {
          REQUESTPAYLOAD => { type: ::Thrift::Types::STRUCT, name: "requestPayload", class: ::XSS::AutoGenerated::AppendBlockFromByteArrayPayload },
          ACCOUNTINFO => { type: ::Thrift::Types::STRUCT, name: "accountInfo", class: ::XSS::AutoGenerated::StorageAccountInfo }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class AppendBlockFromByteArray_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        WSE = 1

        FIELDS = {
          SUCCESS => { type: ::Thrift::Types::STRUCT, name: "success", class: ::XSS::AutoGenerated::AppendBlockFromByteArrayResponse },
          WSE => { type: ::Thrift::Types::STRUCT, name: "wse", class: ::XSS::AutoGenerated::WrappedStorageException }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class AppendBlockFromStream_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        REQUESTINFO = 1
        ACCOUNTINFO = 2
        BUFFER = 3
        LENGTH = 4

        FIELDS = {
          REQUESTINFO => { type: ::Thrift::Types::STRUCT, name: "requestInfo", class: ::XSS::AutoGenerated::BlobRequestInfo },
          ACCOUNTINFO => { type: ::Thrift::Types::STRUCT, name: "accountInfo", class: ::XSS::AutoGenerated::StorageAccountInfo },
          BUFFER => { type: ::Thrift::Types::STRING, name: "buffer", binary: true },
          LENGTH => { type: ::Thrift::Types::I64, name: "length" }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class AppendBlockFromStream_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        WSE = 1

        FIELDS = {
          SUCCESS => { type: ::Thrift::Types::STRUCT, name: "success", class: ::XSS::AutoGenerated::AppendBlockFromByteArrayResponse },
          WSE => { type: ::Thrift::Types::STRUCT, name: "wse", class: ::XSS::AutoGenerated::WrappedStorageException }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end
    end
  end
end
