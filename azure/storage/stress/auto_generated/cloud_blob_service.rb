#
# Auto-generated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require "thrift"
require_relative "blob_types"

module Azure::Storage::Stress
  module AutoGenerated
    module CloudBlobService
      class Client
        include ::Thrift::Client

        def deleteBlob(requestInfo, accountInfo, deleteIfExists, isPermanentDelete, deleteSnapshotsOption)
          send_deleteBlob(requestInfo, accountInfo, deleteIfExists, isPermanentDelete, deleteSnapshotsOption)
          return recv_deleteBlob()
        end

        def send_deleteBlob(requestInfo, accountInfo, deleteIfExists, isPermanentDelete, deleteSnapshotsOption)
          send_message("deleteBlob", DeleteBlob_args, requestInfo: requestInfo, accountInfo: accountInfo, deleteIfExists: deleteIfExists, isPermanentDelete: isPermanentDelete, deleteSnapshotsOption: deleteSnapshotsOption)
        end

        def recv_deleteBlob()
          result = receive_message(DeleteBlob_result)
          return result.success unless result.success.nil?
          raise result.storageException unless result.storageException.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, "deleteBlob failed: unknown result")
        end

        def exists(requestInfo, accountInfo)
          send_exists(requestInfo, accountInfo)
          return recv_exists()
        end

        def send_exists(requestInfo, accountInfo)
          send_message("exists", Exists_args, requestInfo: requestInfo, accountInfo: accountInfo)
        end

        def recv_exists()
          result = receive_message(Exists_result)
          return result.success unless result.success.nil?
          raise result.storageException unless result.storageException.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, "exists failed: unknown result")
        end

        def setMetadata(requestInfo, accountInfo, metadata)
          send_setMetadata(requestInfo, accountInfo, metadata)
          return recv_setMetadata()
        end

        def send_setMetadata(requestInfo, accountInfo, metadata)
          send_message("setMetadata", SetMetadata_args, requestInfo: requestInfo, accountInfo: accountInfo, metadata: metadata)
        end

        def recv_setMetadata()
          result = receive_message(SetMetadata_result)
          return result.success unless result.success.nil?
          raise result.wse unless result.wse.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, "setMetadata failed: unknown result")
        end

        def setProperties(requestInfo, accountInfo, properties)
          send_setProperties(requestInfo, accountInfo, properties)
          return recv_setProperties()
        end

        def send_setProperties(requestInfo, accountInfo, properties)
          send_message("setProperties", SetProperties_args, requestInfo: requestInfo, accountInfo: accountInfo, properties: properties)
        end

        def recv_setProperties()
          result = receive_message(SetProperties_result)
          return result.success unless result.success.nil?
          raise result.wse unless result.wse.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, "setProperties failed: unknown result")
        end

        def fetchAttributes(requestInfo, accountInfo)
          send_fetchAttributes(requestInfo, accountInfo)
          return recv_fetchAttributes()
        end

        def send_fetchAttributes(requestInfo, accountInfo)
          send_message("fetchAttributes", FetchAttributes_args, requestInfo: requestInfo, accountInfo: accountInfo)
        end

        def recv_fetchAttributes()
          result = receive_message(FetchAttributes_result)
          return result.success unless result.success.nil?
          raise result.wse unless result.wse.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, "fetchAttributes failed: unknown result")
        end

        def downloadToStream(requestInfo, accountInfo)
          send_downloadToStream(requestInfo, accountInfo)
          return recv_downloadToStream()
        end

        def send_downloadToStream(requestInfo, accountInfo)
          send_message("downloadToStream", DownloadToStream_args, requestInfo: requestInfo, accountInfo: accountInfo)
        end

        def recv_downloadToStream()
          result = receive_message(DownloadToStream_result)
          return result.success unless result.success.nil?
          raise result.wse unless result.wse.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, "downloadToStream failed: unknown result")
        end

        def downloadRangeToStream(requestInfo, accountInfo, offset, length)
          send_downloadRangeToStream(requestInfo, accountInfo, offset, length)
          return recv_downloadRangeToStream()
        end

        def send_downloadRangeToStream(requestInfo, accountInfo, offset, length)
          send_message("downloadRangeToStream", DownloadRangeToStream_args, requestInfo: requestInfo, accountInfo: accountInfo, offset: offset, length: length)
        end

        def recv_downloadRangeToStream()
          result = receive_message(DownloadRangeToStream_result)
          return result.success unless result.success.nil?
          raise result.wse unless result.wse.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, "downloadRangeToStream failed: unknown result")
        end

        def downloadToByteArray(requestInfo, accountInfo, targetSize, index)
          send_downloadToByteArray(requestInfo, accountInfo, targetSize, index)
          return recv_downloadToByteArray()
        end

        def send_downloadToByteArray(requestInfo, accountInfo, targetSize, index)
          send_message("downloadToByteArray", DownloadToByteArray_args, requestInfo: requestInfo, accountInfo: accountInfo, targetSize: targetSize, index: index)
        end

        def recv_downloadToByteArray()
          result = receive_message(DownloadToByteArray_result)
          return result.success unless result.success.nil?
          raise result.wse unless result.wse.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, "downloadToByteArray failed: unknown result")
        end

        def downloadRangeToByteArray(requestInfo, accountInfo, targetSize, index, offset, length)
          send_downloadRangeToByteArray(requestInfo, accountInfo, targetSize, index, offset, length)
          return recv_downloadRangeToByteArray()
        end

        def send_downloadRangeToByteArray(requestInfo, accountInfo, targetSize, index, offset, length)
          send_message("downloadRangeToByteArray", DownloadRangeToByteArray_args, requestInfo: requestInfo, accountInfo: accountInfo, targetSize: targetSize, index: index, offset: offset, length: length)
        end

        def recv_downloadRangeToByteArray()
          result = receive_message(DownloadRangeToByteArray_result)
          return result.success unless result.success.nil?
          raise result.wse unless result.wse.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, "downloadRangeToByteArray failed: unknown result")
        end

        def uploadFromByteArray(requestInfo, accountInfo, buffer, index, count)
          send_uploadFromByteArray(requestInfo, accountInfo, buffer, index, count)
          return recv_uploadFromByteArray()
        end

        def send_uploadFromByteArray(requestInfo, accountInfo, buffer, index, count)
          send_message("uploadFromByteArray", UploadFromByteArray_args, requestInfo: requestInfo, accountInfo: accountInfo, buffer: buffer, index: index, count: count)
        end

        def recv_uploadFromByteArray()
          result = receive_message(UploadFromByteArray_result)
          return result.success unless result.success.nil?
          raise result.wse unless result.wse.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, "uploadFromByteArray failed: unknown result")
        end

        def downloadToFile(requestInfo, accountInfo, path, fileMode)
          send_downloadToFile(requestInfo, accountInfo, path, fileMode)
          return recv_downloadToFile()
        end

        def send_downloadToFile(requestInfo, accountInfo, path, fileMode)
          send_message("downloadToFile", DownloadToFile_args, requestInfo: requestInfo, accountInfo: accountInfo, path: path, fileMode: fileMode)
        end

        def recv_downloadToFile()
          result = receive_message(DownloadToFile_result)
          return result.success unless result.success.nil?
          raise result.wse unless result.wse.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, "downloadToFile failed: unknown result")
        end

        def acquireLease(requestInfo, accountInfo, leaseTime, proposedLeaseId)
          send_acquireLease(requestInfo, accountInfo, leaseTime, proposedLeaseId)
          return recv_acquireLease()
        end

        def send_acquireLease(requestInfo, accountInfo, leaseTime, proposedLeaseId)
          send_message("acquireLease", AcquireLease_args, requestInfo: requestInfo, accountInfo: accountInfo, leaseTime: leaseTime, proposedLeaseId: proposedLeaseId)
        end

        def recv_acquireLease()
          result = receive_message(AcquireLease_result)
          return result.success unless result.success.nil?
          raise result.wse unless result.wse.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, "acquireLease failed: unknown result")
        end

        def breakLease(requestInfo, accountInfo, breakPeriod)
          send_breakLease(requestInfo, accountInfo, breakPeriod)
          return recv_breakLease()
        end

        def send_breakLease(requestInfo, accountInfo, breakPeriod)
          send_message("breakLease", BreakLease_args, requestInfo: requestInfo, accountInfo: accountInfo, breakPeriod: breakPeriod)
        end

        def recv_breakLease()
          result = receive_message(BreakLease_result)
          return result.success unless result.success.nil?
          raise result.wse unless result.wse.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, "breakLease failed: unknown result")
        end

        def changeLease(requestInfo, accountInfo, proposedLeaseId)
          send_changeLease(requestInfo, accountInfo, proposedLeaseId)
          return recv_changeLease()
        end

        def send_changeLease(requestInfo, accountInfo, proposedLeaseId)
          send_message("changeLease", ChangeLease_args, requestInfo: requestInfo, accountInfo: accountInfo, proposedLeaseId: proposedLeaseId)
        end

        def recv_changeLease()
          result = receive_message(ChangeLease_result)
          return result.success unless result.success.nil?
          raise result.wse unless result.wse.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, "changeLease failed: unknown result")
        end

        def releaseLease(requestInfo, accountInfo)
          send_releaseLease(requestInfo, accountInfo)
          return recv_releaseLease()
        end

        def send_releaseLease(requestInfo, accountInfo)
          send_message("releaseLease", ReleaseLease_args, requestInfo: requestInfo, accountInfo: accountInfo)
        end

        def recv_releaseLease()
          result = receive_message(ReleaseLease_result)
          return result.success unless result.success.nil?
          raise result.wse unless result.wse.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, "releaseLease failed: unknown result")
        end

        def renewLease(requestInfo, accountInfo)
          send_renewLease(requestInfo, accountInfo)
          return recv_renewLease()
        end

        def send_renewLease(requestInfo, accountInfo)
          send_message("renewLease", RenewLease_args, requestInfo: requestInfo, accountInfo: accountInfo)
        end

        def recv_renewLease()
          result = receive_message(RenewLease_result)
          return result.success unless result.success.nil?
          raise result.wse unless result.wse.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, "renewLease failed: unknown result")
        end

        def startCopyFromBlob(requestInfo, accountInfo, uri)
          send_startCopyFromBlob(requestInfo, accountInfo, uri)
          return recv_startCopyFromBlob()
        end

        def send_startCopyFromBlob(requestInfo, accountInfo, uri)
          send_message("startCopyFromBlob", StartCopyFromBlob_args, requestInfo: requestInfo, accountInfo: accountInfo, uri: uri)
        end

        def recv_startCopyFromBlob()
          result = receive_message(StartCopyFromBlob_result)
          return result.success unless result.success.nil?
          raise result.wse unless result.wse.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, "startCopyFromBlob failed: unknown result")
        end

        def abortCopy(requestInfo, accountInfo, copyId)
          send_abortCopy(requestInfo, accountInfo, copyId)
          return recv_abortCopy()
        end

        def send_abortCopy(requestInfo, accountInfo, copyId)
          send_message("abortCopy", AbortCopy_args, requestInfo: requestInfo, accountInfo: accountInfo, copyId: copyId)
        end

        def recv_abortCopy()
          result = receive_message(AbortCopy_result)
          return result.success unless result.success.nil?
          raise result.wse unless result.wse.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, "abortCopy failed: unknown result")
        end

        def createSnapshot(requestInfo, accountInfo, metadata)
          send_createSnapshot(requestInfo, accountInfo, metadata)
          return recv_createSnapshot()
        end

        def send_createSnapshot(requestInfo, accountInfo, metadata)
          send_message("createSnapshot", CreateSnapshot_args, requestInfo: requestInfo, accountInfo: accountInfo, metadata: metadata)
        end

        def recv_createSnapshot()
          result = receive_message(CreateSnapshot_result)
          return result.success unless result.success.nil?
          raise result.wse unless result.wse.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, "createSnapshot failed: unknown result")
        end

        def undelete(requestInfo, accountInfo)
          send_undelete(requestInfo, accountInfo)
          return recv_undelete()
        end

        def send_undelete(requestInfo, accountInfo)
          send_message("undelete", Undelete_args, requestInfo: requestInfo, accountInfo: accountInfo)
        end

        def recv_undelete()
          result = receive_message(Undelete_result)
          return result.success unless result.success.nil?
          raise result.wse unless result.wse.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, "undelete failed: unknown result")
        end
      end

      class Processor
        include ::Thrift::Processor

        def process_deleteBlob(seqid, iprot, oprot)
          args = read_args(iprot, DeleteBlob_args)
          result = DeleteBlob_result.new()
          begin
            result.success = @handler.deleteBlob(args.requestInfo, args.accountInfo, args.deleteIfExists, args.isPermanentDelete, args.deleteSnapshotsOption)
          rescue ::XSS::AutoGenerated::WrappedStorageException => storageException
            result.storageException = storageException
          end
          write_result(result, oprot, "deleteBlob", seqid)
        end

        def process_exists(seqid, iprot, oprot)
          args = read_args(iprot, Exists_args)
          result = Exists_result.new()
          begin
            result.success = @handler.exists(args.requestInfo, args.accountInfo)
          rescue ::XSS::AutoGenerated::WrappedStorageException => storageException
            result.storageException = storageException
          end
          write_result(result, oprot, "exists", seqid)
        end

        def process_setMetadata(seqid, iprot, oprot)
          args = read_args(iprot, SetMetadata_args)
          result = SetMetadata_result.new()
          begin
            result.success = @handler.setMetadata(args.requestInfo, args.accountInfo, args.metadata)
          rescue ::XSS::AutoGenerated::WrappedStorageException => wse
            result.wse = wse
          end
          write_result(result, oprot, "setMetadata", seqid)
        end

        def process_setProperties(seqid, iprot, oprot)
          args = read_args(iprot, SetProperties_args)
          result = SetProperties_result.new()
          begin
            result.success = @handler.setProperties(args.requestInfo, args.accountInfo, args.properties)
          rescue ::XSS::AutoGenerated::WrappedStorageException => wse
            result.wse = wse
          end
          write_result(result, oprot, "setProperties", seqid)
        end

        def process_fetchAttributes(seqid, iprot, oprot)
          args = read_args(iprot, FetchAttributes_args)
          result = FetchAttributes_result.new()
          begin
            result.success = @handler.fetchAttributes(args.requestInfo, args.accountInfo)
          rescue ::XSS::AutoGenerated::WrappedStorageException => wse
            result.wse = wse
          end
          write_result(result, oprot, "fetchAttributes", seqid)
        end

        def process_downloadToStream(seqid, iprot, oprot)
          args = read_args(iprot, DownloadToStream_args)
          result = DownloadToStream_result.new()
          begin
            result.success = @handler.downloadToStream(args.requestInfo, args.accountInfo)
          rescue ::XSS::AutoGenerated::WrappedStorageException => wse
            result.wse = wse
          end
          write_result(result, oprot, "downloadToStream", seqid)
        end

        def process_downloadRangeToStream(seqid, iprot, oprot)
          args = read_args(iprot, DownloadRangeToStream_args)
          result = DownloadRangeToStream_result.new()
          begin
            result.success = @handler.downloadRangeToStream(args.requestInfo, args.accountInfo, args.offset, args.length)
          rescue ::XSS::AutoGenerated::WrappedStorageException => wse
            result.wse = wse
          end
          write_result(result, oprot, "downloadRangeToStream", seqid)
        end

        def process_downloadToByteArray(seqid, iprot, oprot)
          args = read_args(iprot, DownloadToByteArray_args)
          result = DownloadToByteArray_result.new()
          begin
            result.success = @handler.downloadToByteArray(args.requestInfo, args.accountInfo, args.targetSize, args.index)
          rescue ::XSS::AutoGenerated::WrappedStorageException => wse
            result.wse = wse
          end
          write_result(result, oprot, "downloadToByteArray", seqid)
        end

        def process_downloadRangeToByteArray(seqid, iprot, oprot)
          args = read_args(iprot, DownloadRangeToByteArray_args)
          result = DownloadRangeToByteArray_result.new()
          begin
            result.success = @handler.downloadRangeToByteArray(args.requestInfo, args.accountInfo, args.targetSize, args.index, args.offset, args.length)
          rescue ::XSS::AutoGenerated::WrappedStorageException => wse
            result.wse = wse
          end
          write_result(result, oprot, "downloadRangeToByteArray", seqid)
        end

        def process_uploadFromByteArray(seqid, iprot, oprot)
          args = read_args(iprot, UploadFromByteArray_args)
          result = UploadFromByteArray_result.new()
          begin
            result.success = @handler.uploadFromByteArray(args.requestInfo, args.accountInfo, args.buffer, args.index, args.count)
          rescue ::XSS::AutoGenerated::WrappedStorageException => wse
            result.wse = wse
          end
          write_result(result, oprot, "uploadFromByteArray", seqid)
        end

        def process_downloadToFile(seqid, iprot, oprot)
          args = read_args(iprot, DownloadToFile_args)
          result = DownloadToFile_result.new()
          begin
            result.success = @handler.downloadToFile(args.requestInfo, args.accountInfo, args.path, args.fileMode)
          rescue ::XSS::AutoGenerated::WrappedStorageException => wse
            result.wse = wse
          end
          write_result(result, oprot, "downloadToFile", seqid)
        end

        def process_acquireLease(seqid, iprot, oprot)
          args = read_args(iprot, AcquireLease_args)
          result = AcquireLease_result.new()
          begin
            result.success = @handler.acquireLease(args.requestInfo, args.accountInfo, args.leaseTime, args.proposedLeaseId)
          rescue ::XSS::AutoGenerated::WrappedStorageException => wse
            result.wse = wse
          end
          write_result(result, oprot, "acquireLease", seqid)
        end

        def process_breakLease(seqid, iprot, oprot)
          args = read_args(iprot, BreakLease_args)
          result = BreakLease_result.new()
          begin
            result.success = @handler.breakLease(args.requestInfo, args.accountInfo, args.breakPeriod)
          rescue ::XSS::AutoGenerated::WrappedStorageException => wse
            result.wse = wse
          end
          write_result(result, oprot, "breakLease", seqid)
        end

        def process_changeLease(seqid, iprot, oprot)
          args = read_args(iprot, ChangeLease_args)
          result = ChangeLease_result.new()
          begin
            result.success = @handler.changeLease(args.requestInfo, args.accountInfo, args.proposedLeaseId)
          rescue ::XSS::AutoGenerated::WrappedStorageException => wse
            result.wse = wse
          end
          write_result(result, oprot, "changeLease", seqid)
        end

        def process_releaseLease(seqid, iprot, oprot)
          args = read_args(iprot, ReleaseLease_args)
          result = ReleaseLease_result.new()
          begin
            result.success = @handler.releaseLease(args.requestInfo, args.accountInfo)
          rescue ::XSS::AutoGenerated::WrappedStorageException => wse
            result.wse = wse
          end
          write_result(result, oprot, "releaseLease", seqid)
        end

        def process_renewLease(seqid, iprot, oprot)
          args = read_args(iprot, RenewLease_args)
          result = RenewLease_result.new()
          begin
            result.success = @handler.renewLease(args.requestInfo, args.accountInfo)
          rescue ::XSS::AutoGenerated::WrappedStorageException => wse
            result.wse = wse
          end
          write_result(result, oprot, "renewLease", seqid)
        end

        def process_startCopyFromBlob(seqid, iprot, oprot)
          args = read_args(iprot, StartCopyFromBlob_args)
          result = StartCopyFromBlob_result.new()
          begin
            result.success = @handler.startCopyFromBlob(args.requestInfo, args.accountInfo, args.uri)
          rescue ::XSS::AutoGenerated::WrappedStorageException => wse
            result.wse = wse
          end
          write_result(result, oprot, "startCopyFromBlob", seqid)
        end

        def process_abortCopy(seqid, iprot, oprot)
          args = read_args(iprot, AbortCopy_args)
          result = AbortCopy_result.new()
          begin
            result.success = @handler.abortCopy(args.requestInfo, args.accountInfo, args.copyId)
          rescue ::XSS::AutoGenerated::WrappedStorageException => wse
            result.wse = wse
          end
          write_result(result, oprot, "abortCopy", seqid)
        end

        def process_createSnapshot(seqid, iprot, oprot)
          args = read_args(iprot, CreateSnapshot_args)
          result = CreateSnapshot_result.new()
          begin
            result.success = @handler.createSnapshot(args.requestInfo, args.accountInfo, args.metadata)
          rescue ::XSS::AutoGenerated::WrappedStorageException => wse
            result.wse = wse
          end
          write_result(result, oprot, "createSnapshot", seqid)
        end

        def process_undelete(seqid, iprot, oprot)
          args = read_args(iprot, Undelete_args)
          result = Undelete_result.new()
          begin
            result.success = @handler.undelete(args.requestInfo, args.accountInfo)
          rescue ::XSS::AutoGenerated::WrappedStorageException => wse
            result.wse = wse
          end
          write_result(result, oprot, "undelete", seqid)
        end
      end

      # HELPER FUNCTIONS AND STRUCTURES

      class DeleteBlob_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        REQUESTINFO = 1
        ACCOUNTINFO = 2
        DELETEIFEXISTS = 3
        ISPERMANENTDELETE = 4
        DELETESNAPSHOTSOPTION = 5

        FIELDS = {
          REQUESTINFO => { type: ::Thrift::Types::STRUCT, name: "requestInfo", class: ::XSS::AutoGenerated::BlobRequestInfo },
          ACCOUNTINFO => { type: ::Thrift::Types::STRUCT, name: "accountInfo", class: ::XSS::AutoGenerated::StorageAccountInfo },
          DELETEIFEXISTS => { type: ::Thrift::Types::BOOL, name: "deleteIfExists" },
          ISPERMANENTDELETE => { type: ::Thrift::Types::BOOL, name: "isPermanentDelete" },
          DELETESNAPSHOTSOPTION => { type: ::Thrift::Types::I32, name: "deleteSnapshotsOption", enum_class: ::XSS::AutoGenerated::DeleteSnapshotsOption }
        }

        def struct_fields; FIELDS; end

        def validate
          unless @deleteSnapshotsOption.nil? || ::XSS::AutoGenerated::DeleteSnapshotsOption::VALID_VALUES.include?(@deleteSnapshotsOption)
            raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, "Invalid value of field deleteSnapshotsOption!")
          end
        end

        ::Thrift::Struct.generate_accessors self
      end

      class DeleteBlob_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        STORAGEEXCEPTION = 1

        FIELDS = {
          SUCCESS => { type: ::Thrift::Types::BOOL, name: "success" },
          STORAGEEXCEPTION => { type: ::Thrift::Types::STRUCT, name: "storageException", class: ::XSS::AutoGenerated::WrappedStorageException }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Exists_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        REQUESTINFO = 1
        ACCOUNTINFO = 2

        FIELDS = {
          REQUESTINFO => { type: ::Thrift::Types::STRUCT, name: "requestInfo", class: ::XSS::AutoGenerated::BlobRequestInfo },
          ACCOUNTINFO => { type: ::Thrift::Types::STRUCT, name: "accountInfo", class: ::XSS::AutoGenerated::StorageAccountInfo }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Exists_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        STORAGEEXCEPTION = 1

        FIELDS = {
          SUCCESS => { type: ::Thrift::Types::STRUCT, name: "success", class: ::XSS::AutoGenerated::BlobExistsResponse },
          STORAGEEXCEPTION => { type: ::Thrift::Types::STRUCT, name: "storageException", class: ::XSS::AutoGenerated::WrappedStorageException }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class SetMetadata_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        REQUESTINFO = 1
        ACCOUNTINFO = 2
        METADATA = 3

        FIELDS = {
          REQUESTINFO => { type: ::Thrift::Types::STRUCT, name: "requestInfo", class: ::XSS::AutoGenerated::BlobRequestInfo },
          ACCOUNTINFO => { type: ::Thrift::Types::STRUCT, name: "accountInfo", class: ::XSS::AutoGenerated::StorageAccountInfo },
          METADATA => { type: ::Thrift::Types::MAP, name: "metadata", key: { type: ::Thrift::Types::STRING }, value: { type: ::Thrift::Types::STRING } }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class SetMetadata_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        WSE = 1

        FIELDS = {
          SUCCESS => { type: ::Thrift::Types::STRUCT, name: "success", class: ::XSS::AutoGenerated::CloudBlobResponse },
          WSE => { type: ::Thrift::Types::STRUCT, name: "wse", class: ::XSS::AutoGenerated::WrappedStorageException }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class SetProperties_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        REQUESTINFO = 1
        ACCOUNTINFO = 2
        PROPERTIES = 3

        FIELDS = {
          REQUESTINFO => { type: ::Thrift::Types::STRUCT, name: "requestInfo", class: ::XSS::AutoGenerated::BlobRequestInfo },
          ACCOUNTINFO => { type: ::Thrift::Types::STRUCT, name: "accountInfo", class: ::XSS::AutoGenerated::StorageAccountInfo },
          PROPERTIES => { type: ::Thrift::Types::STRUCT, name: "properties", class: ::XSS::AutoGenerated::CloudBlobResponse }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class SetProperties_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        WSE = 1

        FIELDS = {
          SUCCESS => { type: ::Thrift::Types::STRUCT, name: "success", class: ::XSS::AutoGenerated::CloudBlobResponse },
          WSE => { type: ::Thrift::Types::STRUCT, name: "wse", class: ::XSS::AutoGenerated::WrappedStorageException }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class FetchAttributes_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        REQUESTINFO = 1
        ACCOUNTINFO = 2

        FIELDS = {
          REQUESTINFO => { type: ::Thrift::Types::STRUCT, name: "requestInfo", class: ::XSS::AutoGenerated::BlobRequestInfo },
          ACCOUNTINFO => { type: ::Thrift::Types::STRUCT, name: "accountInfo", class: ::XSS::AutoGenerated::StorageAccountInfo }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class FetchAttributes_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        WSE = 1

        FIELDS = {
          SUCCESS => { type: ::Thrift::Types::STRUCT, name: "success", class: ::XSS::AutoGenerated::CloudBlobResponse },
          WSE => { type: ::Thrift::Types::STRUCT, name: "wse", class: ::XSS::AutoGenerated::WrappedStorageException }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class DownloadToStream_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        REQUESTINFO = 1
        ACCOUNTINFO = 2

        FIELDS = {
          REQUESTINFO => { type: ::Thrift::Types::STRUCT, name: "requestInfo", class: ::XSS::AutoGenerated::BlobRequestInfo },
          ACCOUNTINFO => { type: ::Thrift::Types::STRUCT, name: "accountInfo", class: ::XSS::AutoGenerated::StorageAccountInfo }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class DownloadToStream_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        WSE = 1

        FIELDS = {
          SUCCESS => { type: ::Thrift::Types::STRUCT, name: "success", class: ::XSS::AutoGenerated::BlobDownloadToByteArrayResponse },
          WSE => { type: ::Thrift::Types::STRUCT, name: "wse", class: ::XSS::AutoGenerated::WrappedStorageException }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class DownloadRangeToStream_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        REQUESTINFO = 1
        ACCOUNTINFO = 2
        OFFSET = 3
        LENGTH = 4

        FIELDS = {
          REQUESTINFO => { type: ::Thrift::Types::STRUCT, name: "requestInfo", class: ::XSS::AutoGenerated::BlobRequestInfo },
          ACCOUNTINFO => { type: ::Thrift::Types::STRUCT, name: "accountInfo", class: ::XSS::AutoGenerated::StorageAccountInfo },
          OFFSET => { type: ::Thrift::Types::I64, name: "offset" },
          LENGTH => { type: ::Thrift::Types::I64, name: "length" }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class DownloadRangeToStream_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        WSE = 1

        FIELDS = {
          SUCCESS => { type: ::Thrift::Types::STRUCT, name: "success", class: ::XSS::AutoGenerated::BlobDownloadToByteArrayResponse },
          WSE => { type: ::Thrift::Types::STRUCT, name: "wse", class: ::XSS::AutoGenerated::WrappedStorageException }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class DownloadToByteArray_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        REQUESTINFO = 1
        ACCOUNTINFO = 2
        TARGETSIZE = 3
        INDEX = 4

        FIELDS = {
          REQUESTINFO => { type: ::Thrift::Types::STRUCT, name: "requestInfo", class: ::XSS::AutoGenerated::BlobRequestInfo },
          ACCOUNTINFO => { type: ::Thrift::Types::STRUCT, name: "accountInfo", class: ::XSS::AutoGenerated::StorageAccountInfo },
          TARGETSIZE => { type: ::Thrift::Types::I32, name: "targetSize" },
          INDEX => { type: ::Thrift::Types::I32, name: "index" }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class DownloadToByteArray_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        WSE = 1

        FIELDS = {
          SUCCESS => { type: ::Thrift::Types::STRUCT, name: "success", class: ::XSS::AutoGenerated::BlobDownloadToByteArrayResponse },
          WSE => { type: ::Thrift::Types::STRUCT, name: "wse", class: ::XSS::AutoGenerated::WrappedStorageException }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class DownloadRangeToByteArray_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        REQUESTINFO = 1
        ACCOUNTINFO = 2
        TARGETSIZE = 3
        INDEX = 4
        OFFSET = 5
        LENGTH = 6

        FIELDS = {
          REQUESTINFO => { type: ::Thrift::Types::STRUCT, name: "requestInfo", class: ::XSS::AutoGenerated::BlobRequestInfo },
          ACCOUNTINFO => { type: ::Thrift::Types::STRUCT, name: "accountInfo", class: ::XSS::AutoGenerated::StorageAccountInfo },
          TARGETSIZE => { type: ::Thrift::Types::I32, name: "targetSize" },
          INDEX => { type: ::Thrift::Types::I32, name: "index" },
          OFFSET => { type: ::Thrift::Types::I64, name: "offset" },
          LENGTH => { type: ::Thrift::Types::I64, name: "length" }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class DownloadRangeToByteArray_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        WSE = 1

        FIELDS = {
          SUCCESS => { type: ::Thrift::Types::STRUCT, name: "success", class: ::XSS::AutoGenerated::BlobDownloadToByteArrayResponse },
          WSE => { type: ::Thrift::Types::STRUCT, name: "wse", class: ::XSS::AutoGenerated::WrappedStorageException }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class UploadFromByteArray_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        REQUESTINFO = 1
        ACCOUNTINFO = 2
        BUFFER = 3
        INDEX = 4
        COUNT = 5

        FIELDS = {
          REQUESTINFO => { type: ::Thrift::Types::STRUCT, name: "requestInfo", class: ::XSS::AutoGenerated::BlobRequestInfo },
          ACCOUNTINFO => { type: ::Thrift::Types::STRUCT, name: "accountInfo", class: ::XSS::AutoGenerated::StorageAccountInfo },
          BUFFER => { type: ::Thrift::Types::STRING, name: "buffer", binary: true },
          INDEX => { type: ::Thrift::Types::I32, name: "index" },
          COUNT => { type: ::Thrift::Types::I32, name: "count" }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class UploadFromByteArray_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        WSE = 1

        FIELDS = {
          SUCCESS => { type: ::Thrift::Types::STRUCT, name: "success", class: ::XSS::AutoGenerated::CloudBlobResponse },
          WSE => { type: ::Thrift::Types::STRUCT, name: "wse", class: ::XSS::AutoGenerated::WrappedStorageException }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class DownloadToFile_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        REQUESTINFO = 1
        ACCOUNTINFO = 2
        PATH = 3
        FILEMODE = 4

        FIELDS = {
          REQUESTINFO => { type: ::Thrift::Types::STRUCT, name: "requestInfo", class: ::XSS::AutoGenerated::BlobRequestInfo },
          ACCOUNTINFO => { type: ::Thrift::Types::STRUCT, name: "accountInfo", class: ::XSS::AutoGenerated::StorageAccountInfo },
          PATH => { type: ::Thrift::Types::STRING, name: "path" },
          FILEMODE => { type: ::Thrift::Types::I32, name: "fileMode", enum_class: ::XSS::AutoGenerated::FileMode }
        }

        def struct_fields; FIELDS; end

        def validate
          unless @fileMode.nil? || ::XSS::AutoGenerated::FileMode::VALID_VALUES.include?(@fileMode)
            raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, "Invalid value of field fileMode!")
          end
        end

        ::Thrift::Struct.generate_accessors self
      end

      class DownloadToFile_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        WSE = 1

        FIELDS = {
          SUCCESS => { type: ::Thrift::Types::STRUCT, name: "success", class: ::XSS::AutoGenerated::CloudBlobResponse },
          WSE => { type: ::Thrift::Types::STRUCT, name: "wse", class: ::XSS::AutoGenerated::WrappedStorageException }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class AcquireLease_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        REQUESTINFO = 1
        ACCOUNTINFO = 2
        LEASETIME = 3
        PROPOSEDLEASEID = 4

        FIELDS = {
          REQUESTINFO => { type: ::Thrift::Types::STRUCT, name: "requestInfo", class: ::XSS::AutoGenerated::BlobRequestInfo },
          ACCOUNTINFO => { type: ::Thrift::Types::STRUCT, name: "accountInfo", class: ::XSS::AutoGenerated::StorageAccountInfo },
          LEASETIME => { type: ::Thrift::Types::I32, name: "leaseTime" },
          PROPOSEDLEASEID => { type: ::Thrift::Types::STRING, name: "proposedLeaseId" }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class AcquireLease_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        WSE = 1

        FIELDS = {
          SUCCESS => { type: ::Thrift::Types::STRUCT, name: "success", class: ::XSS::AutoGenerated::BlobChangeAcquireLeaseResponse },
          WSE => { type: ::Thrift::Types::STRUCT, name: "wse", class: ::XSS::AutoGenerated::WrappedStorageException }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class BreakLease_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        REQUESTINFO = 1
        ACCOUNTINFO = 2
        BREAKPERIOD = 3

        FIELDS = {
          REQUESTINFO => { type: ::Thrift::Types::STRUCT, name: "requestInfo", class: ::XSS::AutoGenerated::BlobRequestInfo },
          ACCOUNTINFO => { type: ::Thrift::Types::STRUCT, name: "accountInfo", class: ::XSS::AutoGenerated::StorageAccountInfo },
          BREAKPERIOD => { type: ::Thrift::Types::I32, name: "breakPeriod" }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class BreakLease_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        WSE = 1

        FIELDS = {
          SUCCESS => { type: ::Thrift::Types::STRUCT, name: "success", class: ::XSS::AutoGenerated::BlobBreakLeaseResponse },
          WSE => { type: ::Thrift::Types::STRUCT, name: "wse", class: ::XSS::AutoGenerated::WrappedStorageException }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class ChangeLease_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        REQUESTINFO = 1
        ACCOUNTINFO = 2
        PROPOSEDLEASEID = 3

        FIELDS = {
          REQUESTINFO => { type: ::Thrift::Types::STRUCT, name: "requestInfo", class: ::XSS::AutoGenerated::BlobRequestInfo },
          ACCOUNTINFO => { type: ::Thrift::Types::STRUCT, name: "accountInfo", class: ::XSS::AutoGenerated::StorageAccountInfo },
          PROPOSEDLEASEID => { type: ::Thrift::Types::STRING, name: "proposedLeaseId" }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class ChangeLease_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        WSE = 1

        FIELDS = {
          SUCCESS => { type: ::Thrift::Types::STRUCT, name: "success", class: ::XSS::AutoGenerated::BlobChangeAcquireLeaseResponse },
          WSE => { type: ::Thrift::Types::STRUCT, name: "wse", class: ::XSS::AutoGenerated::WrappedStorageException }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class ReleaseLease_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        REQUESTINFO = 1
        ACCOUNTINFO = 2

        FIELDS = {
          REQUESTINFO => { type: ::Thrift::Types::STRUCT, name: "requestInfo", class: ::XSS::AutoGenerated::BlobRequestInfo },
          ACCOUNTINFO => { type: ::Thrift::Types::STRUCT, name: "accountInfo", class: ::XSS::AutoGenerated::StorageAccountInfo }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class ReleaseLease_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        WSE = 1

        FIELDS = {
          SUCCESS => { type: ::Thrift::Types::STRUCT, name: "success", class: ::XSS::AutoGenerated::CloudBlobResponse },
          WSE => { type: ::Thrift::Types::STRUCT, name: "wse", class: ::XSS::AutoGenerated::WrappedStorageException }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class RenewLease_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        REQUESTINFO = 1
        ACCOUNTINFO = 2

        FIELDS = {
          REQUESTINFO => { type: ::Thrift::Types::STRUCT, name: "requestInfo", class: ::XSS::AutoGenerated::BlobRequestInfo },
          ACCOUNTINFO => { type: ::Thrift::Types::STRUCT, name: "accountInfo", class: ::XSS::AutoGenerated::StorageAccountInfo }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class RenewLease_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        WSE = 1

        FIELDS = {
          SUCCESS => { type: ::Thrift::Types::STRUCT, name: "success", class: ::XSS::AutoGenerated::CloudBlobResponse },
          WSE => { type: ::Thrift::Types::STRUCT, name: "wse", class: ::XSS::AutoGenerated::WrappedStorageException }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class StartCopyFromBlob_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        REQUESTINFO = 1
        ACCOUNTINFO = 2
        URI = 3

        FIELDS = {
          REQUESTINFO => { type: ::Thrift::Types::STRUCT, name: "requestInfo", class: ::XSS::AutoGenerated::CopyBlobRequestInfo },
          ACCOUNTINFO => { type: ::Thrift::Types::STRUCT, name: "accountInfo", class: ::XSS::AutoGenerated::StorageAccountInfo },
          URI => { type: ::Thrift::Types::STRUCT, name: "uri", class: ::XSS::AutoGenerated::CloudStorageUri }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class StartCopyFromBlob_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        WSE = 1

        FIELDS = {
          SUCCESS => { type: ::Thrift::Types::STRUCT, name: "success", class: ::XSS::AutoGenerated::BlobStartCopyFromBlobResponse },
          WSE => { type: ::Thrift::Types::STRUCT, name: "wse", class: ::XSS::AutoGenerated::WrappedStorageException }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class AbortCopy_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        REQUESTINFO = 1
        ACCOUNTINFO = 2
        COPYID = 3

        FIELDS = {
          REQUESTINFO => { type: ::Thrift::Types::STRUCT, name: "requestInfo", class: ::XSS::AutoGenerated::BlobRequestInfo },
          ACCOUNTINFO => { type: ::Thrift::Types::STRUCT, name: "accountInfo", class: ::XSS::AutoGenerated::StorageAccountInfo },
          COPYID => { type: ::Thrift::Types::STRING, name: "copyId" }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class AbortCopy_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        WSE = 1

        FIELDS = {
          SUCCESS => { type: ::Thrift::Types::STRUCT, name: "success", class: ::XSS::AutoGenerated::CloudBlobResponse },
          WSE => { type: ::Thrift::Types::STRUCT, name: "wse", class: ::XSS::AutoGenerated::WrappedStorageException }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class CreateSnapshot_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        REQUESTINFO = 1
        ACCOUNTINFO = 2
        METADATA = 3

        FIELDS = {
          REQUESTINFO => { type: ::Thrift::Types::STRUCT, name: "requestInfo", class: ::XSS::AutoGenerated::BlobRequestInfo },
          ACCOUNTINFO => { type: ::Thrift::Types::STRUCT, name: "accountInfo", class: ::XSS::AutoGenerated::StorageAccountInfo },
          METADATA => { type: ::Thrift::Types::MAP, name: "metadata", key: { type: ::Thrift::Types::STRING }, value: { type: ::Thrift::Types::STRING } }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class CreateSnapshot_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        WSE = 1

        FIELDS = {
          SUCCESS => { type: ::Thrift::Types::STRUCT, name: "success", class: ::XSS::AutoGenerated::CloudBlobResponse },
          WSE => { type: ::Thrift::Types::STRUCT, name: "wse", class: ::XSS::AutoGenerated::WrappedStorageException }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Undelete_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        REQUESTINFO = 1
        ACCOUNTINFO = 2

        FIELDS = {
          REQUESTINFO => { type: ::Thrift::Types::STRUCT, name: "requestInfo", class: ::XSS::AutoGenerated::BlobRequestInfo },
          ACCOUNTINFO => { type: ::Thrift::Types::STRUCT, name: "accountInfo", class: ::XSS::AutoGenerated::StorageAccountInfo }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Undelete_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        WSE = 1

        FIELDS = {
          SUCCESS => { type: ::Thrift::Types::STRUCT, name: "success", class: ::XSS::AutoGenerated::CloudBlobResponse },
          WSE => { type: ::Thrift::Types::STRUCT, name: "wse", class: ::XSS::AutoGenerated::WrappedStorageException }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end
    end
  end
end
