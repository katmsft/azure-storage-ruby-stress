#
# Auto-generated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require "thrift"
require_relative "cloud_file_types"

module Azure::Storage::Stress
  module AutoGenerated
    module CloudFileService
      class Client
        include ::Thrift::Client

        def create(accountInfo, filePath, size, accessCondition, fileRequestOptions, operationContext)
          send_create(accountInfo, filePath, size, accessCondition, fileRequestOptions, operationContext)
          return recv_create()
        end

        def send_create(accountInfo, filePath, size, accessCondition, fileRequestOptions, operationContext)
          send_message("create", Create_args, accountInfo: accountInfo, filePath: filePath, size: size, accessCondition: accessCondition, fileRequestOptions: fileRequestOptions, operationContext: operationContext)
        end

        def recv_create()
          result = receive_message(Create_result)
          return result.success unless result.success.nil?
          raise result.wse unless result.wse.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, "create failed: unknown result")
        end

        def writeRange(accountInfo, filePath, version, length, startOffset, contentMd5, accessCondition, fileRequestOptions, operationContext)
          send_writeRange(accountInfo, filePath, version, length, startOffset, contentMd5, accessCondition, fileRequestOptions, operationContext)
          return recv_writeRange()
        end

        def send_writeRange(accountInfo, filePath, version, length, startOffset, contentMd5, accessCondition, fileRequestOptions, operationContext)
          send_message("writeRange", WriteRange_args, accountInfo: accountInfo, filePath: filePath, version: version, length: length, startOffset: startOffset, contentMd5: contentMd5, accessCondition: accessCondition, fileRequestOptions: fileRequestOptions, operationContext: operationContext)
        end

        def recv_writeRange()
          result = receive_message(WriteRange_result)
          return result.success unless result.success.nil?
          raise result.wse unless result.wse.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, "writeRange failed: unknown result")
        end

        def deleteFile(accountInfo, filePath, deleteIfExists, accessCondition, fileRequestOptions, operationContext)
          send_deleteFile(accountInfo, filePath, deleteIfExists, accessCondition, fileRequestOptions, operationContext)
          return recv_deleteFile()
        end

        def send_deleteFile(accountInfo, filePath, deleteIfExists, accessCondition, fileRequestOptions, operationContext)
          send_message("deleteFile", DeleteFile_args, accountInfo: accountInfo, filePath: filePath, deleteIfExists: deleteIfExists, accessCondition: accessCondition, fileRequestOptions: fileRequestOptions, operationContext: operationContext)
        end

        def recv_deleteFile()
          result = receive_message(DeleteFile_result)
          return result.success unless result.success.nil?
          raise result.wse unless result.wse.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, "deleteFile failed: unknown result")
        end

        def setMetadata(accountInfo, filePath, metadata, accessCondition, fileRequestOptions, operationContext)
          send_setMetadata(accountInfo, filePath, metadata, accessCondition, fileRequestOptions, operationContext)
          return recv_setMetadata()
        end

        def send_setMetadata(accountInfo, filePath, metadata, accessCondition, fileRequestOptions, operationContext)
          send_message("setMetadata", SetMetadata_args, accountInfo: accountInfo, filePath: filePath, metadata: metadata, accessCondition: accessCondition, fileRequestOptions: fileRequestOptions, operationContext: operationContext)
        end

        def recv_setMetadata()
          result = receive_message(SetMetadata_result)
          return result.success unless result.success.nil?
          raise result.wse unless result.wse.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, "setMetadata failed: unknown result")
        end

        def setProperties(accountInfo, filePath, properties, accessCondition, fileRequestOptions, operationContext)
          send_setProperties(accountInfo, filePath, properties, accessCondition, fileRequestOptions, operationContext)
          return recv_setProperties()
        end

        def send_setProperties(accountInfo, filePath, properties, accessCondition, fileRequestOptions, operationContext)
          send_message("setProperties", SetProperties_args, accountInfo: accountInfo, filePath: filePath, properties: properties, accessCondition: accessCondition, fileRequestOptions: fileRequestOptions, operationContext: operationContext)
        end

        def recv_setProperties()
          result = receive_message(SetProperties_result)
          return result.success unless result.success.nil?
          raise result.wse unless result.wse.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, "setProperties failed: unknown result")
        end

        def fetchAttributes(accountInfo, filePath, accessCondition, fileRequestOptions, operationContext)
          send_fetchAttributes(accountInfo, filePath, accessCondition, fileRequestOptions, operationContext)
          return recv_fetchAttributes()
        end

        def send_fetchAttributes(accountInfo, filePath, accessCondition, fileRequestOptions, operationContext)
          send_message("fetchAttributes", FetchAttributes_args, accountInfo: accountInfo, filePath: filePath, accessCondition: accessCondition, fileRequestOptions: fileRequestOptions, operationContext: operationContext)
        end

        def recv_fetchAttributes()
          result = receive_message(FetchAttributes_result)
          return result.success unless result.success.nil?
          raise result.wse unless result.wse.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, "fetchAttributes failed: unknown result")
        end

        def exists(accountInfo, filePath, fileRequestOptions, operationContext)
          send_exists(accountInfo, filePath, fileRequestOptions, operationContext)
          return recv_exists()
        end

        def send_exists(accountInfo, filePath, fileRequestOptions, operationContext)
          send_message("exists", Exists_args, accountInfo: accountInfo, filePath: filePath, fileRequestOptions: fileRequestOptions, operationContext: operationContext)
        end

        def recv_exists()
          result = receive_message(Exists_result)
          return result.success unless result.success.nil?
          raise result.wse unless result.wse.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, "exists failed: unknown result")
        end

        def clearRange(accountInfo, filePath, offset, length, accessCondition, fileRequestOptions, operationContext)
          send_clearRange(accountInfo, filePath, offset, length, accessCondition, fileRequestOptions, operationContext)
          return recv_clearRange()
        end

        def send_clearRange(accountInfo, filePath, offset, length, accessCondition, fileRequestOptions, operationContext)
          send_message("clearRange", ClearRange_args, accountInfo: accountInfo, filePath: filePath, offset: offset, length: length, accessCondition: accessCondition, fileRequestOptions: fileRequestOptions, operationContext: operationContext)
        end

        def recv_clearRange()
          result = receive_message(ClearRange_result)
          return result.success unless result.success.nil?
          raise result.wse unless result.wse.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, "clearRange failed: unknown result")
        end

        def resize(accountInfo, filePath, size, accessCondition, fileRequestOptions, operationContext)
          send_resize(accountInfo, filePath, size, accessCondition, fileRequestOptions, operationContext)
          return recv_resize()
        end

        def send_resize(accountInfo, filePath, size, accessCondition, fileRequestOptions, operationContext)
          send_message("resize", Resize_args, accountInfo: accountInfo, filePath: filePath, size: size, accessCondition: accessCondition, fileRequestOptions: fileRequestOptions, operationContext: operationContext)
        end

        def recv_resize()
          result = receive_message(Resize_result)
          return result.success unless result.success.nil?
          raise result.wse unless result.wse.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, "resize failed: unknown result")
        end

        def listRanges(accountInfo, filePath, size, length, accessCondition, fileRequestOptions, operationContext)
          send_listRanges(accountInfo, filePath, size, length, accessCondition, fileRequestOptions, operationContext)
          return recv_listRanges()
        end

        def send_listRanges(accountInfo, filePath, size, length, accessCondition, fileRequestOptions, operationContext)
          send_message("listRanges", ListRanges_args, accountInfo: accountInfo, filePath: filePath, size: size, length: length, accessCondition: accessCondition, fileRequestOptions: fileRequestOptions, operationContext: operationContext)
        end

        def recv_listRanges()
          result = receive_message(ListRanges_result)
          return result.success unless result.success.nil?
          raise result.wse unless result.wse.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, "listRanges failed: unknown result")
        end

        def uploadFromStream(accountInfo, filePath, source, length, accessCondition, fileRequestOptions, operationContext)
          send_uploadFromStream(accountInfo, filePath, source, length, accessCondition, fileRequestOptions, operationContext)
          return recv_uploadFromStream()
        end

        def send_uploadFromStream(accountInfo, filePath, source, length, accessCondition, fileRequestOptions, operationContext)
          send_message("uploadFromStream", UploadFromStream_args, accountInfo: accountInfo, filePath: filePath, source: source, length: length, accessCondition: accessCondition, fileRequestOptions: fileRequestOptions, operationContext: operationContext)
        end

        def recv_uploadFromStream()
          result = receive_message(UploadFromStream_result)
          return result.success unless result.success.nil?
          raise result.wse unless result.wse.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, "uploadFromStream failed: unknown result")
        end

        def uploadFromByteArray(accountInfo, filePath, buffer, index, count, accessCondition, fileRequestOptions, operationContext)
          send_uploadFromByteArray(accountInfo, filePath, buffer, index, count, accessCondition, fileRequestOptions, operationContext)
          return recv_uploadFromByteArray()
        end

        def send_uploadFromByteArray(accountInfo, filePath, buffer, index, count, accessCondition, fileRequestOptions, operationContext)
          send_message("uploadFromByteArray", UploadFromByteArray_args, accountInfo: accountInfo, filePath: filePath, buffer: buffer, index: index, count: count, accessCondition: accessCondition, fileRequestOptions: fileRequestOptions, operationContext: operationContext)
        end

        def recv_uploadFromByteArray()
          result = receive_message(UploadFromByteArray_result)
          return result.success unless result.success.nil?
          raise result.wse unless result.wse.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, "uploadFromByteArray failed: unknown result")
        end

        def downloadToByteArray(accountInfo, filePath, targetSize, index, accessCondition, fileRequestOptions, operationContext)
          send_downloadToByteArray(accountInfo, filePath, targetSize, index, accessCondition, fileRequestOptions, operationContext)
          return recv_downloadToByteArray()
        end

        def send_downloadToByteArray(accountInfo, filePath, targetSize, index, accessCondition, fileRequestOptions, operationContext)
          send_message("downloadToByteArray", DownloadToByteArray_args, accountInfo: accountInfo, filePath: filePath, targetSize: targetSize, index: index, accessCondition: accessCondition, fileRequestOptions: fileRequestOptions, operationContext: operationContext)
        end

        def recv_downloadToByteArray()
          result = receive_message(DownloadToByteArray_result)
          return result.success unless result.success.nil?
          raise result.wse unless result.wse.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, "downloadToByteArray failed: unknown result")
        end

        def downloadRangeToByteArray(accountInfo, filePath, targetSize, index, fileOffset, length, accessCondition, fileRequestOptions, operationContext)
          send_downloadRangeToByteArray(accountInfo, filePath, targetSize, index, fileOffset, length, accessCondition, fileRequestOptions, operationContext)
          return recv_downloadRangeToByteArray()
        end

        def send_downloadRangeToByteArray(accountInfo, filePath, targetSize, index, fileOffset, length, accessCondition, fileRequestOptions, operationContext)
          send_message("downloadRangeToByteArray", DownloadRangeToByteArray_args, accountInfo: accountInfo, filePath: filePath, targetSize: targetSize, index: index, fileOffset: fileOffset, length: length, accessCondition: accessCondition, fileRequestOptions: fileRequestOptions, operationContext: operationContext)
        end

        def recv_downloadRangeToByteArray()
          result = receive_message(DownloadRangeToByteArray_result)
          return result.success unless result.success.nil?
          raise result.wse unless result.wse.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, "downloadRangeToByteArray failed: unknown result")
        end

        def startCopyFromFileOrBlob(requestInfo, accountInfo, uri)
          send_startCopyFromFileOrBlob(requestInfo, accountInfo, uri)
          return recv_startCopyFromFileOrBlob()
        end

        def send_startCopyFromFileOrBlob(requestInfo, accountInfo, uri)
          send_message("startCopyFromFileOrBlob", StartCopyFromFileOrBlob_args, requestInfo: requestInfo, accountInfo: accountInfo, uri: uri)
        end

        def recv_startCopyFromFileOrBlob()
          result = receive_message(StartCopyFromFileOrBlob_result)
          return result.success unless result.success.nil?
          raise result.wse unless result.wse.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, "startCopyFromFileOrBlob failed: unknown result")
        end
      end

      class Processor
        include ::Thrift::Processor

        def process_create(seqid, iprot, oprot)
          args = read_args(iprot, Create_args)
          result = Create_result.new()
          begin
            result.success = @handler.create(args.accountInfo, args.filePath, args.size, args.accessCondition, args.fileRequestOptions, args.operationContext)
          rescue ::XSS::AutoGenerated::WrappedStorageException => wse
            result.wse = wse
          end
          write_result(result, oprot, "create", seqid)
        end

        def process_writeRange(seqid, iprot, oprot)
          args = read_args(iprot, WriteRange_args)
          result = WriteRange_result.new()
          begin
            result.success = @handler.writeRange(args.accountInfo, args.filePath, args.version, args.length, args.startOffset, args.contentMd5, args.accessCondition, args.fileRequestOptions, args.operationContext)
          rescue ::XSS::AutoGenerated::WrappedStorageException => wse
            result.wse = wse
          end
          write_result(result, oprot, "writeRange", seqid)
        end

        def process_deleteFile(seqid, iprot, oprot)
          args = read_args(iprot, DeleteFile_args)
          result = DeleteFile_result.new()
          begin
            result.success = @handler.deleteFile(args.accountInfo, args.filePath, args.deleteIfExists, args.accessCondition, args.fileRequestOptions, args.operationContext)
          rescue ::XSS::AutoGenerated::WrappedStorageException => wse
            result.wse = wse
          end
          write_result(result, oprot, "deleteFile", seqid)
        end

        def process_setMetadata(seqid, iprot, oprot)
          args = read_args(iprot, SetMetadata_args)
          result = SetMetadata_result.new()
          begin
            result.success = @handler.setMetadata(args.accountInfo, args.filePath, args.metadata, args.accessCondition, args.fileRequestOptions, args.operationContext)
          rescue ::XSS::AutoGenerated::WrappedStorageException => wse
            result.wse = wse
          end
          write_result(result, oprot, "setMetadata", seqid)
        end

        def process_setProperties(seqid, iprot, oprot)
          args = read_args(iprot, SetProperties_args)
          result = SetProperties_result.new()
          begin
            result.success = @handler.setProperties(args.accountInfo, args.filePath, args.properties, args.accessCondition, args.fileRequestOptions, args.operationContext)
          rescue ::XSS::AutoGenerated::WrappedStorageException => wse
            result.wse = wse
          end
          write_result(result, oprot, "setProperties", seqid)
        end

        def process_fetchAttributes(seqid, iprot, oprot)
          args = read_args(iprot, FetchAttributes_args)
          result = FetchAttributes_result.new()
          begin
            result.success = @handler.fetchAttributes(args.accountInfo, args.filePath, args.accessCondition, args.fileRequestOptions, args.operationContext)
          rescue ::XSS::AutoGenerated::WrappedStorageException => wse
            result.wse = wse
          end
          write_result(result, oprot, "fetchAttributes", seqid)
        end

        def process_exists(seqid, iprot, oprot)
          args = read_args(iprot, Exists_args)
          result = Exists_result.new()
          begin
            result.success = @handler.exists(args.accountInfo, args.filePath, args.fileRequestOptions, args.operationContext)
          rescue ::XSS::AutoGenerated::WrappedStorageException => wse
            result.wse = wse
          end
          write_result(result, oprot, "exists", seqid)
        end

        def process_clearRange(seqid, iprot, oprot)
          args = read_args(iprot, ClearRange_args)
          result = ClearRange_result.new()
          begin
            result.success = @handler.clearRange(args.accountInfo, args.filePath, args.offset, args.length, args.accessCondition, args.fileRequestOptions, args.operationContext)
          rescue ::XSS::AutoGenerated::WrappedStorageException => wse
            result.wse = wse
          end
          write_result(result, oprot, "clearRange", seqid)
        end

        def process_resize(seqid, iprot, oprot)
          args = read_args(iprot, Resize_args)
          result = Resize_result.new()
          begin
            result.success = @handler.resize(args.accountInfo, args.filePath, args.size, args.accessCondition, args.fileRequestOptions, args.operationContext)
          rescue ::XSS::AutoGenerated::WrappedStorageException => wse
            result.wse = wse
          end
          write_result(result, oprot, "resize", seqid)
        end

        def process_listRanges(seqid, iprot, oprot)
          args = read_args(iprot, ListRanges_args)
          result = ListRanges_result.new()
          begin
            result.success = @handler.listRanges(args.accountInfo, args.filePath, args.size, args.length, args.accessCondition, args.fileRequestOptions, args.operationContext)
          rescue ::XSS::AutoGenerated::WrappedStorageException => wse
            result.wse = wse
          end
          write_result(result, oprot, "listRanges", seqid)
        end

        def process_uploadFromStream(seqid, iprot, oprot)
          args = read_args(iprot, UploadFromStream_args)
          result = UploadFromStream_result.new()
          begin
            result.success = @handler.uploadFromStream(args.accountInfo, args.filePath, args.source, args.length, args.accessCondition, args.fileRequestOptions, args.operationContext)
          rescue ::XSS::AutoGenerated::WrappedStorageException => wse
            result.wse = wse
          end
          write_result(result, oprot, "uploadFromStream", seqid)
        end

        def process_uploadFromByteArray(seqid, iprot, oprot)
          args = read_args(iprot, UploadFromByteArray_args)
          result = UploadFromByteArray_result.new()
          begin
            result.success = @handler.uploadFromByteArray(args.accountInfo, args.filePath, args.buffer, args.index, args.count, args.accessCondition, args.fileRequestOptions, args.operationContext)
          rescue ::XSS::AutoGenerated::WrappedStorageException => wse
            result.wse = wse
          end
          write_result(result, oprot, "uploadFromByteArray", seqid)
        end

        def process_downloadToByteArray(seqid, iprot, oprot)
          args = read_args(iprot, DownloadToByteArray_args)
          result = DownloadToByteArray_result.new()
          begin
            result.success = @handler.downloadToByteArray(args.accountInfo, args.filePath, args.targetSize, args.index, args.accessCondition, args.fileRequestOptions, args.operationContext)
          rescue ::XSS::AutoGenerated::WrappedStorageException => wse
            result.wse = wse
          end
          write_result(result, oprot, "downloadToByteArray", seqid)
        end

        def process_downloadRangeToByteArray(seqid, iprot, oprot)
          args = read_args(iprot, DownloadRangeToByteArray_args)
          result = DownloadRangeToByteArray_result.new()
          begin
            result.success = @handler.downloadRangeToByteArray(args.accountInfo, args.filePath, args.targetSize, args.index, args.fileOffset, args.length, args.accessCondition, args.fileRequestOptions, args.operationContext)
          rescue ::XSS::AutoGenerated::WrappedStorageException => wse
            result.wse = wse
          end
          write_result(result, oprot, "downloadRangeToByteArray", seqid)
        end

        def process_startCopyFromFileOrBlob(seqid, iprot, oprot)
          args = read_args(iprot, StartCopyFromFileOrBlob_args)
          result = StartCopyFromFileOrBlob_result.new()
          begin
            result.success = @handler.startCopyFromFileOrBlob(args.requestInfo, args.accountInfo, args.uri)
          rescue ::XSS::AutoGenerated::WrappedStorageException => wse
            result.wse = wse
          end
          write_result(result, oprot, "startCopyFromFileOrBlob", seqid)
        end
      end

      # HELPER FUNCTIONS AND STRUCTURES

      class Create_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        ACCOUNTINFO = 1
        FILEPATH = 2
        SIZE = 3
        ACCESSCONDITION = 4
        FILEREQUESTOPTIONS = 5
        OPERATIONCONTEXT = 6

        FIELDS = {
          ACCOUNTINFO => { type: ::Thrift::Types::STRUCT, name: "accountInfo", class: ::XSS::AutoGenerated::StorageAccountInfo },
          FILEPATH => { type: ::Thrift::Types::STRUCT, name: "filePath", class: ::XSS::AutoGenerated::FilePathInfo },
          SIZE => { type: ::Thrift::Types::I64, name: "size" },
          ACCESSCONDITION => { type: ::Thrift::Types::STRUCT, name: "accessCondition", class: ::XSS::AutoGenerated::ThriftAccessCondition },
          FILEREQUESTOPTIONS => { type: ::Thrift::Types::STRUCT, name: "fileRequestOptions", class: ::XSS::AutoGenerated::ThriftFileRequestOptions },
          OPERATIONCONTEXT => { type: ::Thrift::Types::STRUCT, name: "operationContext", class: ::XSS::AutoGenerated::OperationContext }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Create_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        WSE = 1

        FIELDS = {
          SUCCESS => { type: ::Thrift::Types::STRUCT, name: "success", class: ::XSS::AutoGenerated::CloudFileResponse },
          WSE => { type: ::Thrift::Types::STRUCT, name: "wse", class: ::XSS::AutoGenerated::WrappedStorageException }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class WriteRange_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        ACCOUNTINFO = 1
        FILEPATH = 2
        VERSION = 3
        LENGTH = 4
        STARTOFFSET = 5
        CONTENTMD5 = 6
        ACCESSCONDITION = 7
        FILEREQUESTOPTIONS = 8
        OPERATIONCONTEXT = 9

        FIELDS = {
          ACCOUNTINFO => { type: ::Thrift::Types::STRUCT, name: "accountInfo", class: ::XSS::AutoGenerated::StorageAccountInfo },
          FILEPATH => { type: ::Thrift::Types::STRUCT, name: "filePath", class: ::XSS::AutoGenerated::FilePathInfo },
          VERSION => { type: ::Thrift::Types::I16, name: "version" },
          LENGTH => { type: ::Thrift::Types::I32, name: "length" },
          STARTOFFSET => { type: ::Thrift::Types::I64, name: "startOffset" },
          CONTENTMD5 => { type: ::Thrift::Types::STRING, name: "contentMd5" },
          ACCESSCONDITION => { type: ::Thrift::Types::STRUCT, name: "accessCondition", class: ::XSS::AutoGenerated::ThriftAccessCondition },
          FILEREQUESTOPTIONS => { type: ::Thrift::Types::STRUCT, name: "fileRequestOptions", class: ::XSS::AutoGenerated::ThriftFileRequestOptions },
          OPERATIONCONTEXT => { type: ::Thrift::Types::STRUCT, name: "operationContext", class: ::XSS::AutoGenerated::OperationContext }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class WriteRange_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        WSE = 1

        FIELDS = {
          SUCCESS => { type: ::Thrift::Types::STRUCT, name: "success", class: ::XSS::AutoGenerated::CloudFileResponse },
          WSE => { type: ::Thrift::Types::STRUCT, name: "wse", class: ::XSS::AutoGenerated::WrappedStorageException }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class DeleteFile_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        ACCOUNTINFO = 1
        FILEPATH = 2
        DELETEIFEXISTS = 3
        ACCESSCONDITION = 4
        FILEREQUESTOPTIONS = 5
        OPERATIONCONTEXT = 6

        FIELDS = {
          ACCOUNTINFO => { type: ::Thrift::Types::STRUCT, name: "accountInfo", class: ::XSS::AutoGenerated::StorageAccountInfo },
          FILEPATH => { type: ::Thrift::Types::STRUCT, name: "filePath", class: ::XSS::AutoGenerated::FilePathInfo },
          DELETEIFEXISTS => { type: ::Thrift::Types::BOOL, name: "deleteIfExists" },
          ACCESSCONDITION => { type: ::Thrift::Types::STRUCT, name: "accessCondition", class: ::XSS::AutoGenerated::ThriftAccessCondition },
          FILEREQUESTOPTIONS => { type: ::Thrift::Types::STRUCT, name: "fileRequestOptions", class: ::XSS::AutoGenerated::ThriftFileRequestOptions },
          OPERATIONCONTEXT => { type: ::Thrift::Types::STRUCT, name: "operationContext", class: ::XSS::AutoGenerated::OperationContext }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class DeleteFile_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        WSE = 1

        FIELDS = {
          SUCCESS => { type: ::Thrift::Types::STRUCT, name: "success", class: ::XSS::AutoGenerated::DeleteFileResponse },
          WSE => { type: ::Thrift::Types::STRUCT, name: "wse", class: ::XSS::AutoGenerated::WrappedStorageException }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class SetMetadata_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        ACCOUNTINFO = 1
        FILEPATH = 2
        METADATA = 3
        ACCESSCONDITION = 4
        FILEREQUESTOPTIONS = 5
        OPERATIONCONTEXT = 6

        FIELDS = {
          ACCOUNTINFO => { type: ::Thrift::Types::STRUCT, name: "accountInfo", class: ::XSS::AutoGenerated::StorageAccountInfo },
          FILEPATH => { type: ::Thrift::Types::STRUCT, name: "filePath", class: ::XSS::AutoGenerated::FilePathInfo },
          METADATA => { type: ::Thrift::Types::MAP, name: "metadata", key: { type: ::Thrift::Types::STRING }, value: { type: ::Thrift::Types::STRING } },
          ACCESSCONDITION => { type: ::Thrift::Types::STRUCT, name: "accessCondition", class: ::XSS::AutoGenerated::ThriftAccessCondition },
          FILEREQUESTOPTIONS => { type: ::Thrift::Types::STRUCT, name: "fileRequestOptions", class: ::XSS::AutoGenerated::ThriftFileRequestOptions },
          OPERATIONCONTEXT => { type: ::Thrift::Types::STRUCT, name: "operationContext", class: ::XSS::AutoGenerated::OperationContext }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class SetMetadata_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        WSE = 1

        FIELDS = {
          SUCCESS => { type: ::Thrift::Types::STRUCT, name: "success", class: ::XSS::AutoGenerated::CloudFileResponse },
          WSE => { type: ::Thrift::Types::STRUCT, name: "wse", class: ::XSS::AutoGenerated::WrappedStorageException }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class SetProperties_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        ACCOUNTINFO = 1
        FILEPATH = 2
        PROPERTIES = 3
        ACCESSCONDITION = 4
        FILEREQUESTOPTIONS = 5
        OPERATIONCONTEXT = 6

        FIELDS = {
          ACCOUNTINFO => { type: ::Thrift::Types::STRUCT, name: "accountInfo", class: ::XSS::AutoGenerated::StorageAccountInfo },
          FILEPATH => { type: ::Thrift::Types::STRUCT, name: "filePath", class: ::XSS::AutoGenerated::FilePathInfo },
          PROPERTIES => { type: ::Thrift::Types::STRUCT, name: "properties", class: ::XSS::AutoGenerated::ThriftCloudFileProperties },
          ACCESSCONDITION => { type: ::Thrift::Types::STRUCT, name: "accessCondition", class: ::XSS::AutoGenerated::ThriftAccessCondition },
          FILEREQUESTOPTIONS => { type: ::Thrift::Types::STRUCT, name: "fileRequestOptions", class: ::XSS::AutoGenerated::ThriftFileRequestOptions },
          OPERATIONCONTEXT => { type: ::Thrift::Types::STRUCT, name: "operationContext", class: ::XSS::AutoGenerated::OperationContext }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class SetProperties_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        WSE = 1

        FIELDS = {
          SUCCESS => { type: ::Thrift::Types::STRUCT, name: "success", class: ::XSS::AutoGenerated::CloudFileResponse },
          WSE => { type: ::Thrift::Types::STRUCT, name: "wse", class: ::XSS::AutoGenerated::WrappedStorageException }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class FetchAttributes_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        ACCOUNTINFO = 1
        FILEPATH = 2
        ACCESSCONDITION = 3
        FILEREQUESTOPTIONS = 4
        OPERATIONCONTEXT = 5

        FIELDS = {
          ACCOUNTINFO => { type: ::Thrift::Types::STRUCT, name: "accountInfo", class: ::XSS::AutoGenerated::StorageAccountInfo },
          FILEPATH => { type: ::Thrift::Types::STRUCT, name: "filePath", class: ::XSS::AutoGenerated::FilePathInfo },
          ACCESSCONDITION => { type: ::Thrift::Types::STRUCT, name: "accessCondition", class: ::XSS::AutoGenerated::ThriftAccessCondition },
          FILEREQUESTOPTIONS => { type: ::Thrift::Types::STRUCT, name: "fileRequestOptions", class: ::XSS::AutoGenerated::ThriftFileRequestOptions },
          OPERATIONCONTEXT => { type: ::Thrift::Types::STRUCT, name: "operationContext", class: ::XSS::AutoGenerated::OperationContext }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class FetchAttributes_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        WSE = 1

        FIELDS = {
          SUCCESS => { type: ::Thrift::Types::STRUCT, name: "success", class: ::XSS::AutoGenerated::CloudFileResponse },
          WSE => { type: ::Thrift::Types::STRUCT, name: "wse", class: ::XSS::AutoGenerated::WrappedStorageException }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Exists_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        ACCOUNTINFO = 1
        FILEPATH = 2
        FILEREQUESTOPTIONS = 3
        OPERATIONCONTEXT = 4

        FIELDS = {
          ACCOUNTINFO => { type: ::Thrift::Types::STRUCT, name: "accountInfo", class: ::XSS::AutoGenerated::StorageAccountInfo },
          FILEPATH => { type: ::Thrift::Types::STRUCT, name: "filePath", class: ::XSS::AutoGenerated::FilePathInfo },
          FILEREQUESTOPTIONS => { type: ::Thrift::Types::STRUCT, name: "fileRequestOptions", class: ::XSS::AutoGenerated::ThriftFileRequestOptions },
          OPERATIONCONTEXT => { type: ::Thrift::Types::STRUCT, name: "operationContext", class: ::XSS::AutoGenerated::OperationContext }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Exists_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        WSE = 1

        FIELDS = {
          SUCCESS => { type: ::Thrift::Types::STRUCT, name: "success", class: ::XSS::AutoGenerated::ExistsFileResponse },
          WSE => { type: ::Thrift::Types::STRUCT, name: "wse", class: ::XSS::AutoGenerated::WrappedStorageException }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class ClearRange_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        ACCOUNTINFO = 1
        FILEPATH = 2
        OFFSET = 3
        LENGTH = 4
        ACCESSCONDITION = 5
        FILEREQUESTOPTIONS = 6
        OPERATIONCONTEXT = 7

        FIELDS = {
          ACCOUNTINFO => { type: ::Thrift::Types::STRUCT, name: "accountInfo", class: ::XSS::AutoGenerated::StorageAccountInfo },
          FILEPATH => { type: ::Thrift::Types::STRUCT, name: "filePath", class: ::XSS::AutoGenerated::FilePathInfo },
          OFFSET => { type: ::Thrift::Types::I64, name: "offset" },
          LENGTH => { type: ::Thrift::Types::I64, name: "length" },
          ACCESSCONDITION => { type: ::Thrift::Types::STRUCT, name: "accessCondition", class: ::XSS::AutoGenerated::ThriftAccessCondition },
          FILEREQUESTOPTIONS => { type: ::Thrift::Types::STRUCT, name: "fileRequestOptions", class: ::XSS::AutoGenerated::ThriftFileRequestOptions },
          OPERATIONCONTEXT => { type: ::Thrift::Types::STRUCT, name: "operationContext", class: ::XSS::AutoGenerated::OperationContext }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class ClearRange_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        WSE = 1

        FIELDS = {
          SUCCESS => { type: ::Thrift::Types::STRUCT, name: "success", class: ::XSS::AutoGenerated::CloudFileResponse },
          WSE => { type: ::Thrift::Types::STRUCT, name: "wse", class: ::XSS::AutoGenerated::WrappedStorageException }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Resize_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        ACCOUNTINFO = 1
        FILEPATH = 2
        SIZE = 3
        ACCESSCONDITION = 4
        FILEREQUESTOPTIONS = 5
        OPERATIONCONTEXT = 6

        FIELDS = {
          ACCOUNTINFO => { type: ::Thrift::Types::STRUCT, name: "accountInfo", class: ::XSS::AutoGenerated::StorageAccountInfo },
          FILEPATH => { type: ::Thrift::Types::STRUCT, name: "filePath", class: ::XSS::AutoGenerated::FilePathInfo },
          SIZE => { type: ::Thrift::Types::I64, name: "size" },
          ACCESSCONDITION => { type: ::Thrift::Types::STRUCT, name: "accessCondition", class: ::XSS::AutoGenerated::ThriftAccessCondition },
          FILEREQUESTOPTIONS => { type: ::Thrift::Types::STRUCT, name: "fileRequestOptions", class: ::XSS::AutoGenerated::ThriftFileRequestOptions },
          OPERATIONCONTEXT => { type: ::Thrift::Types::STRUCT, name: "operationContext", class: ::XSS::AutoGenerated::OperationContext }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Resize_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        WSE = 1

        FIELDS = {
          SUCCESS => { type: ::Thrift::Types::STRUCT, name: "success", class: ::XSS::AutoGenerated::CloudFileResponse },
          WSE => { type: ::Thrift::Types::STRUCT, name: "wse", class: ::XSS::AutoGenerated::WrappedStorageException }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class ListRanges_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        ACCOUNTINFO = 1
        FILEPATH = 2
        SIZE = 3
        LENGTH = 4
        ACCESSCONDITION = 5
        FILEREQUESTOPTIONS = 6
        OPERATIONCONTEXT = 7

        FIELDS = {
          ACCOUNTINFO => { type: ::Thrift::Types::STRUCT, name: "accountInfo", class: ::XSS::AutoGenerated::StorageAccountInfo },
          FILEPATH => { type: ::Thrift::Types::STRUCT, name: "filePath", class: ::XSS::AutoGenerated::FilePathInfo },
          SIZE => { type: ::Thrift::Types::I64, name: "size" },
          LENGTH => { type: ::Thrift::Types::I64, name: "length" },
          ACCESSCONDITION => { type: ::Thrift::Types::STRUCT, name: "accessCondition", class: ::XSS::AutoGenerated::ThriftAccessCondition },
          FILEREQUESTOPTIONS => { type: ::Thrift::Types::STRUCT, name: "fileRequestOptions", class: ::XSS::AutoGenerated::ThriftFileRequestOptions },
          OPERATIONCONTEXT => { type: ::Thrift::Types::STRUCT, name: "operationContext", class: ::XSS::AutoGenerated::OperationContext }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class ListRanges_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        WSE = 1

        FIELDS = {
          SUCCESS => { type: ::Thrift::Types::STRUCT, name: "success", class: ::XSS::AutoGenerated::ListRangesResponse },
          WSE => { type: ::Thrift::Types::STRUCT, name: "wse", class: ::XSS::AutoGenerated::WrappedStorageException }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class UploadFromStream_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        ACCOUNTINFO = 1
        FILEPATH = 2
        SOURCE = 3
        LENGTH = 4
        ACCESSCONDITION = 5
        FILEREQUESTOPTIONS = 6
        OPERATIONCONTEXT = 7

        FIELDS = {
          ACCOUNTINFO => { type: ::Thrift::Types::STRUCT, name: "accountInfo", class: ::XSS::AutoGenerated::StorageAccountInfo },
          FILEPATH => { type: ::Thrift::Types::STRUCT, name: "filePath", class: ::XSS::AutoGenerated::FilePathInfo },
          SOURCE => { type: ::Thrift::Types::STRING, name: "source", binary: true },
          LENGTH => { type: ::Thrift::Types::I64, name: "length" },
          ACCESSCONDITION => { type: ::Thrift::Types::STRUCT, name: "accessCondition", class: ::XSS::AutoGenerated::ThriftAccessCondition },
          FILEREQUESTOPTIONS => { type: ::Thrift::Types::STRUCT, name: "fileRequestOptions", class: ::XSS::AutoGenerated::ThriftFileRequestOptions },
          OPERATIONCONTEXT => { type: ::Thrift::Types::STRUCT, name: "operationContext", class: ::XSS::AutoGenerated::OperationContext }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class UploadFromStream_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        WSE = 1

        FIELDS = {
          SUCCESS => { type: ::Thrift::Types::STRUCT, name: "success", class: ::XSS::AutoGenerated::CloudFileResponse },
          WSE => { type: ::Thrift::Types::STRUCT, name: "wse", class: ::XSS::AutoGenerated::WrappedStorageException }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class UploadFromByteArray_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        ACCOUNTINFO = 1
        FILEPATH = 2
        BUFFER = 3
        INDEX = 4
        COUNT = 5
        ACCESSCONDITION = 6
        FILEREQUESTOPTIONS = 7
        OPERATIONCONTEXT = 8

        FIELDS = {
          ACCOUNTINFO => { type: ::Thrift::Types::STRUCT, name: "accountInfo", class: ::XSS::AutoGenerated::StorageAccountInfo },
          FILEPATH => { type: ::Thrift::Types::STRUCT, name: "filePath", class: ::XSS::AutoGenerated::FilePathInfo },
          BUFFER => { type: ::Thrift::Types::STRING, name: "buffer", binary: true },
          INDEX => { type: ::Thrift::Types::I32, name: "index" },
          COUNT => { type: ::Thrift::Types::I32, name: "count" },
          ACCESSCONDITION => { type: ::Thrift::Types::STRUCT, name: "accessCondition", class: ::XSS::AutoGenerated::ThriftAccessCondition },
          FILEREQUESTOPTIONS => { type: ::Thrift::Types::STRUCT, name: "fileRequestOptions", class: ::XSS::AutoGenerated::ThriftFileRequestOptions },
          OPERATIONCONTEXT => { type: ::Thrift::Types::STRUCT, name: "operationContext", class: ::XSS::AutoGenerated::OperationContext }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class UploadFromByteArray_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        WSE = 1

        FIELDS = {
          SUCCESS => { type: ::Thrift::Types::STRUCT, name: "success", class: ::XSS::AutoGenerated::CloudFileResponse },
          WSE => { type: ::Thrift::Types::STRUCT, name: "wse", class: ::XSS::AutoGenerated::WrappedStorageException }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class DownloadToByteArray_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        ACCOUNTINFO = 1
        FILEPATH = 2
        TARGETSIZE = 3
        INDEX = 4
        ACCESSCONDITION = 5
        FILEREQUESTOPTIONS = 6
        OPERATIONCONTEXT = 7

        FIELDS = {
          ACCOUNTINFO => { type: ::Thrift::Types::STRUCT, name: "accountInfo", class: ::XSS::AutoGenerated::StorageAccountInfo },
          FILEPATH => { type: ::Thrift::Types::STRUCT, name: "filePath", class: ::XSS::AutoGenerated::FilePathInfo },
          TARGETSIZE => { type: ::Thrift::Types::I32, name: "targetSize" },
          INDEX => { type: ::Thrift::Types::I32, name: "index" },
          ACCESSCONDITION => { type: ::Thrift::Types::STRUCT, name: "accessCondition", class: ::XSS::AutoGenerated::ThriftAccessCondition },
          FILEREQUESTOPTIONS => { type: ::Thrift::Types::STRUCT, name: "fileRequestOptions", class: ::XSS::AutoGenerated::ThriftFileRequestOptions },
          OPERATIONCONTEXT => { type: ::Thrift::Types::STRUCT, name: "operationContext", class: ::XSS::AutoGenerated::OperationContext }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class DownloadToByteArray_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        WSE = 1

        FIELDS = {
          SUCCESS => { type: ::Thrift::Types::STRUCT, name: "success", class: ::XSS::AutoGenerated::DownloadToByteArrayFileResponse },
          WSE => { type: ::Thrift::Types::STRUCT, name: "wse", class: ::XSS::AutoGenerated::WrappedStorageException }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class DownloadRangeToByteArray_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        ACCOUNTINFO = 1
        FILEPATH = 2
        TARGETSIZE = 3
        INDEX = 4
        FILEOFFSET = 5
        LENGTH = 6
        ACCESSCONDITION = 7
        FILEREQUESTOPTIONS = 8
        OPERATIONCONTEXT = 9

        FIELDS = {
          ACCOUNTINFO => { type: ::Thrift::Types::STRUCT, name: "accountInfo", class: ::XSS::AutoGenerated::StorageAccountInfo },
          FILEPATH => { type: ::Thrift::Types::STRUCT, name: "filePath", class: ::XSS::AutoGenerated::FilePathInfo },
          TARGETSIZE => { type: ::Thrift::Types::I32, name: "targetSize" },
          INDEX => { type: ::Thrift::Types::I32, name: "index" },
          FILEOFFSET => { type: ::Thrift::Types::I64, name: "fileOffset" },
          LENGTH => { type: ::Thrift::Types::I64, name: "length" },
          ACCESSCONDITION => { type: ::Thrift::Types::STRUCT, name: "accessCondition", class: ::XSS::AutoGenerated::ThriftAccessCondition },
          FILEREQUESTOPTIONS => { type: ::Thrift::Types::STRUCT, name: "fileRequestOptions", class: ::XSS::AutoGenerated::ThriftFileRequestOptions },
          OPERATIONCONTEXT => { type: ::Thrift::Types::STRUCT, name: "operationContext", class: ::XSS::AutoGenerated::OperationContext }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class DownloadRangeToByteArray_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        WSE = 1

        FIELDS = {
          SUCCESS => { type: ::Thrift::Types::STRUCT, name: "success", class: ::XSS::AutoGenerated::DownloadToByteArrayFileResponse },
          WSE => { type: ::Thrift::Types::STRUCT, name: "wse", class: ::XSS::AutoGenerated::WrappedStorageException }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class StartCopyFromFileOrBlob_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        REQUESTINFO = 1
        ACCOUNTINFO = 2
        URI = 3

        FIELDS = {
          REQUESTINFO => { type: ::Thrift::Types::STRUCT, name: "requestInfo", class: ::XSS::AutoGenerated::CopyFileRequestInfo },
          ACCOUNTINFO => { type: ::Thrift::Types::STRUCT, name: "accountInfo", class: ::XSS::AutoGenerated::StorageAccountInfo },
          URI => { type: ::Thrift::Types::STRUCT, name: "uri", class: ::XSS::AutoGenerated::CloudStorageUri }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class StartCopyFromFileOrBlob_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        WSE = 1

        FIELDS = {
          SUCCESS => { type: ::Thrift::Types::STRUCT, name: "success", class: ::XSS::AutoGenerated::FileStartCopyResponse },
          WSE => { type: ::Thrift::Types::STRUCT, name: "wse", class: ::XSS::AutoGenerated::WrappedStorageException }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end
    end
  end
end
