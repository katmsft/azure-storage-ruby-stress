#
# Auto-generated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require "thrift"
require_relative "core_types"


module Azure::Storage::Stress
  module AutoGenerated
    module ThriftPayloadFormat
      AtomPub = 0
      JsonFullMetadata = 1
      Json = 2
      JsonNoMetadata = 3
      VALUE_MAP = { 0 => "AtomPub", 1 => "JsonFullMetadata", 2 => "Json", 3 => "JsonNoMetadata" }
      VALID_VALUES = Set.new([AtomPub, JsonFullMetadata, Json, JsonNoMetadata]).freeze
    end

    module ThriftEdmType
      String = 0
      Binary = 1
      Boolean = 2
      DateTime = 3
      Double = 4
      Guid = 5
      Int32 = 6
      Int64 = 7
      VALUE_MAP = { 0 => "String", 1 => "Binary", 2 => "Boolean", 3 => "DateTime", 4 => "Double", 5 => "Guid", 6 => "Int32", 7 => "Int64" }
      VALID_VALUES = Set.new([String, Binary, Boolean, DateTime, Double, Guid, Int32, Int64]).freeze
    end

    module ThriftSharedAccessTablePermissions
      None = 0
      Query = 1
      Add = 2
      Update = 4
      Delete = 8
      VALUE_MAP = { 0 => "None", 1 => "Query", 2 => "Add", 4 => "Update", 8 => "Delete" }
      VALID_VALUES = Set.new([None, Query, Add, Update, Delete]).freeze
    end

    module ThriftTableOperationType
      Insert = 0
      Delete = 1
      Replace = 2
      Merge = 3
      InsertOrReplace = 4
      InsertOrMerge = 5
      Retrieve = 6
      VALUE_MAP = { 0 => "Insert", 1 => "Delete", 2 => "Replace", 3 => "Merge", 4 => "InsertOrReplace", 5 => "InsertOrMerge", 6 => "Retrieve" }
      VALID_VALUES = Set.new([Insert, Delete, Replace, Merge, InsertOrReplace, InsertOrMerge, Retrieve]).freeze
    end

    class ThriftTableRequestOptions
      include ::Thrift::Struct, ::Thrift::Struct_Union
      PAYLOADFORMAT = 1
      LOCATIONMODE = 2
      SERVERTIMEOUTSECONDS = 3
      MAXIMUMEXECUTIONTIMESECONDS = 4

      FIELDS = {
        PAYLOADFORMAT => { type: ::Thrift::Types::I32, name: "payloadFormat", optional: true, enum_class: ::XSS::AutoGenerated::ThriftPayloadFormat },
        LOCATIONMODE => { type: ::Thrift::Types::I32, name: "locationMode", optional: true, enum_class: ::XSS::AutoGenerated::LocationMode },
        SERVERTIMEOUTSECONDS => { type: ::Thrift::Types::I32, name: "serverTimeoutSeconds", optional: true },
        MAXIMUMEXECUTIONTIMESECONDS => { type: ::Thrift::Types::I32, name: "maximumExecutionTimeSeconds", optional: true }
      }

      def struct_fields; FIELDS; end

      def validate
        unless @payloadFormat.nil? || ::XSS::AutoGenerated::ThriftPayloadFormat::VALID_VALUES.include?(@payloadFormat)
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, "Invalid value of field payloadFormat!")
        end
        unless @locationMode.nil? || ::XSS::AutoGenerated::LocationMode::VALID_VALUES.include?(@locationMode)
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, "Invalid value of field locationMode!")
        end
      end

      ::Thrift::Struct.generate_accessors self
    end

    class ThriftTableContinuationToken
      include ::Thrift::Struct, ::Thrift::Struct_Union
      NEXTPARTITIONKEY = 1
      NEXTROWKEY = 2
      NEXTTABLENAME = 3
      TARGETLOCATION = 4

      FIELDS = {
        NEXTPARTITIONKEY => { type: ::Thrift::Types::STRING, name: "nextPartitionKey", optional: true },
        NEXTROWKEY => { type: ::Thrift::Types::STRING, name: "nextRowKey", optional: true },
        NEXTTABLENAME => { type: ::Thrift::Types::STRING, name: "nextTableName", optional: true },
        TARGETLOCATION => { type: ::Thrift::Types::I32, name: "targetLocation", optional: true, enum_class: ::XSS::AutoGenerated::StorageLocation }
      }

      def struct_fields; FIELDS; end

      def validate
        unless @targetLocation.nil? || ::XSS::AutoGenerated::StorageLocation::VALID_VALUES.include?(@targetLocation)
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, "Invalid value of field targetLocation!")
        end
      end

      ::Thrift::Struct.generate_accessors self
    end

    class ListTableItem
      include ::Thrift::Struct, ::Thrift::Struct_Union
      NAME = 1
      STORAGEURI = 2

      FIELDS = {
        NAME => { type: ::Thrift::Types::STRING, name: "name" },
        STORAGEURI => { type: ::Thrift::Types::STRUCT, name: "storageUri", class: ::XSS::AutoGenerated::CloudStorageUri }
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, "Required field name is unset!") unless @name
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, "Required field storageUri is unset!") unless @storageUri
      end

      ::Thrift::Struct.generate_accessors self
    end

    class ListTableResultSegmented
      include ::Thrift::Struct, ::Thrift::Struct_Union
      RESULTS = 1
      CONTINUATIONTOKEN = 2

      FIELDS = {
        RESULTS => { type: ::Thrift::Types::LIST, name: "results", element: { type: ::Thrift::Types::STRUCT, class: ::XSS::AutoGenerated::ListTableItem } },
        CONTINUATIONTOKEN => { type: ::Thrift::Types::STRUCT, name: "continuationToken", class: ::XSS::AutoGenerated::ThriftTableContinuationToken, optional: true }
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, "Required field results is unset!") unless @results
      end

      ::Thrift::Struct.generate_accessors self
    end

    class ThriftSharedAccessTablePolicy
      include ::Thrift::Struct, ::Thrift::Struct_Union
      PERMISSIONS = 1
      EXPIRYTIME = 2
      STARTTIME = 3

      FIELDS = {
        PERMISSIONS => { type: ::Thrift::Types::STRING, name: "permissions" },
        EXPIRYTIME => { type: ::Thrift::Types::I64, name: "expiryTime", optional: true },
        STARTTIME => { type: ::Thrift::Types::I64, name: "startTime", optional: true }
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, "Required field permissions is unset!") unless @permissions
      end

      ::Thrift::Struct.generate_accessors self
    end

    class ThriftTablePermissions
      include ::Thrift::Struct, ::Thrift::Struct_Union
      SHAREDACCESSPOLICIES = 1

      FIELDS = {
        SHAREDACCESSPOLICIES => { type: ::Thrift::Types::MAP, name: "sharedAccessPolicies", key: { type: ::Thrift::Types::STRING }, value: { type: ::Thrift::Types::STRUCT, class: ::XSS::AutoGenerated::ThriftSharedAccessTablePolicy } }
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, "Required field sharedAccessPolicies is unset!") unless @sharedAccessPolicies
      end

      ::Thrift::Struct.generate_accessors self
    end

    class ThriftEntityProperty
      include ::Thrift::Struct, ::Thrift::Struct_Union
      PROPERTYTYPE = 1
      ISNULL = 2
      VALUE = 3

      FIELDS = {
        PROPERTYTYPE => { type: ::Thrift::Types::I32, name: "propertyType", enum_class: ::XSS::AutoGenerated::ThriftEdmType },
        ISNULL => { type: ::Thrift::Types::BOOL, name: "isNull" },
        VALUE => { type: ::Thrift::Types::STRING, name: "value", optional: true }
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, "Required field propertyType is unset!") unless @propertyType
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, "Required field isNull is unset!") if @isNull.nil?
        unless @propertyType.nil? || ::XSS::AutoGenerated::ThriftEdmType::VALID_VALUES.include?(@propertyType)
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, "Invalid value of field propertyType!")
        end
      end

      ::Thrift::Struct.generate_accessors self
    end

    class ThriftTableEntity
      include ::Thrift::Struct, ::Thrift::Struct_Union
      PARTITIONKEY = 1
      ROWKEY = 2
      ETAG = 3
      TIMESTAMP = 4
      PROPERTIES = 5

      FIELDS = {
        PARTITIONKEY => { type: ::Thrift::Types::STRING, name: "partitionKey" },
        ROWKEY => { type: ::Thrift::Types::STRING, name: "rowKey" },
        ETAG => { type: ::Thrift::Types::STRING, name: "etag", optional: true },
        TIMESTAMP => { type: ::Thrift::Types::I64, name: "timestamp", optional: true },
        PROPERTIES => { type: ::Thrift::Types::MAP, name: "properties", key: { type: ::Thrift::Types::STRING }, value: { type: ::Thrift::Types::STRUCT, class: ::XSS::AutoGenerated::ThriftEntityProperty }, optional: true }
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, "Required field partitionKey is unset!") unless @partitionKey
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, "Required field rowKey is unset!") unless @rowKey
      end

      ::Thrift::Struct.generate_accessors self
    end

    # Represents a single table operation
    #
    # <dl>
    #  <dt>operationType</dt>
    #    <dd>
    #    The table operation type
    #    </dd>
    #
    # <dl>
    #  <dt>entity</dt>
    #    <dd>
    #    The table entity that the operation is for. The values set on entity for a
    #    request are dependant on the operation type. entity.PartitionKey and
    #    entity.RowKey are always set for all operations.
    #     <ul>
    #      <li>Insert, InsertOrReplace, InsertOrMerge - All fields but ETag</li>
    #      <li>Replace, Merge - All Fields Set</li>
    #      <li>Delete - PartitionKey, RowKey and ETag only</li>
    #      <li>Retrieve - PartitionKey and RowKey</li>
    #     <ul>
    #    </dd>
    #
    #  <dt>echoContent</dt>
    #    <dd>
    #    Only set by the proxy when operation type is Insert
    #    </dd>
    # </dl>
    class ThriftTableOperation
      include ::Thrift::Struct, ::Thrift::Struct_Union
      OPERATIONTYPE = 1
      ENTITY = 2
      ECHOCONTENT = 3

      FIELDS = {
        OPERATIONTYPE => { type: ::Thrift::Types::I32, name: "operationType", enum_class: ::XSS::AutoGenerated::ThriftTableOperationType },
        ENTITY => { type: ::Thrift::Types::STRUCT, name: "entity", class: ::XSS::AutoGenerated::ThriftTableEntity },
        ECHOCONTENT => { type: ::Thrift::Types::BOOL, name: "echoContent", optional: true }
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, "Required field operationType is unset!") unless @operationType
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, "Required field entity is unset!") unless @entity
        unless @operationType.nil? || ::XSS::AutoGenerated::ThriftTableOperationType::VALID_VALUES.include?(@operationType)
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, "Invalid value of field operationType!")
        end
      end

      ::Thrift::Struct.generate_accessors self
    end

    # Represents a result from a single or batched table operation
    #
    # <dl>
    #  <dt>httpStatusCode</dt>
    #    <dd>
    #    The http status code for this operation
    #    </dd>
    #
    #  <dt>etag</dt>
    #    <dd>
    #    The etag of the table entity. This isn't returned by the azure rest service
    #    for DELETE operations, so language implementations should make sure it is
    #    set to an empty string for deletes.
    #    </dd>
    #
    #  <dt>entity</dt>
    #    <dd>
    #    The table entity returned from the operation.  This is not returned for all
    #    operations. It should be returned only for all retrieve operation and for
    #    insert operations (not InsertOrReplace or InsertOrMerge) where the
    #    ThriftTableOperation.echoContent field is set to true.
    #    </dd>
    # </dl>
    class ThriftTableResult
      include ::Thrift::Struct, ::Thrift::Struct_Union
      HTTPSTATUSCODE = 1
      ETAG = 2
      ENTITY = 3

      FIELDS = {
        HTTPSTATUSCODE => { type: ::Thrift::Types::I32, name: "httpStatusCode" },
        ETAG => { type: ::Thrift::Types::STRING, name: "etag", optional: true },
        ENTITY => { type: ::Thrift::Types::STRUCT, name: "entity", class: ::XSS::AutoGenerated::ThriftTableEntity, optional: true }
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, "Required field httpStatusCode is unset!") unless @httpStatusCode
      end

      ::Thrift::Struct.generate_accessors self
    end

    class ThriftTableQuery
      include ::Thrift::Struct, ::Thrift::Struct_Union
      FILTERSTRING = 1
      SELECTCOLUMNS = 2
      TAKECOUNT = 3

      FIELDS = {
        FILTERSTRING => { type: ::Thrift::Types::STRING, name: "filterString" },
        SELECTCOLUMNS => { type: ::Thrift::Types::LIST, name: "selectColumns", element: { type: ::Thrift::Types::STRING } },
        TAKECOUNT => { type: ::Thrift::Types::I32, name: "takeCount", optional: true }
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, "Required field filterString is unset!") unless @filterString
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, "Required field selectColumns is unset!") unless @selectColumns
      end

      ::Thrift::Struct.generate_accessors self
    end

    class TableQueryResultSegment
      include ::Thrift::Struct, ::Thrift::Struct_Union
      TABLEENTITIES = 1
      CONTINUATIONTOKEN = 2

      FIELDS = {
        TABLEENTITIES => { type: ::Thrift::Types::LIST, name: "tableEntities", element: { type: ::Thrift::Types::STRUCT, class: ::XSS::AutoGenerated::ThriftTableEntity } },
        CONTINUATIONTOKEN => { type: ::Thrift::Types::STRUCT, name: "continuationToken", class: ::XSS::AutoGenerated::ThriftTableContinuationToken }
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, "Required field tableEntities is unset!") unless @tableEntities
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, "Required field continuationToken is unset!") unless @continuationToken
      end

      ::Thrift::Struct.generate_accessors self
    end
  end
end
