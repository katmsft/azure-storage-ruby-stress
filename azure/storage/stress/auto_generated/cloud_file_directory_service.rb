#
# Auto-generated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require "thrift"
require_relative "cloud_file_directory_types"

module Azure::Storage::Stress
  module AutoGenerated
    module CloudFileDirectoryService
      class Client
        include ::Thrift::Client

        def createDirectory(accountInfo, filePath, createIfNotExists, fileRequestOptions, operationContext)
          send_createDirectory(accountInfo, filePath, createIfNotExists, fileRequestOptions, operationContext)
          return recv_createDirectory()
        end

        def send_createDirectory(accountInfo, filePath, createIfNotExists, fileRequestOptions, operationContext)
          send_message("createDirectory", CreateDirectory_args, accountInfo: accountInfo, filePath: filePath, createIfNotExists: createIfNotExists, fileRequestOptions: fileRequestOptions, operationContext: operationContext)
        end

        def recv_createDirectory()
          result = receive_message(CreateDirectory_result)
          return result.success unless result.success.nil?
          raise result.wse unless result.wse.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, "createDirectory failed: unknown result")
        end

        def deleteDirectory(accountInfo, filePath, deleteIfExists, accessCondition, fileRequestOptions, operationContext)
          send_deleteDirectory(accountInfo, filePath, deleteIfExists, accessCondition, fileRequestOptions, operationContext)
          return recv_deleteDirectory()
        end

        def send_deleteDirectory(accountInfo, filePath, deleteIfExists, accessCondition, fileRequestOptions, operationContext)
          send_message("deleteDirectory", DeleteDirectory_args, accountInfo: accountInfo, filePath: filePath, deleteIfExists: deleteIfExists, accessCondition: accessCondition, fileRequestOptions: fileRequestOptions, operationContext: operationContext)
        end

        def recv_deleteDirectory()
          result = receive_message(DeleteDirectory_result)
          return result.success unless result.success.nil?
          raise result.wse unless result.wse.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, "deleteDirectory failed: unknown result")
        end

        def setMetadata(accountInfo, filePath, accessCondition, fileRequestOptions, operationContext, metadata)
          send_setMetadata(accountInfo, filePath, accessCondition, fileRequestOptions, operationContext, metadata)
          return recv_setMetadata()
        end

        def send_setMetadata(accountInfo, filePath, accessCondition, fileRequestOptions, operationContext, metadata)
          send_message("setMetadata", SetMetadata_args, accountInfo: accountInfo, filePath: filePath, accessCondition: accessCondition, fileRequestOptions: fileRequestOptions, operationContext: operationContext, metadata: metadata)
        end

        def recv_setMetadata()
          result = receive_message(SetMetadata_result)
          return result.success unless result.success.nil?
          raise result.wse unless result.wse.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, "setMetadata failed: unknown result")
        end

        def fetchAttributes(accountInfo, filePath, accessCondition, fileRequestOptions, operationContext)
          send_fetchAttributes(accountInfo, filePath, accessCondition, fileRequestOptions, operationContext)
          return recv_fetchAttributes()
        end

        def send_fetchAttributes(accountInfo, filePath, accessCondition, fileRequestOptions, operationContext)
          send_message("fetchAttributes", FetchAttributes_args, accountInfo: accountInfo, filePath: filePath, accessCondition: accessCondition, fileRequestOptions: fileRequestOptions, operationContext: operationContext)
        end

        def recv_fetchAttributes()
          result = receive_message(FetchAttributes_result)
          return result.success unless result.success.nil?
          raise result.wse unless result.wse.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, "fetchAttributes failed: unknown result")
        end

        def exists(accountInfo, filePath, fileRequestOptions, operationContext)
          send_exists(accountInfo, filePath, fileRequestOptions, operationContext)
          return recv_exists()
        end

        def send_exists(accountInfo, filePath, fileRequestOptions, operationContext)
          send_message("exists", Exists_args, accountInfo: accountInfo, filePath: filePath, fileRequestOptions: fileRequestOptions, operationContext: operationContext)
        end

        def recv_exists()
          result = receive_message(Exists_result)
          return result.success unless result.success.nil?
          raise result.wse unless result.wse.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, "exists failed: unknown result")
        end

        def listFilesAndDirectories(accountInfo, prefix, filePath, fileRequestOptions, operationContext)
          send_listFilesAndDirectories(accountInfo, prefix, filePath, fileRequestOptions, operationContext)
          return recv_listFilesAndDirectories()
        end

        def send_listFilesAndDirectories(accountInfo, prefix, filePath, fileRequestOptions, operationContext)
          send_message("listFilesAndDirectories", ListFilesAndDirectories_args, accountInfo: accountInfo, prefix: prefix, filePath: filePath, fileRequestOptions: fileRequestOptions, operationContext: operationContext)
        end

        def recv_listFilesAndDirectories()
          result = receive_message(ListFilesAndDirectories_result)
          return result.success unless result.success.nil?
          raise result.wse unless result.wse.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, "listFilesAndDirectories failed: unknown result")
        end

        def listFilesAndDirectoriesSegmented(accountInfo, prefix, filePath, maxResults, continuationToken, fileRequestOptions, operationContext)
          send_listFilesAndDirectoriesSegmented(accountInfo, prefix, filePath, maxResults, continuationToken, fileRequestOptions, operationContext)
          return recv_listFilesAndDirectoriesSegmented()
        end

        def send_listFilesAndDirectoriesSegmented(accountInfo, prefix, filePath, maxResults, continuationToken, fileRequestOptions, operationContext)
          send_message("listFilesAndDirectoriesSegmented", ListFilesAndDirectoriesSegmented_args, accountInfo: accountInfo, prefix: prefix, filePath: filePath, maxResults: maxResults, continuationToken: continuationToken, fileRequestOptions: fileRequestOptions, operationContext: operationContext)
        end

        def recv_listFilesAndDirectoriesSegmented()
          result = receive_message(ListFilesAndDirectoriesSegmented_result)
          return result.success unless result.success.nil?
          raise result.wse unless result.wse.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, "listFilesAndDirectoriesSegmented failed: unknown result")
        end
      end

      class Processor
        include ::Thrift::Processor

        def process_createDirectory(seqid, iprot, oprot)
          args = read_args(iprot, CreateDirectory_args)
          result = CreateDirectory_result.new()
          begin
            result.success = @handler.createDirectory(args.accountInfo, args.filePath, args.createIfNotExists, args.fileRequestOptions, args.operationContext)
          rescue ::XSS::AutoGenerated::WrappedStorageException => wse
            result.wse = wse
          end
          write_result(result, oprot, "createDirectory", seqid)
        end

        def process_deleteDirectory(seqid, iprot, oprot)
          args = read_args(iprot, DeleteDirectory_args)
          result = DeleteDirectory_result.new()
          begin
            result.success = @handler.deleteDirectory(args.accountInfo, args.filePath, args.deleteIfExists, args.accessCondition, args.fileRequestOptions, args.operationContext)
          rescue ::XSS::AutoGenerated::WrappedStorageException => wse
            result.wse = wse
          end
          write_result(result, oprot, "deleteDirectory", seqid)
        end

        def process_setMetadata(seqid, iprot, oprot)
          args = read_args(iprot, SetMetadata_args)
          result = SetMetadata_result.new()
          begin
            result.success = @handler.setMetadata(args.accountInfo, args.filePath, args.accessCondition, args.fileRequestOptions, args.operationContext, args.metadata)
          rescue ::XSS::AutoGenerated::WrappedStorageException => wse
            result.wse = wse
          end
          write_result(result, oprot, "setMetadata", seqid)
        end

        def process_fetchAttributes(seqid, iprot, oprot)
          args = read_args(iprot, FetchAttributes_args)
          result = FetchAttributes_result.new()
          begin
            result.success = @handler.fetchAttributes(args.accountInfo, args.filePath, args.accessCondition, args.fileRequestOptions, args.operationContext)
          rescue ::XSS::AutoGenerated::WrappedStorageException => wse
            result.wse = wse
          end
          write_result(result, oprot, "fetchAttributes", seqid)
        end

        def process_exists(seqid, iprot, oprot)
          args = read_args(iprot, Exists_args)
          result = Exists_result.new()
          begin
            result.success = @handler.exists(args.accountInfo, args.filePath, args.fileRequestOptions, args.operationContext)
          rescue ::XSS::AutoGenerated::WrappedStorageException => wse
            result.wse = wse
          end
          write_result(result, oprot, "exists", seqid)
        end

        def process_listFilesAndDirectories(seqid, iprot, oprot)
          args = read_args(iprot, ListFilesAndDirectories_args)
          result = ListFilesAndDirectories_result.new()
          begin
            result.success = @handler.listFilesAndDirectories(args.accountInfo, args.prefix, args.filePath, args.fileRequestOptions, args.operationContext)
          rescue ::XSS::AutoGenerated::WrappedStorageException => wse
            result.wse = wse
          end
          write_result(result, oprot, "listFilesAndDirectories", seqid)
        end

        def process_listFilesAndDirectoriesSegmented(seqid, iprot, oprot)
          args = read_args(iprot, ListFilesAndDirectoriesSegmented_args)
          result = ListFilesAndDirectoriesSegmented_result.new()
          begin
            result.success = @handler.listFilesAndDirectoriesSegmented(args.accountInfo, args.prefix, args.filePath, args.maxResults, args.continuationToken, args.fileRequestOptions, args.operationContext)
          rescue ::XSS::AutoGenerated::WrappedStorageException => wse
            result.wse = wse
          end
          write_result(result, oprot, "listFilesAndDirectoriesSegmented", seqid)
        end
      end

      # HELPER FUNCTIONS AND STRUCTURES

      class CreateDirectory_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        ACCOUNTINFO = 1
        FILEPATH = 2
        CREATEIFNOTEXISTS = 3
        FILEREQUESTOPTIONS = 4
        OPERATIONCONTEXT = 5

        FIELDS = {
          ACCOUNTINFO => { type: ::Thrift::Types::STRUCT, name: "accountInfo", class: ::XSS::AutoGenerated::StorageAccountInfo },
          FILEPATH => { type: ::Thrift::Types::STRUCT, name: "filePath", class: ::XSS::AutoGenerated::FilePathInfo },
          CREATEIFNOTEXISTS => { type: ::Thrift::Types::BOOL, name: "createIfNotExists" },
          FILEREQUESTOPTIONS => { type: ::Thrift::Types::STRUCT, name: "fileRequestOptions", class: ::XSS::AutoGenerated::ThriftFileRequestOptions },
          OPERATIONCONTEXT => { type: ::Thrift::Types::STRUCT, name: "operationContext", class: ::XSS::AutoGenerated::OperationContext }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class CreateDirectory_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        WSE = 1

        FIELDS = {
          SUCCESS => { type: ::Thrift::Types::STRUCT, name: "success", class: ::XSS::AutoGenerated::CreateFileDirectoryResponse },
          WSE => { type: ::Thrift::Types::STRUCT, name: "wse", class: ::XSS::AutoGenerated::WrappedStorageException }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class DeleteDirectory_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        ACCOUNTINFO = 1
        FILEPATH = 2
        DELETEIFEXISTS = 3
        ACCESSCONDITION = 4
        FILEREQUESTOPTIONS = 5
        OPERATIONCONTEXT = 6

        FIELDS = {
          ACCOUNTINFO => { type: ::Thrift::Types::STRUCT, name: "accountInfo", class: ::XSS::AutoGenerated::StorageAccountInfo },
          FILEPATH => { type: ::Thrift::Types::STRUCT, name: "filePath", class: ::XSS::AutoGenerated::FilePathInfo },
          DELETEIFEXISTS => { type: ::Thrift::Types::BOOL, name: "deleteIfExists" },
          ACCESSCONDITION => { type: ::Thrift::Types::STRUCT, name: "accessCondition", class: ::XSS::AutoGenerated::ThriftAccessCondition },
          FILEREQUESTOPTIONS => { type: ::Thrift::Types::STRUCT, name: "fileRequestOptions", class: ::XSS::AutoGenerated::ThriftFileRequestOptions },
          OPERATIONCONTEXT => { type: ::Thrift::Types::STRUCT, name: "operationContext", class: ::XSS::AutoGenerated::OperationContext }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class DeleteDirectory_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        WSE = 1

        FIELDS = {
          SUCCESS => { type: ::Thrift::Types::BOOL, name: "success" },
          WSE => { type: ::Thrift::Types::STRUCT, name: "wse", class: ::XSS::AutoGenerated::WrappedStorageException }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class SetMetadata_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        ACCOUNTINFO = 1
        FILEPATH = 2
        ACCESSCONDITION = 3
        FILEREQUESTOPTIONS = 4
        OPERATIONCONTEXT = 5
        METADATA = 6

        FIELDS = {
          ACCOUNTINFO => { type: ::Thrift::Types::STRUCT, name: "accountInfo", class: ::XSS::AutoGenerated::StorageAccountInfo },
          FILEPATH => { type: ::Thrift::Types::STRUCT, name: "filePath", class: ::XSS::AutoGenerated::FilePathInfo },
          ACCESSCONDITION => { type: ::Thrift::Types::STRUCT, name: "accessCondition", class: ::XSS::AutoGenerated::ThriftAccessCondition },
          FILEREQUESTOPTIONS => { type: ::Thrift::Types::STRUCT, name: "fileRequestOptions", class: ::XSS::AutoGenerated::ThriftFileRequestOptions },
          OPERATIONCONTEXT => { type: ::Thrift::Types::STRUCT, name: "operationContext", class: ::XSS::AutoGenerated::OperationContext },
          METADATA => { type: ::Thrift::Types::MAP, name: "metadata", key: { type: ::Thrift::Types::STRING }, value: { type: ::Thrift::Types::STRING } }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class SetMetadata_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        WSE = 1

        FIELDS = {
          SUCCESS => { type: ::Thrift::Types::STRUCT, name: "success", class: ::XSS::AutoGenerated::CloudFileDirectoryResponse },
          WSE => { type: ::Thrift::Types::STRUCT, name: "wse", class: ::XSS::AutoGenerated::WrappedStorageException }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class FetchAttributes_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        ACCOUNTINFO = 1
        FILEPATH = 2
        ACCESSCONDITION = 3
        FILEREQUESTOPTIONS = 4
        OPERATIONCONTEXT = 5

        FIELDS = {
          ACCOUNTINFO => { type: ::Thrift::Types::STRUCT, name: "accountInfo", class: ::XSS::AutoGenerated::StorageAccountInfo },
          FILEPATH => { type: ::Thrift::Types::STRUCT, name: "filePath", class: ::XSS::AutoGenerated::FilePathInfo },
          ACCESSCONDITION => { type: ::Thrift::Types::STRUCT, name: "accessCondition", class: ::XSS::AutoGenerated::ThriftAccessCondition },
          FILEREQUESTOPTIONS => { type: ::Thrift::Types::STRUCT, name: "fileRequestOptions", class: ::XSS::AutoGenerated::ThriftFileRequestOptions },
          OPERATIONCONTEXT => { type: ::Thrift::Types::STRUCT, name: "operationContext", class: ::XSS::AutoGenerated::OperationContext }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class FetchAttributes_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        WSE = 1

        FIELDS = {
          SUCCESS => { type: ::Thrift::Types::STRUCT, name: "success", class: ::XSS::AutoGenerated::CloudFileDirectoryResponse },
          WSE => { type: ::Thrift::Types::STRUCT, name: "wse", class: ::XSS::AutoGenerated::WrappedStorageException }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Exists_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        ACCOUNTINFO = 1
        FILEPATH = 2
        FILEREQUESTOPTIONS = 3
        OPERATIONCONTEXT = 4

        FIELDS = {
          ACCOUNTINFO => { type: ::Thrift::Types::STRUCT, name: "accountInfo", class: ::XSS::AutoGenerated::StorageAccountInfo },
          FILEPATH => { type: ::Thrift::Types::STRUCT, name: "filePath", class: ::XSS::AutoGenerated::FilePathInfo },
          FILEREQUESTOPTIONS => { type: ::Thrift::Types::STRUCT, name: "fileRequestOptions", class: ::XSS::AutoGenerated::ThriftFileRequestOptions },
          OPERATIONCONTEXT => { type: ::Thrift::Types::STRUCT, name: "operationContext", class: ::XSS::AutoGenerated::OperationContext }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Exists_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        WSE = 1

        FIELDS = {
          SUCCESS => { type: ::Thrift::Types::STRUCT, name: "success", class: ::XSS::AutoGenerated::ExistsFileDirectoryResponse },
          WSE => { type: ::Thrift::Types::STRUCT, name: "wse", class: ::XSS::AutoGenerated::WrappedStorageException }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class ListFilesAndDirectories_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        ACCOUNTINFO = 1
        PREFIX = 2
        FILEPATH = 3
        FILEREQUESTOPTIONS = 4
        OPERATIONCONTEXT = 5

        FIELDS = {
          ACCOUNTINFO => { type: ::Thrift::Types::STRUCT, name: "accountInfo", class: ::XSS::AutoGenerated::StorageAccountInfo },
          PREFIX => { type: ::Thrift::Types::STRING, name: "prefix" },
          FILEPATH => { type: ::Thrift::Types::STRUCT, name: "filePath", class: ::XSS::AutoGenerated::FilePathInfo },
          FILEREQUESTOPTIONS => { type: ::Thrift::Types::STRUCT, name: "fileRequestOptions", class: ::XSS::AutoGenerated::ThriftFileRequestOptions },
          OPERATIONCONTEXT => { type: ::Thrift::Types::STRUCT, name: "operationContext", class: ::XSS::AutoGenerated::OperationContext }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class ListFilesAndDirectories_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        WSE = 1

        FIELDS = {
          SUCCESS => { type: ::Thrift::Types::STRUCT, name: "success", class: ::XSS::AutoGenerated::ListFileDirResponse },
          WSE => { type: ::Thrift::Types::STRUCT, name: "wse", class: ::XSS::AutoGenerated::WrappedStorageException }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class ListFilesAndDirectoriesSegmented_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        ACCOUNTINFO = 1
        PREFIX = 2
        FILEPATH = 3
        MAXRESULTS = 4
        CONTINUATIONTOKEN = 5
        FILEREQUESTOPTIONS = 6
        OPERATIONCONTEXT = 7

        FIELDS = {
          ACCOUNTINFO => { type: ::Thrift::Types::STRUCT, name: "accountInfo", class: ::XSS::AutoGenerated::StorageAccountInfo },
          PREFIX => { type: ::Thrift::Types::STRING, name: "prefix" },
          FILEPATH => { type: ::Thrift::Types::STRUCT, name: "filePath", class: ::XSS::AutoGenerated::FilePathInfo },
          MAXRESULTS => { type: ::Thrift::Types::I32, name: "maxResults" },
          CONTINUATIONTOKEN => { type: ::Thrift::Types::STRUCT, name: "continuationToken", class: ::XSS::AutoGenerated::ThriftFileContinuationToken },
          FILEREQUESTOPTIONS => { type: ::Thrift::Types::STRUCT, name: "fileRequestOptions", class: ::XSS::AutoGenerated::ThriftFileRequestOptions },
          OPERATIONCONTEXT => { type: ::Thrift::Types::STRUCT, name: "operationContext", class: ::XSS::AutoGenerated::OperationContext }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class ListFilesAndDirectoriesSegmented_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        WSE = 1

        FIELDS = {
          SUCCESS => { type: ::Thrift::Types::STRUCT, name: "success", class: ::XSS::AutoGenerated::ListFileDirResponse },
          WSE => { type: ::Thrift::Types::STRUCT, name: "wse", class: ::XSS::AutoGenerated::WrappedStorageException }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end
    end
  end
end
