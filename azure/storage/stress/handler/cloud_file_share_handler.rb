require_relative "base_handler"
require_relative "../utils"
require_relative "../auto_generated/cloud_file_share_service"
require_relative "../converter/core_converter"
require_relative "../converter/file_converter"
require_relative "../infrastructure/logging_aspect"


module Azure::Storage::Stress
  module Handler
    class CloudFileShareHandler < CloudFileBaseHandler
      def createShare(accountInfo, shareName, createIfNotExists, snapshotTime, fileRequestOptions, operationContext)
        # ==== Build Client ==== #
        internalRequestInfo = XSS::Utilities::get_default_request_info
        fileClient = self.build_client(internalRequestInfo, accountInfo)
        # ==== Construct Parameters ==== #
        options = XSS::Converter::FileConverter::getRequestOptions(fileRequestOptions)
        options.merge! XSS::Converter::CoreConverter::getOperationContextOptions(operationContext)
        # snapshotTime?
        # options[:quota] = 
        # options[:metadata] = 
        # ==== Operation ==== #
        result = fileClient.create_share(shareName, options)
        # ==== Construct Return Value ==== #
        r = XSS::AutoGenerated::CreateFileShareResponse.new
        r.wasCreated = !result.nil?
        r.cloudFileShareResponse = XSS::Converter::FileConverter::buildCloudFileShareResponseFromInternalRequestInfo(internalRequestInfo)
      end



      def deleteShare(accountInfo, shareName, deleteIfExists, snapshotTime, deleteSnapshotOptions, accessCondition, fileRequestOptions, operationContext)
        # ==== Build Client ==== #
        internalRequestInfo = XSS::Utilities::get_default_request_info
        fileClient = self.build_client(internalRequestInfo, accountInfo)
        # ==== Construct Parameters ==== #
        options = XSS::Converter::FileConverter::getRequestOptions(fileRequestOptions)
        options.merge! XSS::Converter::CoreConverter::getOperationContextOptions(operationContext)
        # snapshotTime
        # deleteSnapshotOptions
        # accessCondition
        # ==== Operation ==== #
        result = fileClient.delete_share(shareName, options)
        # ==== Construct Return Value ==== #
        return result.nil?
      end



      def fetchAttributes(accountInfo, shareName, snapshotTime, accessCondition, fileRequestOptions, operationContext)
        # ==== Build Client ==== #
        internalRequestInfo = XSS::Utilities::get_default_request_info
        fileClient = self.build_client(internalRequestInfo, accountInfo)
        # ==== Construct Parameters ==== #
        options = XSS::Converter::FileConverter::getRequestOptions(fileRequestOptions)
        options.merge! XSS::Converter::CoreConverter::getOperationContextOptions(operationContext)
        # ==== Operation ==== #
        result = fileClient.get_share_properties(shareName, options)
        # ==== Construct Return Value ==== #
        XSS::Converter::FileConverter::buildCloudFileShareResponseFromInternalRequestInfo(internalRequestInfo)
      end



      def exists(accountInfo, shareName, snapshotTime, fileRequestOptions, operationContext)
        exists = true
        # ==== Build Client ==== #
        internalRequestInfo = XSS::Utilities::get_default_request_info
        fileClient = self.build_client(internalRequestInfo, accountInfo)
        # ==== Construct Parameters ==== #
        options = XSS::Converter::FileConverter::getRequestOptions(fileRequestOptions)
        options.merge! XSS::Converter::CoreConverter::getOperationContextOptions(operationContext)
        # ==== Operation ==== #
        # ==== Construct Return Value ==== #
      end



      def setMetadata(accountInfo, shareName, metadata, snapshotTime, accessCondition, fileRequestOptions, operationContext)
        # ==== Build Client ==== #
        internalRequestInfo = XSS::Utilities::get_default_request_info
        fileClient = self.build_client(internalRequestInfo, accountInfo)
        # ==== Construct Parameters ==== #
        options = XSS::Converter::FileConverter::getRequestOptions(fileRequestOptions)
        options.merge! XSS::Converter::CoreConverter::getOperationContextOptions(operationContext)
        # ==== Operation ==== #
        # ==== Construct Return Value ==== #
      end



      def setProperties(requestInfo, accountInfo, properties)
        # ==== Build Client ==== #
        internalRequestInfo = XSS::Utilities::get_default_request_info
        fileClient = self.build_client(internalRequestInfo, accountInfo)
        # ==== Construct Parameters ==== #
        options = XSS::Converter::FileConverter::getRequestOptions(fileRequestOptions)
        options.merge! XSS::Converter::CoreConverter::getOperationContextOptions(operationContext)
        # ==== Operation ==== #
        # ==== Construct Return Value ==== #
      end



      def setPermissions(reqInfo, accountInfo, permissions)
        # ==== Build Client ==== #
        internalRequestInfo = XSS::Utilities::get_default_request_info
        fileClient = self.build_client(internalRequestInfo, accountInfo)
        # ==== Construct Parameters ==== #
        options = XSS::Converter::FileConverter::getRequestOptions(fileRequestOptions)
        options.merge! XSS::Converter::CoreConverter::getOperationContextOptions(operationContext)
        # ==== Operation ==== #
        # ==== Construct Return Value ==== #
      end



      def getPermissions(reqInfo, accountInfo)
        # ==== Build Client ==== #
        internalRequestInfo = XSS::Utilities::get_default_request_info
        fileClient = self.build_client(internalRequestInfo, accountInfo)
        # ==== Construct Parameters ==== #
        options = XSS::Converter::FileConverter::getRequestOptions(fileRequestOptions)
        options.merge! XSS::Converter::CoreConverter::getOperationContextOptions(operationContext)
        # ==== Operation ==== #
        # ==== Construct Return Value ==== #
      end



      def getShareStats(shareName, snapshotTime, fileRequestOptions, thriftOperationContext, accountInfo)
        # ==== Build Client ==== #
        internalRequestInfo = XSS::Utilities::get_default_request_info
        fileClient = self.build_client(internalRequestInfo, accountInfo)
        # ==== Construct Parameters ==== #
        options = XSS::Converter::FileConverter::getRequestOptions(fileRequestOptions)
        options.merge! XSS::Converter::CoreConverter::getOperationContextOptions(operationContext)
        # ==== Operation ==== #
        # ==== Construct Return Value ==== #
      end



      def snapshotShare(accountInfo, shareName, metadata, snapshotTime, accessCondition, fileRequestOptions, operationContext)
        # ==== Build Client ==== #
        internalRequestInfo = XSS::Utilities::get_default_request_info
        fileClient = self.build_client(internalRequestInfo, accountInfo)
        # ==== Construct Parameters ==== #
        options = XSS::Converter::FileConverter::getRequestOptions(fileRequestOptions)
        options.merge! XSS::Converter::CoreConverter::getOperationContextOptions(operationContext)
        # ==== Operation ==== #
        # ==== Construct Return Value ==== #
      end
    end
  end
end
