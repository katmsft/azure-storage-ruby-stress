require "base64"
require_relative "base_handler"
require_relative "../utils"
require_relative "../auto_generated/cloud_block_blob_service"
require_relative "../converter/core_converter"
require_relative "../converter/blob_converter"
require_relative "../infrastructure/logging_aspect"


module Azure::Storage::Stress
  module Handler
    class CloudBlockBlobHandler < CloudBlobHandler
      def putBlock(putBlockPayload, accountInfo)
        # ==== Build Client ==== #
        @request_info = XSS::Utilities::get_default_request_info
        blobClient = self.build_client(@request_info, accountInfo)
        # ==== Construct Parameters ==== #
        requestInfo = putBlockPayload.requestInfo
        blobName = requestInfo.blobName
        containerName = requestInfo.containerName
        requestInfo = putBlockPayload.requestInfo
        options = XSS::Converter::CoreConverter::getRequestOptions(requestInfo.thriftRequestOptions)
        options.merge! XSS::Converter::CoreConverter::getAccessConditionOptions(requestInfo.thriftAccessCondition)
        options.merge! XSS::Converter::CoreConverter::getOperationContextOptions(requestInfo.thriftOperationContext)
        options[:content_md5] = putBlockPayload.contentMD5 if putBlockPayload.contentMD5
        content = XSS::Utilities::generateMT19937Payload(putBlockPayload.blockDataLength, putBlockPayload.version)
        blockId = Base64.strict_decode64(putBlockPayload.blockId)
        # ==== Operation ==== #
        LoggingAspect::info("Putting block to block blob #{containerName}\\#{blobName} with blockId: #{blockId}")
        LoggingAspect::debug("'options' is #{options.to_s}")
        result = blobClient.put_blob_block(containerName, blobName, blockId, content, options)
        # ==== Construct Return Value ==== #
        LoggingAspect::info("Putting block to block blob #{containerName}\\#{blobName} successful")
        XSS::Converter::BlobConverter::buildCloudBlobResponseFromInternalRequestInfo(@request_info)
      end

      def putBlockList(requestInfo, accountInfo, blockList)
        # ==== Build Client ==== #
        @request_info = XSS::Utilities::get_default_request_info
        blobClient = self.build_client(@request_info, accountInfo)
        # ==== Construct Parameters ==== #
        blobName = requestInfo.blobName
        containerName = requestInfo.containerName
        options = XSS::Converter::CoreConverter::getRequestOptions(requestInfo.thriftRequestOptions)
        options.merge! XSS::Converter::CoreConverter::getAccessConditionOptions(requestInfo.thriftAccessCondition)
        options.merge! XSS::Converter::CoreConverter::getOperationContextOptions(requestInfo.thriftOperationContext)
        list = XSS::Converter::BlobConverter::buildBlobListFromThriftArray(blockList)
        # ==== Operation ==== #
        LoggingAspect::info("Putting block list to block blob #{containerName}\\#{blobName}")
        LoggingAspect::debug("'options' is #{options.to_s}")
        LoggingAspect::debug("'list' is #{list.to_s}") if list.size < 10
        result = blobClient.commit_blob_blocks(containerName, blobName, list, options)
        # ==== Construct Return Value ==== #
        LoggingAspect::info("Putting block list to block blob #{containerName}\\#{blobName} successful")
        XSS::Converter::BlobConverter::buildCloudBlobResponseFromInternalRequestInfo(@request_info)
      end

      def downloadBlockList(requestInfo, accountInfo, blockListingFilters)
        # ==== Build Client ==== #
        @request_info = XSS::Utilities::get_default_request_info
        blobClient = self.build_client(@request_info, accountInfo)
        # ==== Construct Parameters ==== #
        blobName = requestInfo.blobName
        containerName = requestInfo.containerName
        options = XSS::Converter::CoreConverter::getRequestOptions(requestInfo.thriftRequestOptions)
        options.merge! XSS::Converter::CoreConverter::getAccessConditionOptions(requestInfo.thriftAccessCondition)
        options.merge! XSS::Converter::CoreConverter::getOperationContextOptions(requestInfo.thriftOperationContext)
        blockListType = XSS::Converter::BlobConverter::getBlockListTypeFromBlockListingFilters(blockListingFilters)
        options[:blocklist_type] = blockListType if blockListType
        # ==== Operation ==== #
        LoggingAspect::info("Listing block list of block blob #{containerName}\\#{blobName}")
        LoggingAspect::debug("'options' is #{options.to_s}")
        result = blobClient.list_blob_blocks(containerName, blobName, options)
        # ==== Construct Return Value ==== #
        LoggingAspect::info("Listing block list of block blob #{containerName}\\#{blobName} successful")
        r = XSS::AutoGenerated::DownloadBlockListResponse.new
        r.response = XSS::Converter::BlobConverter::buildCloudBlobResponseFromInternalRequestInfo(@request_info)
        r.blockList = []
        result[:committed].each { |block| r.blockList.push XSS::Converter::BlobConverter::buildListBlockItemWithBlock(block, :committed) }
        result[:uncommitted].each { |block| r.blockList.push XSS::Converter::BlobConverter::buildListBlockItemWithBlock(block, :uncommitted) }
        r
      end

      def uploadText(requestInfo, accountInfo, content, encoding)
        # ==== Build Client ==== #
        @request_info = XSS::Utilities::get_default_request_info
        blobClient = self.build_client(@request_info, accountInfo)
        # ==== Construct Parameters ==== #
        blobName = requestInfo.blobName
        containerName = requestInfo.containerName
        options = XSS::Converter::CoreConverter::getRequestOptions(requestInfo.thriftRequestOptions)
        options.merge! XSS::Converter::CoreConverter::getAccessConditionOptions(requestInfo.thriftAccessCondition)
        options.merge! XSS::Converter::CoreConverter::getOperationContextOptions(requestInfo.thriftOperationContext)
        options[:content_encoding] = encoding
        # ==== Operation ==== #
        LoggingAspect::info("Creating block blob #{containerName}\\#{blobName}")
        LoggingAspect::debug("'options' is #{options.to_s}")
        result = blobClient.create_block_blob(containerName, blobName, content, options)
        # ==== Construct Return Value ==== #
        LoggingAspect::info("Creating block blob #{containerName}\\#{blobName} successful")
        XSS::Converter::BlobConverter::buildCloudBlobResponseFromInternalRequestInfo(@request_info)
      end

      def downloadText(requestInfo, accountInfo, encoding)
        # ==== Build Client ==== #
        @request_info = XSS::Utilities::get_default_request_info
        blobClient = self.build_client(@request_info, accountInfo)
        # ==== Construct Parameters ==== #
        blobName = requestInfo.blobName
        containerName = requestInfo.containerName
        options = XSS::Converter::CoreConverter::getRequestOptions(requestInfo.thriftRequestOptions)
        options.merge! XSS::Converter::CoreConverter::getAccessConditionOptions(requestInfo.thriftAccessCondition)
        options.merge! XSS::Converter::CoreConverter::getOperationContextOptions(requestInfo.thriftOperationContext)
        # ==== Operation ==== #
        LoggingAspect::info("Getting blob #{containerName}\\#{blobName}")
        LoggingAspect::debug("'options' is #{options.to_s}")
        result = blobClient.get_blob(containerName, blobName, options)
        # ==== Construct Return Value ==== #
        LoggingAspect::info("Getting block blob #{containerName}\\#{blobName} successful")
        r = XSS::AutoGenerated::BlobDownloadTextResponse.new
        r.response = XSS::Converter::BlobConverter::buildCloudBlobResponseFromInternalRequestInfo(@request_info)
        r.contents = result[1]
        r
      end

      def uploadFromStream(requestInfo, accountInfo, versions, segments, length)
        # ==== Build Client ==== #
        @request_info = XSS::Utilities::get_default_request_info
        blobClient = self.build_client(@request_info, accountInfo)
        # ==== Construct Parameters ==== #
        blobName = requestInfo.blobName
        containerName = requestInfo.containerName
        options = XSS::Converter::CoreConverter::getRequestOptions(requestInfo.thriftRequestOptions)
        options.merge! XSS::Converter::CoreConverter::getAccessConditionOptions(requestInfo.thriftAccessCondition)
        options.merge! XSS::Converter::CoreConverter::getOperationContextOptions(requestInfo.thriftOperationContext)
        options[:content_length] = length
        content = StringIO.new(XSS::Utilities::generateMT19937PayloadFromArrays(segments, versions))
        # ==== Operation ==== #
        LoggingAspect::info("Creating block blob #{containerName}\\#{blobName}")
        LoggingAspect::debug("'options' is #{options.to_s}")
        result = blobClient.create_block_blob(containerName, blobName, content, options)
        # ==== Construct Return Value ==== #
        LoggingAspect::info("Creating block blob #{containerName}\\#{blobName} successful")
        XSS::Converter::BlobConverter::buildCloudBlobResponseFromInternalRequestInfo(@request_info)
      end

      def uploadFromByteArray(requestInfo, accountInfo, buffer, index, count)
        # ==== Build Client ==== #
        @request_info = XSS::Utilities::get_default_request_info
        blobClient = self.build_client(@request_info, accountInfo)
        # ==== Construct Parameters ==== #
        blobName = requestInfo.blobName
        containerName = requestInfo.containerName
        options = XSS::Converter::CoreConverter::getRequestOptions(requestInfo.thriftRequestOptions)
        options.merge! XSS::Converter::CoreConverter::getAccessConditionOptions(requestInfo.thriftAccessCondition)
        options.merge! XSS::Converter::CoreConverter::getOperationContextOptions(requestInfo.thriftOperationContext)
        options[:content_length] = count
        # ==== Operation ==== #
        LoggingAspect::info("Creating block blob #{containerName}\\#{blobName}")
        LoggingAspect::debug("'options' is #{options.to_s}")
        result = blobClient.create_block_blob(containerName, blobName, buffer[index, count], options)
        # ==== Construct Return Value ==== #
        LoggingAspect::info("Creating block blob #{containerName}\\#{blobName} successful")
        XSS::Converter::BlobConverter::buildCloudBlobResponseFromInternalRequestInfo(@request_info)
      end
    end
  end
end
