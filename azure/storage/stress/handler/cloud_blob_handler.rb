require_relative "base_handler"
require_relative "cloud_blob_base_handler"
require_relative "../utils"
require_relative "../auto_generated/cloud_blob_service"
require_relative "../converter/core_converter"
require_relative "../converter/blob_converter"
require_relative "../infrastructure/logging_aspect"

module Azure::Storage::Stress
  module Handler
    class CloudBlobHandler < CloudBlobBaseHandler
      def deleteBlob(requestInfo, accountInfo, deleteIfExists, isPermanentDelete, deleteSnapshotsOption)
        # ==== Build Client ==== #
        internalRequestInfo = XSS::Utilities::get_default_request_info
        blobClient = self.build_client(internalRequestInfo, accountInfo)
        # ==== Construct Parameters ==== #
        blobName = requestInfo.blobName
        containerName = requestInfo.containerName
        options = XSS::Converter::CoreConverter::getRequestOptions(requestInfo.thriftRequestOptions)
        options.merge! XSS::Converter::CoreConverter::getAccessConditionOptions(requestInfo.thriftAccessCondition)
        options.merge! XSS::Converter::CoreConverter::getOperationContextOptions(requestInfo.thriftOperationContext)
        options[:snapshot] = requestInfo.snapshotTime unless requestInfo.snapshotTime.nil?
        options[:delete_snapshots] = deleteSnapshotsOption
        # ==== Operation ==== #
        blobClient.delete_blob(containerName, blobName, options)
        # ==== Construct Return Value ==== #
        # Return true if successful deleted
        true
      end

      def exists(requestInfo, accountInfo)
        exists = true
        # ==== Build Client ==== #
        internalRequestInfo = XSS::Utilities::get_default_request_info
        blobClient = self.build_client(internalRequestInfo, accountInfo)
        # ==== Construct Parameters ==== #
        blobName = requestInfo.blobName
        containerName = requestInfo.containerName
        options = XSS::Converter::CoreConverter::getRequestOptions(requestInfo.thriftRequestOptions)
        options.merge! XSS::Converter::CoreConverter::getAccessConditionOptions(requestInfo.thriftAccessCondition)
        options.merge! XSS::Converter::CoreConverter::getOperationContextOptions(requestInfo.thriftOperationContext)
        # ==== Operation ==== #
        begin
          LoggingAspect::logger.info("Fetching blob attributes #{containerName}\\#{blobName}")
          LoggingAspect::logger.debug("'options' is #{options.to_s}")
          result = blobClient.get_blob_properties(containerName, blobName, options)
        rescue Azure::Core::Http::HTTPError => e
          if e.description.include? XSS::Constants::ERROR_BLOB_NOT_EXIST
            exists = false
          else
            raise e
          end
        end
        # ==== Construct Return Value ==== #
        result = XSS::AutoGenerated::BlobExistsResponse.new
        result.exists = exists
        result.response = XSS::Converter::BlobConverter::buildCloudBlobResponseFromInternalRequestInfo(internalRequestInfo) if exists
        result
      end


      def setMetadata(requestInfo, accountInfo, metadata)
        # ==== Build Client ==== #
        internalRequestInfo = XSS::Utilities::get_default_request_info
        blobClient = self.build_client(internalRequestInfo, accountInfo)
        # ==== Construct Parameters ==== #
        blobName = requestInfo.blobName
        containerName = requestInfo.containerName
        options = XSS::Converter::CoreConverter::getRequestOptions(requestInfo.thriftRequestOptions)
        options.merge! XSS::Converter::CoreConverter::getAccessConditionOptions(requestInfo.thriftAccessCondition)
        options.merge! XSS::Converter::CoreConverter::getOperationContextOptions(requestInfo.thriftOperationContext)
        # ==== Operation ==== #
        result = blobClient.get_blob_properties(containerName, blobName, options)
        # ==== Construct Return Value ==== #
        XSS::Converter::BlobConverter::buildCloudBlobResponseFromInternalRequestInfo(internalRequestInfo)
      end



      def setProperties(requestInfo, accountInfo, properties)
        # ==== Build Client ==== #
        internalRequestInfo = XSS::Utilities::get_default_request_info
        blobClient = self.build_client(internalRequestInfo, accountInfo)
        # ==== Construct Parameters ==== #
        # ==== Operation ==== #
        # ==== Construct Return Value ==== #
      end



      def fetchAttributes(requestInfo, accountInfo)
        # ==== Build Client ==== #
        internalRequestInfo = XSS::Utilities::get_default_request_info
        blobClient = self.build_client(internalRequestInfo, accountInfo)
        # ==== Construct Parameters ==== #
        blobName = requestInfo.blobName
        containerName = requestInfo.containerName
        options = XSS::Converter::CoreConverter::getRequestOptions(requestInfo.thriftRequestOptions)
        options.merge! XSS::Converter::CoreConverter::getAccessConditionOptions(requestInfo.thriftAccessCondition)
        options.merge! XSS::Converter::CoreConverter::getOperationContextOptions(requestInfo.thriftOperationContext)
        # ==== Operation ==== #
        result = blobClient.get_blob_properties(containerName, blobName, options)
        # ==== Construct Return Value ==== #
        XSS::Converter::BlobConverter::buildCloudBlobResponseFromInternalRequestInfo(internalRequestInfo)
      end



      def downloadToStream(requestInfo, accountInfo)
        # ==== Build Client ==== #
        internalRequestInfo = XSS::Utilities::get_default_request_info
        blobClient = self.build_client(internalRequestInfo, accountInfo)
        # ==== Construct Parameters ==== #
        blobName = requestInfo.blobName
        containerName = requestInfo.containerName
        options = XSS::Converter::CoreConverter::getRequestOptions(requestInfo.thriftRequestOptions)
        options.merge! XSS::Converter::CoreConverter::getAccessConditionOptions(requestInfo.thriftAccessCondition)
        options.merge! XSS::Converter::CoreConverter::getOperationContextOptions(requestInfo.thriftOperationContext)
        # ==== Operation ==== #
        result = blobClient.get_blob_properties(containerName, blobName, options)
        # ==== Construct Return Value ==== #
        XSS::Converter::BlobConverter::buildCloudBlobResponseFromInternalRequestInfo(internalRequestInfo)
      end



      def downloadRangeToStream(requestInfo, accountInfo, offset, length)
        # ==== Build Client ==== #
        internalRequestInfo = XSS::Utilities::get_default_request_info
        blobClient = self.build_client(internalRequestInfo, accountInfo)
        # ==== Construct Parameters ==== #
        blobName = requestInfo.blobName
        containerName = requestInfo.containerName
        options = XSS::Converter::CoreConverter::getRequestOptions(requestInfo.thriftRequestOptions)
        options.merge! XSS::Converter::CoreConverter::getAccessConditionOptions(requestInfo.thriftAccessCondition)
        options.merge! XSS::Converter::CoreConverter::getOperationContextOptions(requestInfo.thriftOperationContext)
        # ==== Operation ==== #
        result = blobClient.get_blob_properties(containerName, blobName, options)
        # ==== Construct Return Value ==== #
        XSS::Converter::BlobConverter::buildCloudBlobResponseFromInternalRequestInfo(internalRequestInfo)
      end


      def downloadToByteArray(requestInfo, accountInfo, targetSize, index)
        # ==== Build Client ==== #
        internalRequestInfo = XSS::Utilities::get_default_request_info
        blobClient = self.build_client(internalRequestInfo, accountInfo)
        # ==== Construct Parameters ==== #
        blobName = requestInfo.blobName
        containerName = requestInfo.containerName
        options = XSS::Converter::CoreConverter::getRequestOptions(requestInfo.thriftRequestOptions)
        options.merge! XSS::Converter::CoreConverter::getAccessConditionOptions(requestInfo.thriftAccessCondition)
        options.merge! XSS::Converter::CoreConverter::getOperationContextOptions(requestInfo.thriftOperationContext)
        # ==== Operation ==== #
        result = blobClient.get_blob_properties(containerName, blobName, options)
        # ==== Construct Return Value ==== #
        XSS::Converter::BlobConverter::buildCloudBlobResponseFromInternalRequestInfo(internalRequestInfo)
      end



      def downloadRangeToByteArray(requestInfo, accountInfo, targetSize, index, offset, length)
        # ==== Build Client ==== #
        internalRequestInfo = XSS::Utilities::get_default_request_info
        blobClient = self.build_client(internalRequestInfo, accountInfo)
        # ==== Construct Parameters ==== #
        blobName = requestInfo.blobName
        containerName = requestInfo.containerName
        options = XSS::Converter::CoreConverter::getRequestOptions(requestInfo.thriftRequestOptions)
        options.merge! XSS::Converter::CoreConverter::getAccessConditionOptions(requestInfo.thriftAccessCondition)
        options.merge! XSS::Converter::CoreConverter::getOperationContextOptions(requestInfo.thriftOperationContext)
        # ==== Operation ==== #
        result = blobClient.get_blob_properties(containerName, blobName, options)
        # ==== Construct Return Value ==== #
        XSS::Converter::BlobConverter::buildCloudBlobResponseFromInternalRequestInfo(internalRequestInfo)
      end



      def uploadFromByteArray(requestInfo, accountInfo, buffer, index, count)
        # ==== Build Client ==== #
        internalRequestInfo = XSS::Utilities::get_default_request_info
        blobClient = self.build_client(internalRequestInfo, accountInfo)
        # ==== Construct Parameters ==== #
        blobName = requestInfo.blobName
        containerName = requestInfo.containerName
        options = XSS::Converter::CoreConverter::getRequestOptions(requestInfo.thriftRequestOptions)
        options.merge! XSS::Converter::CoreConverter::getAccessConditionOptions(requestInfo.thriftAccessCondition)
        options.merge! XSS::Converter::CoreConverter::getOperationContextOptions(requestInfo.thriftOperationContext)
        # ==== Operation ==== #
        result = blobClient.get_blob_properties(containerName, blobName, options)
        # ==== Construct Return Value ==== #
        XSS::Converter::BlobConverter::buildCloudBlobResponseFromInternalRequestInfo(internalRequestInfo)
      end



      def downloadToFile(requestInfo, accountInfo, path, fileMode)
        # ==== Build Client ==== #
        internalRequestInfo = XSS::Utilities::get_default_request_info
        blobClient = self.build_client(internalRequestInfo, accountInfo)
        # ==== Construct Parameters ==== #
        blobName = requestInfo.blobName
        containerName = requestInfo.containerName
        options = XSS::Converter::CoreConverter::getRequestOptions(requestInfo.thriftRequestOptions)
        options.merge! XSS::Converter::CoreConverter::getAccessConditionOptions(requestInfo.thriftAccessCondition)
        options.merge! XSS::Converter::CoreConverter::getOperationContextOptions(requestInfo.thriftOperationContext)
        # ==== Operation ==== #
        result = blobClient.get_blob_properties(containerName, blobName, options)
        # ==== Construct Return Value ==== #
        XSS::Converter::BlobConverter::buildCloudBlobResponseFromInternalRequestInfo(internalRequestInfo)
      end



      def acquireLease(requestInfo, accountInfo, leaseTime, proposedLeaseId)
        # ==== Build Client ==== #
        internalRequestInfo = XSS::Utilities::get_default_request_info
        blobClient = self.build_client(internalRequestInfo, accountInfo)
        # ==== Construct Parameters ==== #
        blobName = requestInfo.blobName
        containerName = requestInfo.containerName
        options = XSS::Converter::CoreConverter::getRequestOptions(requestInfo.thriftRequestOptions)
        options.merge! XSS::Converter::CoreConverter::getAccessConditionOptions(requestInfo.thriftAccessCondition)
        options.merge! XSS::Converter::CoreConverter::getOperationContextOptions(requestInfo.thriftOperationContext)
        # ==== Operation ==== #
        result = blobClient.get_blob_properties(containerName, blobName, options)
        # ==== Construct Return Value ==== #
        XSS::Converter::BlobConverter::buildCloudBlobResponseFromInternalRequestInfo(internalRequestInfo)
      end



      def breakLease(requestInfo, accountInfo, breakPeriod)
        # ==== Build Client ==== #
        internalRequestInfo = XSS::Utilities::get_default_request_info
        blobClient = self.build_client(internalRequestInfo, accountInfo)
        # ==== Construct Parameters ==== #
        blobName = requestInfo.blobName
        containerName = requestInfo.containerName
        options = XSS::Converter::CoreConverter::getRequestOptions(requestInfo.thriftRequestOptions)
        options.merge! XSS::Converter::CoreConverter::getAccessConditionOptions(requestInfo.thriftAccessCondition)
        options.merge! XSS::Converter::CoreConverter::getOperationContextOptions(requestInfo.thriftOperationContext)
        # ==== Operation ==== #
        result = blobClient.get_blob_properties(containerName, blobName, options)
        # ==== Construct Return Value ==== #
        XSS::Converter::BlobConverter::buildCloudBlobResponseFromInternalRequestInfo(internalRequestInfo)
      end



      def changeLease(requestInfo, accountInfo, proposedLeaseId)
        # ==== Build Client ==== #
        internalRequestInfo = XSS::Utilities::get_default_request_info
        blobClient = self.build_client(internalRequestInfo, accountInfo)
        # ==== Construct Parameters ==== #
        blobName = requestInfo.blobName
        containerName = requestInfo.containerName
        options = XSS::Converter::CoreConverter::getRequestOptions(requestInfo.thriftRequestOptions)
        options.merge! XSS::Converter::CoreConverter::getAccessConditionOptions(requestInfo.thriftAccessCondition)
        options.merge! XSS::Converter::CoreConverter::getOperationContextOptions(requestInfo.thriftOperationContext)
        # ==== Operation ==== #
        result = blobClient.get_blob_properties(containerName, blobName, options)
        # ==== Construct Return Value ==== #
        XSS::Converter::BlobConverter::buildCloudBlobResponseFromInternalRequestInfo(internalRequestInfo)
      end



      def releaseLease(requestInfo, accountInfo)
        # ==== Build Client ==== #
        internalRequestInfo = XSS::Utilities::get_default_request_info
        blobClient = self.build_client(internalRequestInfo, accountInfo)
        # ==== Construct Parameters ==== #
        blobName = requestInfo.blobName
        containerName = requestInfo.containerName
        options = XSS::Converter::CoreConverter::getRequestOptions(requestInfo.thriftRequestOptions)
        options.merge! XSS::Converter::CoreConverter::getAccessConditionOptions(requestInfo.thriftAccessCondition)
        options.merge! XSS::Converter::CoreConverter::getOperationContextOptions(requestInfo.thriftOperationContext)
        # ==== Operation ==== #
        result = blobClient.get_blob_properties(containerName, blobName, options)
        # ==== Construct Return Value ==== #
        XSS::Converter::BlobConverter::buildCloudBlobResponseFromInternalRequestInfo(internalRequestInfo)
      end


      def renewLease(requestInfo, accountInfo)
        # ==== Build Client ==== #
        internalRequestInfo = XSS::Utilities::get_default_request_info
        blobClient = self.build_client(internalRequestInfo, accountInfo)
        # ==== Construct Parameters ==== #
        blobName = requestInfo.blobName
        containerName = requestInfo.containerName
        options = XSS::Converter::CoreConverter::getRequestOptions(requestInfo.thriftRequestOptions)
        options.merge! XSS::Converter::CoreConverter::getAccessConditionOptions(requestInfo.thriftAccessCondition)
        options.merge! XSS::Converter::CoreConverter::getOperationContextOptions(requestInfo.thriftOperationContext)
        # ==== Operation ==== #
        result = blobClient.get_blob_properties(containerName, blobName, options)
        # ==== Construct Return Value ==== #
        XSS::Converter::BlobConverter::buildCloudBlobResponseFromInternalRequestInfo(internalRequestInfo)
      end



      def startCopyFromBlob(requestInfo, accountInfo, uri)
        # ==== Build Client ==== #
        internalRequestInfo = XSS::Utilities::get_default_request_info
        blobClient = self.build_client(internalRequestInfo, accountInfo)
        # ==== Construct Parameters ==== #
        blobName = requestInfo.blobName
        containerName = requestInfo.containerName
        options = XSS::Converter::CoreConverter::getRequestOptions(requestInfo.thriftRequestOptions)
        options.merge! XSS::Converter::CoreConverter::getAccessConditionOptions(requestInfo.thriftAccessCondition)
        options.merge! XSS::Converter::CoreConverter::getOperationContextOptions(requestInfo.thriftOperationContext)
        # ==== Operation ==== #
        result = blobClient.get_blob_properties(containerName, blobName, options)
        # ==== Construct Return Value ==== #
        XSS::Converter::BlobConverter::buildCloudBlobResponseFromInternalRequestInfo(internalRequestInfo)
      end



      def abortCopy(requestInfo, accountInfo, copyId)
        # ==== Build Client ==== #
        internalRequestInfo = XSS::Utilities::get_default_request_info
        blobClient = self.build_client(internalRequestInfo, accountInfo)
        # ==== Construct Parameters ==== #
        blobName = requestInfo.blobName
        containerName = requestInfo.containerName
        options = XSS::Converter::CoreConverter::getRequestOptions(requestInfo.thriftRequestOptions)
        options.merge! XSS::Converter::CoreConverter::getAccessConditionOptions(requestInfo.thriftAccessCondition)
        options.merge! XSS::Converter::CoreConverter::getOperationContextOptions(requestInfo.thriftOperationContext)
        # ==== Operation ==== #
        result = blobClient.get_blob_properties(containerName, blobName, options)
        # ==== Construct Return Value ==== #
        XSS::Converter::BlobConverter::buildCloudBlobResponseFromInternalRequestInfo(internalRequestInfo)
      end



      def createSnapshot(requestInfo, accountInfo, metadata)
        # ==== Build Client ==== #
        internalRequestInfo = XSS::Utilities::get_default_request_info
        blobClient = self.build_client(internalRequestInfo, accountInfo)
        # ==== Construct Parameters ==== #
        blobName = requestInfo.blobName
        containerName = requestInfo.containerName
        options = XSS::Converter::CoreConverter::getRequestOptions(requestInfo.thriftRequestOptions)
        options.merge! XSS::Converter::CoreConverter::getAccessConditionOptions(requestInfo.thriftAccessCondition)
        options.merge! XSS::Converter::CoreConverter::getOperationContextOptions(requestInfo.thriftOperationContext)
        # ==== Operation ==== #
        result = blobClient.get_blob_properties(containerName, blobName, options)
        # ==== Construct Return Value ==== #
        XSS::Converter::BlobConverter::buildCloudBlobResponseFromInternalRequestInfo(internalRequestInfo)
      end



      def undelete(requestInfo, accountInfo)
        # ==== Build Client ==== #
        internalRequestInfo = XSS::Utilities::get_default_request_info
        blobClient = self.build_client(internalRequestInfo, accountInfo)
        # ==== Construct Parameters ==== #
        blobName = requestInfo.blobName
        containerName = requestInfo.containerName
        options = XSS::Converter::CoreConverter::getRequestOptions(requestInfo.thriftRequestOptions)
        options.merge! XSS::Converter::CoreConverter::getAccessConditionOptions(requestInfo.thriftAccessCondition)
        options.merge! XSS::Converter::CoreConverter::getOperationContextOptions(requestInfo.thriftOperationContext)
        # ==== Operation ==== #
        result = blobClient.get_blob_properties(containerName, blobName, options)
        # ==== Construct Return Value ==== #
        XSS::Converter::BlobConverter::buildCloudBlobResponseFromInternalRequestInfo(internalRequestInfo)
      end
    end
  end
end
