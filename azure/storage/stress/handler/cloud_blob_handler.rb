require_relative "base_handler"
require_relative "cloud_blob_base_handler"
require_relative "../utils"
require_relative "../auto_generated/cloud_blob_service"
require_relative "../converter/core_converter"
require_relative "../converter/blob_converter"
require_relative "../infrastructure/logging_aspect"

module Azure::Storage::Stress
  module Handler
    class CloudBlobHandler < CloudBlobBaseHandler
      def deleteBlob(requestInfo, accountInfo, deleteIfExists, isPermanentDelete, deleteSnapshotsOption)
        # ==== Build Client ==== #
        internalRequestInfo = XSS::Utilities::get_default_request_info
        blobClient = self.build_client(internalRequestInfo, accountInfo)
        # ==== Construct Parameters ==== #
        blobName = requestInfo.blobName
        containerName = requestInfo.containerName
        options = XSS::Converter::CoreConverter::getRequestOptions(requestInfo.thriftRequestOptions)
        options.merge! XSS::Converter::CoreConverter::getAccessConditionOptions(requestInfo.thriftAccessCondition)
        options.merge! XSS::Converter::CoreConverter::getOperationContextOptions(requestInfo.thriftOperationContext)
        options[:snapshot] = requestInfo.snapshotTime unless requestInfo.snapshotTime.nil?
        options[:delete_snapshots] = XSS::Converter::BlobConverter::getDeleteSnapshotsFromDeleteSnapshotsOption(deleteSnapshotsOption)
        # ==== Operation ==== #
        LoggingAspect::info("Deleting blob #{containerName}\\#{blobName}")
        LoggingAspect::debug("'options' is #{options.to_s}")
        begin
          blobClient.delete_blob(containerName, blobName, options)
        rescue Azure::Core::Http::HTTPError => e
          unless deleteIfExists && e.description.include?(XSS::Constants::ERROR_BLOB_NOT_EXIST)
            raise e
          end
        end
        # ==== Construct Return Value ==== #
        LoggingAspect::info("Deleting blob #{containerName}\\#{blobName} successful")
        # ==== Construct Return Value ==== #
        # Return true if successful deleted
        true
      end

      def exists(requestInfo, accountInfo)
        exists = true
        # ==== Build Client ==== #
        internalRequestInfo = XSS::Utilities::get_default_request_info
        blobClient = self.build_client(internalRequestInfo, accountInfo)
        # ==== Construct Parameters ==== #
        blobName = requestInfo.blobName
        containerName = requestInfo.containerName
        options = XSS::Converter::CoreConverter::getRequestOptions(requestInfo.thriftRequestOptions)
        options.merge! XSS::Converter::CoreConverter::getAccessConditionOptions(requestInfo.thriftAccessCondition)
        options.merge! XSS::Converter::CoreConverter::getOperationContextOptions(requestInfo.thriftOperationContext)
        # ==== Operation ==== #
        begin
          LoggingAspect::info("Fetching blob attributes #{containerName}\\#{blobName}")
          LoggingAspect::debug("'options' is #{options.to_s}")
          result = blobClient.get_blob_properties(containerName, blobName, options)
        rescue Azure::Core::Http::HTTPError => e
          if e.description.include? XSS::Constants::ERROR_BLOB_NOT_EXIST
            exists = false
          else
            raise e
          end
        end
        # ==== Construct Return Value ==== #
        result = XSS::AutoGenerated::BlobExistsResponse.new
        result.exists = exists
        result.response = XSS::Converter::BlobConverter::buildCloudBlobResponseFromInternalRequestInfo(internalRequestInfo) if exists
        result
      end

      def setMetadata(requestInfo, accountInfo, metadata)
        # ==== Build Client ==== #
        internalRequestInfo = XSS::Utilities::get_default_request_info
        blobClient = self.build_client(internalRequestInfo, accountInfo)
        # ==== Construct Parameters ==== #
        blobName = requestInfo.blobName
        containerName = requestInfo.containerName
        options = XSS::Converter::CoreConverter::getRequestOptions(requestInfo.thriftRequestOptions)
        options.merge! XSS::Converter::CoreConverter::getAccessConditionOptions(requestInfo.thriftAccessCondition)
        options.merge! XSS::Converter::CoreConverter::getOperationContextOptions(requestInfo.thriftOperationContext)
        # ==== Operation ==== #
        LoggingAspect::info("Setting metadata for blob #{containerName}\\#{blobName}")
        LoggingAspect::debug("'options' is #{options.to_s}")
        LoggingAspect::debug("'metadata' is #{metadata.to_s}")
        result = blobClient.set_blob_metadata(containerName, blobName, metadata, options)
        # ==== Construct Return Value ==== #
        LoggingAspect::info("Setting metadata for blob #{containerName}\\#{blobName} successful")
        XSS::Converter::BlobConverter::buildCloudBlobResponseFromInternalRequestInfo(internalRequestInfo)
      end

      def setProperties(requestInfo, accountInfo, properties)
        # ==== Build Client ==== #
        internalRequestInfo = XSS::Utilities::get_default_request_info
        blobClient = self.build_client(internalRequestInfo, accountInfo)
        # ==== Construct Parameters ==== #
        blobName = requestInfo.blobName
        containerName = requestInfo.containerName
        options = XSS::Converter::CoreConverter::getRequestOptions(requestInfo.thriftRequestOptions)
        options.merge! XSS::Converter::CoreConverter::getAccessConditionOptions(requestInfo.thriftAccessCondition)
        options.merge! XSS::Converter::CoreConverter::getOperationContextOptions(requestInfo.thriftOperationContext)
        XSS::Converter::BlobConverter::addPropertiesToOptions(properties, options)
        # ==== Operation ==== #
        LoggingAspect::info("Setting properties for blob #{containerName}\\#{blobName}")
        LoggingAspect::debug("'options' is #{options.to_s}")
        result = blobClient.set_blob_properties(containerName, blobName, options)
        # ==== Construct Return Value ==== #
        LoggingAspect::info("Setting properties for blob #{containerName}\\#{blobName} successful")
        r = properties.clone
        XSS::Converter::BlobConverter::updateCloudBlobResponseFromInternalRequestInfo(r, internalRequestInfo)
        r
      end

      def fetchAttributes(requestInfo, accountInfo)
        # ==== Build Client ==== #
        internalRequestInfo = XSS::Utilities::get_default_request_info
        blobClient = self.build_client(internalRequestInfo, accountInfo)
        # ==== Construct Parameters ==== #
        blobName = requestInfo.blobName
        containerName = requestInfo.containerName
        options = XSS::Converter::CoreConverter::getRequestOptions(requestInfo.thriftRequestOptions)
        options.merge! XSS::Converter::CoreConverter::getAccessConditionOptions(requestInfo.thriftAccessCondition)
        options.merge! XSS::Converter::CoreConverter::getOperationContextOptions(requestInfo.thriftOperationContext)
        # ==== Operation ==== #
        LoggingAspect::info("Getting properties for blob #{containerName}\\#{blobName}")
        LoggingAspect::debug("'options' is #{options.to_s}")
        result = blobClient.get_blob_properties(containerName, blobName, options)
        # ==== Construct Return Value ==== #
        LoggingAspect::info("Getting properties for blob #{containerName}\\#{blobName} successful")
        XSS::Converter::BlobConverter::buildCloudBlobResponseFromInternalRequestInfo(internalRequestInfo)
      end

      def downloadToStream(requestInfo, accountInfo)
        # ==== Build Client ==== #
        internalRequestInfo = XSS::Utilities::get_default_request_info
        blobClient = self.build_client(internalRequestInfo, accountInfo)
        # ==== Construct Parameters ==== #
        blobName = requestInfo.blobName
        containerName = requestInfo.containerName
        options = XSS::Converter::CoreConverter::getRequestOptions(requestInfo.thriftRequestOptions)
        options.merge! XSS::Converter::CoreConverter::getAccessConditionOptions(requestInfo.thriftAccessCondition)
        options.merge! XSS::Converter::CoreConverter::getOperationContextOptions(requestInfo.thriftOperationContext)
        # ==== Operation ==== #
        LoggingAspect::info("Getting blob #{containerName}\\#{blobName}")
        LoggingAspect::debug("'options' is #{options.to_s}")
        result, body = blobClient.get_blob(containerName, blobName, options)
        # ==== Construct Return Value ==== #
        LoggingAspect::info("Getting blob #{containerName}\\#{blobName} successful")
        # ==== Construct Return Value ==== #
        r = XSS::AutoGenerated::BlobDownloadToByteArrayResponse.new
        r.bytesRead = body.size
        r.target = body
        r.response = XSS::Converter::BlobConverter::buildCloudBlobResponseFromInternalRequestInfo(internalRequestInfo)
        r
      end

      def downloadRangeToStream(requestInfo, accountInfo, offset, length)
        # ==== Build Client ==== #
        internalRequestInfo = XSS::Utilities::get_default_request_info
        blobClient = self.build_client(internalRequestInfo, accountInfo)
        # ==== Construct Parameters ==== #
        blobName = requestInfo.blobName
        containerName = requestInfo.containerName
        options = XSS::Converter::CoreConverter::getRequestOptions(requestInfo.thriftRequestOptions)
        options.merge! XSS::Converter::CoreConverter::getAccessConditionOptions(requestInfo.thriftAccessCondition)
        options.merge! XSS::Converter::CoreConverter::getOperationContextOptions(requestInfo.thriftOperationContext)
        options[:start_range] = offset
        options[:end_range] = length + offset
        # ==== Operation ==== #
        LoggingAspect::info("Getting blob #{containerName}\\#{blobName}")
        LoggingAspect::debug("'options' is #{options.to_s}")
        result = blobClient.get_blob(containerName, blobName, options)
        # ==== Construct Return Value ==== #
        LoggingAspect::info("Getting blob #{containerName}\\#{blobName} successful")
        # ==== Construct Return Value ==== #
        r = XSS::AutoGenerated::BlobDownloadToByteArrayResponse.new
        r.bytesRead = result[1].size
        r.target = result[1]
        r.response = XSS::Converter::BlobConverter::buildCloudBlobResponseFromInternalRequestInfo(internalRequestInfo)
        r
      end

      def downloadToByteArray(requestInfo, accountInfo, targetSize, index)
        # ==== Build Client ==== #
        internalRequestInfo = XSS::Utilities::get_default_request_info
        blobClient = self.build_client(internalRequestInfo, accountInfo)
        # ==== Construct Parameters ==== #
        blobName = requestInfo.blobName
        containerName = requestInfo.containerName
        options = XSS::Converter::CoreConverter::getRequestOptions(requestInfo.thriftRequestOptions)
        options.merge! XSS::Converter::CoreConverter::getAccessConditionOptions(requestInfo.thriftAccessCondition)
        options.merge! XSS::Converter::CoreConverter::getOperationContextOptions(requestInfo.thriftOperationContext)
        # ==== Operation ==== #
        LoggingAspect::info("Getting blob #{containerName}\\#{blobName}")
        LoggingAspect::debug("'options' is #{options.to_s}")
        result = blobClient.get_blob(containerName, blobName, options)
        # ==== Construct Return Value ==== #
        LoggingAspect::info("Getting blob #{containerName}\\#{blobName} successful")
        # ==== Construct Return Value ==== #
        r = XSS::AutoGenerated::BlobDownloadToByteArrayResponse.new
        r.bytesRead = result[1].size
        r.target = result[1]
        r.response = XSS::Converter::BlobConverter::buildCloudBlobResponseFromInternalRequestInfo(internalRequestInfo)
        r
      end

      def downloadRangeToByteArray(requestInfo, accountInfo, targetSize, index, offset, length)
        # ==== Build Client ==== #
        internalRequestInfo = XSS::Utilities::get_default_request_info
        blobClient = self.build_client(internalRequestInfo, accountInfo)
        # ==== Construct Parameters ==== #
        blobName = requestInfo.blobName
        containerName = requestInfo.containerName
        options = XSS::Converter::CoreConverter::getRequestOptions(requestInfo.thriftRequestOptions)
        options.merge! XSS::Converter::CoreConverter::getAccessConditionOptions(requestInfo.thriftAccessCondition)
        options.merge! XSS::Converter::CoreConverter::getOperationContextOptions(requestInfo.thriftOperationContext)
        options[:start_range] = offset
        options[:end_range] = length + offset
        # ==== Operation ==== #
        LoggingAspect::info("Getting blob #{containerName}\\#{blobName}")
        LoggingAspect::debug("'options' is #{options.to_s}")
        result = blobClient.get_blob(containerName, blobName, options)
        # ==== Construct Return Value ==== #
        LoggingAspect::info("Getting blob #{containerName}\\#{blobName} successful")
        # ==== Construct Return Value ==== #
        r = XSS::AutoGenerated::BlobDownloadToByteArrayResponse.new
        r.bytesRead = result[1].size
        r.target = result[1]
        r.response = XSS::Converter::BlobConverter::buildCloudBlobResponseFromInternalRequestInfo(internalRequestInfo)
        r
      end

      def uploadFromByteArray(requestInfo, accountInfo, buffer, index, count)
        raise ArgumentError, "Must be implemented by child class"
      end

      def acquireLease(requestInfo, accountInfo, leaseTime, proposedLeaseId)
        # ==== Build Client ==== #
        internalRequestInfo = XSS::Utilities::get_default_request_info
        blobClient = self.build_client(internalRequestInfo, accountInfo)
        # ==== Construct Parameters ==== #
        blobName = requestInfo.blobName
        containerName = requestInfo.containerName
        options = XSS::Converter::BlobConverter::getRequestOptions(requestInfo.thriftRequestOptions)
        options.merge! XSS::Converter::CoreConverter::getAccessConditionOptions(requestInfo.thriftAccessCondition)
        options.merge! XSS::Converter::CoreConverter::getOperationContextOptions(requestInfo.thriftOperationContext)
        options[:duration] = leaseTime
        options[:proposed_lease_id] = proposedLeaseId
        # ==== Operation ==== #
        LoggingAspect::info("Acquiring lease for blob #{containerName}\\#{blobName} with leaseTime #{leaseTime}, proposedLeaseId #{proposedLeaseId}")
        LoggingAspect::debug("'options' is #{options.to_s}")
        result = blobClient.acquire_blob_lease(containerName, blobName, options)
        # ==== Construct Return Value ==== #
        LoggingAspect::info("Acquiring lease for blob #{containerName}\\#{blobName} successful")
        r = XSS::AutoGenerated::BlobChangeAcquireLeaseResponse.new
        r.leaseId = result
        r.response = XSS::Converter::BlobConverter::buildCloudBlobResponseFromInternalRequestInfo(internalRequestInfo)
        r
      end

      def breakLease(requestInfo, accountInfo, breakPeriod)
        # ==== Build Client ==== #
        internalRequestInfo = XSS::Utilities::get_default_request_info
        blobClient = self.build_client(internalRequestInfo, accountInfo)
        # ==== Construct Parameters ==== #
        blobName = requestInfo.blobName
        containerName = requestInfo.containerName
        options = XSS::Converter::BlobConverter::getRequestOptions(requestInfo.thriftRequestOptions)
        options.merge! XSS::Converter::CoreConverter::getAccessConditionOptions(requestInfo.thriftAccessCondition)
        options.merge! XSS::Converter::CoreConverter::getOperationContextOptions(requestInfo.thriftOperationContext)
        options[:break_period] = breakPeriod
        # ==== Operation ==== #
        LoggingAspect::info("Breaking lease for blob #{containerName}\\#{blobName} with breakPeriod #{breakPeriod}")
        LoggingAspect::debug("'options' is #{options.to_s}")
        result = blobClient.break_blob_lease(containerName, blobName, options)
        # ==== Construct Return Value ==== #
        LoggingAspect::info("Breaking lease for blob #{containerName}\\#{blobName} successful")
        r = XSS::AutoGenerated::BlobBreakLeaseResponse.new
        r.remainingLeaseTimeinSeconds = result
        r.response = XSS::Converter::BlobConverter::buildCloudBlobResponseFromInternalRequestInfo(internalRequestInfo)
        r
      end

      def changeLease(requestInfo, accountInfo, proposedLeaseId)
        # ==== Build Client ==== #
        internalRequestInfo = XSS::Utilities::get_default_request_info
        blobClient = self.build_client(internalRequestInfo, accountInfo)
        # ==== Construct Parameters ==== #
        blobName = requestInfo.blobName
        containerName = requestInfo.containerName
        options = XSS::Converter::BlobConverter::getRequestOptions(requestInfo.thriftRequestOptions)
        options.merge! XSS::Converter::CoreConverter::getAccessConditionOptions(requestInfo.thriftAccessCondition)
        options.merge! XSS::Converter::CoreConverter::getOperationContextOptions(requestInfo.thriftOperationContext)
        lease = options[:lease_id]
        # ==== Operation ==== #
        LoggingAspect::info("Changing lease for blob #{containerName}\\#{blobName} with proposedLeaseId #{proposedLeaseId}")
        LoggingAspect::debug("'options' is #{options.to_s}")
        result = blobClient.change_blob_lease(containerName, blobName, lease, proposedLeaseId, options)
        # ==== Construct Return Value ==== #
        LoggingAspect::info("Changing lease for blob #{containerName}\\#{blobName} successful")
        r = XSS::AutoGenerated::BlobChangeAcquireLeaseResponse.new
        r.leaseId = result
        r.response = XSS::Converter::BlobConverter::buildCloudBlobResponseFromInternalRequestInfo(internalRequestInfo)
        r
      end

      def releaseLease(requestInfo, accountInfo)
        # ==== Build Client ==== #
        internalRequestInfo = XSS::Utilities::get_default_request_info
        blobClient = self.build_client(internalRequestInfo, accountInfo)
        # ==== Construct Parameters ==== #
        blobName = requestInfo.blobName
        containerName = requestInfo.containerName
        options = XSS::Converter::BlobConverter::getRequestOptions(requestInfo.thriftRequestOptions)
        options.merge! XSS::Converter::CoreConverter::getAccessConditionOptions(requestInfo.thriftAccessCondition)
        options.merge! XSS::Converter::CoreConverter::getOperationContextOptions(requestInfo.thriftOperationContext)
        lease = options[:lease_id]
        # ==== Operation ==== #
        LoggingAspect::info("Releasing lease for blob #{containerName}\\#{blobName}")
        LoggingAspect::debug("'options' is #{options.to_s}")
        result = blobClient.release_blob_lease(containerName, blobName, lease, options)
        # ==== Construct Return Value ==== #
        LoggingAspect::info("Releasing lease for blob #{containerName}\\#{blobName} successful")
        XSS::Converter::BlobConverter::buildCloudBlobResponseFromInternalRequestInfo(internalRequestInfo)
      end

      def renewLease(requestInfo, accountInfo)
        # ==== Build Client ==== #
        internalRequestInfo = XSS::Utilities::get_default_request_info
        blobClient = self.build_client(internalRequestInfo, accountInfo)
        # ==== Construct Parameters ==== #
        blobName = requestInfo.blobName
        containerName = requestInfo.containerName
        options = XSS::Converter::BlobConverter::getRequestOptions(requestInfo.thriftRequestOptions)
        options.merge! XSS::Converter::CoreConverter::getAccessConditionOptions(requestInfo.thriftAccessCondition)
        options.merge! XSS::Converter::CoreConverter::getOperationContextOptions(requestInfo.thriftOperationContext)
        lease = options[:lease_id]
        # ==== Operation ==== #
        LoggingAspect::info("Renewing lease for blob #{containerName}\\#{blobName}")
        LoggingAspect::debug("'options' is #{options.to_s}")
        result = blobClient.renew_container_lease(containerName, blobName, lease, options)
        # ==== Construct Return Value ==== #
        LoggingAspect::info("Renewing lease for blob #{containerName}\\#{blobName} successful")
        XSS::Converter::BlobConverter::buildCloudBlobResponseFromInternalRequestInfo(internalRequestInfo)
      end

      def startCopyFromBlob(requestInfo, accountInfo, uri)
        # ==== Build Client ==== #
        internalRequestInfo = XSS::Utilities::get_default_request_info
        blobClient = self.build_client(internalRequestInfo, accountInfo)
        # ==== Construct Parameters ==== #
        blobName = requestInfo.blobName
        containerName = requestInfo.containerName
        options = XSS::Converter::CoreConverter::getRequestOptions(requestInfo.thriftRequestOptions)
        options.merge! XSS::Converter::CoreConverter::getAccessConditionOptions(requestInfo.sourceThriftAccessCondition, "source_")
        options.merge! XSS::Converter::CoreConverter::getAccessConditionOptions(requestInfo.destThriftAccessCondition, "dest_")
        options.merge! XSS::Converter::CoreConverter::getOperationContextOptions(requestInfo.thriftOperationContext)
        uriStr = uri.primaryUri
        # ==== Operation ==== #
        LoggingAspect::info("Starting copy for blob #{containerName}\\#{blobName} from uri: #{uriStr}")
        LoggingAspect::debug("'options' is #{options.to_s}")
        result = blobClient.copy_blob_from_uri(containerName, blobName, uriStr, options)
        # ==== Construct Return Value ==== #
        LoggingAspect::info("Starting copy for blob #{containerName}\\#{blobName} successful")
        r = XSS::AutoGenerated::BlobStartCopyFromBlobResponse.new
        r.response = XSS::Converter::BlobConverter::buildCloudBlobResponseFromInternalRequestInfo(internalRequestInfo)
        r.copyID = result[0]
        r
      end

      def abortCopy(requestInfo, accountInfo, copyId)
        # ==== Build Client ==== #
        internalRequestInfo = XSS::Utilities::get_default_request_info
        blobClient = self.build_client(internalRequestInfo, accountInfo)
        # ==== Construct Parameters ==== #
        blobName = requestInfo.blobName
        containerName = requestInfo.containerName
        options = XSS::Converter::CoreConverter::getRequestOptions(requestInfo.thriftRequestOptions)
        options.merge! XSS::Converter::CoreConverter::getAccessConditionOptions(requestInfo.thriftAccessCondition)
        options.merge! XSS::Converter::CoreConverter::getOperationContextOptions(requestInfo.thriftOperationContext)
        # ==== Operation ==== #
        LoggingAspect::info("Aborting copy for blob #{containerName}\\#{blobName} with copyId: #{copyId}")
        LoggingAspect::debug("'options' is #{options.to_s}")
        result = blobClient.abort_copy_blob(containerName, blobName, copy_id, options)
        # ==== Construct Return Value ==== #
        LoggingAspect::info("Aborting copy for blob #{containerName}\\#{blobName} successful")
        XSS::Converter::BlobConverter::buildCloudBlobResponseFromInternalRequestInfo(internalRequestInfo)
      end

      def createSnapshot(requestInfo, accountInfo, metadata)
        # ==== Build Client ==== #
        internalRequestInfo = XSS::Utilities::get_default_request_info
        blobClient = self.build_client(internalRequestInfo, accountInfo)
        # ==== Construct Parameters ==== #
        blobName = requestInfo.blobName
        containerName = requestInfo.containerName
        options = XSS::Converter::CoreConverter::getRequestOptions(requestInfo.thriftRequestOptions)
        options.merge! XSS::Converter::CoreConverter::getAccessConditionOptions(requestInfo.thriftAccessCondition)
        options.merge! XSS::Converter::CoreConverter::getOperationContextOptions(requestInfo.thriftOperationContext)
        options[:metadata] = metadata unless metadata.nil?
        # ==== Operation ==== #
        LoggingAspect::info("Creating snapshot for blob #{containerName}\\#{blobName}")
        LoggingAspect::debug("'options' is #{options.to_s}")
        result = blobClient.create_blob_snapshot(containerName, blobName, options)
        # ==== Construct Return Value ==== #
        LoggingAspect::info("Creating snapshot for blob #{containerName}\\#{blobName} successful")
        # ==== Construct Return Value ==== #
        XSS::Converter::BlobConverter::buildCloudBlobResponseFromInternalRequestInfo(internalRequestInfo)
      end
    end
  end
end
