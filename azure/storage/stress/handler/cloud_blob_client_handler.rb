require_relative "base_handler"
require_relative "../utils"
require_relative "../auto_generated/cloud_blob_client_service"
require_relative "../converter/core_converter"
require_relative "../converter/blob_converter"
require_relative "../infrastructure/logging_aspect"


module Azure::Storage::Stress
  module Handler
    class CloudBlobClientHandler < CloudBlobBaseHandler
      def listBlobsSegmented(listBlobsPayload, accountInfo, maxResults, currentToken)
        raise ArgumentError, "Not supported"
      end

      def listBlobs(listBlobsPayload, accountInfo)
        raise ArgumentError, "Not supported"
      end

      def listContainers(listContainersPayload, accountInfo)
        # ==== Build Client ==== #
        internalRequestInfo = XSS::Utilities::get_default_request_info
        blobClient = self.build_client(internalRequestInfo, accountInfo)
        # ==== Construct Parameters ==== #
        reqInfo = listContainersPayload.thriftRequestOptions
        options = XSS::Converter::BlobConverter::getRequestOptions(listContainersPayload.thriftRequestOptions)
        options.merge! XSS::Converter::CoreConverter::getOperationContextOptions(listContainersPayload.thriftOperationContext)
        options.merge! XSS::Converter::BlobConverter::getListDetailOptionsFromBlobContainerListingDetails(listContainersPayload.containerListingDetails)
        options[:prefix] = listContainersPayload.prefix if listContainersPayload.prefix
        # options[:delimiter]?
        # TODO: useFlatBlobListing
        # ==== Operation ==== #
        r = XSS::AutoGenerated::ListContainersResponse.new
        r.containerList = []
        LoggingAspect::info("Listing containers")
        nextMarker = nil
        # Recursive list
        loop do
          options[:marker] = nextMarker if nextMarker
          LoggingAspect::debug("'options' is #{options.to_s}")
          result = blobClient.list_containers(options)
          # ==== Construct Return Value ==== #
          result.each { |container| r.containerList.push XSS::Converter::BlobConverter::buildCloudBlobContainerWithContainerAndClient(container, blobClient) }
          nextMarker = result.continuation_token
          break unless nextMarker && !nextMarker.empty?
        end
        LoggingAspect::info("Listing containers successful")
        r
      end

      def listContainersSegmented(listContainersPayload, accountInfo, maxResults, currentToken)
        # ==== Build Client ==== #
        internalRequestInfo = XSS::Utilities::get_default_request_info
        blobClient = self.build_client(internalRequestInfo, accountInfo)
        # ==== Construct Parameters ==== #
        reqInfo = listContainersPayload.thriftRequestOptions
        options = XSS::Converter::BlobConverter::getRequestOptions(listContainersPayload.thriftRequestOptions)
        options.merge! XSS::Converter::CoreConverter::getOperationContextOptions(listContainersPayload.thriftOperationContext)
        options.merge! XSS::Converter::BlobConverter::getListDetailOptionsFromBlobContainerListingDetails(listContainersPayload.containerListingDetails)
        options[:prefix] = listContainersPayload.prefix if listContainersPayload.prefix
        options[:max_results] = maxResults
        options[:marker] = currentToken.nextMarker
        options[:location_mode] = XSS::Converter::CoreConverter::getLocationModeFromStorageLocation(currentToken.targetLocation)
        # options[:delimiter]?
        # TODO: useFlatBlobListing, listingDetails
        # ==== Operation ==== #
        LoggingAspect::info("Listing containers segmented")
        LoggingAspect::debug("'options' is #{options.to_s}")
        result = blobClient.list_containers(options)
        # ==== Construct Return Value ==== #
        LoggingAspect::info("Listing containers successful")
        r = XSS::AutoGenerated::ListContainersResponse.new
        r.continuationToken = XSS::Converter::BlobConverter::getBlobContinuationToken(result.continuation_token, internalRequestInfo.uri)
        r.containerList = []
        result.each { |container| r.containerList.push XSS::Converter::BlobConverter::buildCloudBlobContainerWithContainerAndClient(container, blobClient) }
        r
      end

      def setProperties(thriftRequestOptions, accountInfo, thriftOperationContext, properties)
        # ==== Build Client ==== #
        internalRequestInfo = XSS::Utilities::get_default_request_info
        blobClient = self.build_client(internalRequestInfo, accountInfo)
        # ==== Construct Parameters ==== #
        options = XSS::Converter::CoreConverter.getRequestOptions(thriftRequestOptions)
        options.merge! XSS::Converter::CoreConverter::getOperationContextOptions(thriftOperationContext)
        serviceProperties = XSS::Converter::CoreConverter.convertThriftStorageServicePropertiesToServiceProperties(properties)
        # ==== Operation ==== #
        LoggingAspect::info("Setting service properties")
        LoggingAspect::debug("'options' is #{options.to_s}")
        blobClient.set_service_properties(serviceProperties, options)
        # ==== Construct Return Value ==== #
        LoggingAspect::info("Setting service properties successful")
        XSS::Converter::BlobConverter::buildBlobContainerResponseFromInternalRequestInfo(internalRequestInfo)
      end

      def getProperties(thriftRequestOptions, accountInfo, thriftOperationContext)
        # ==== Build Client ==== #
        internalRequestInfo = XSS::Utilities::get_default_request_info
        blobClient = self.build_client(internalRequestInfo, accountInfo)
        # ==== Construct Parameters ==== #
        options = XSS::Converter::CoreConverter.getRequestOptions(thriftRequestOptions)
        options.merge! XSS::Converter::CoreConverter::getOperationContextOptions(thriftOperationContext)
        # ==== Operation ==== #
        LoggingAspect::info("Getting service properties")
        LoggingAspect::debug("'options' is #{options.to_s}")
        result = blobClient.get_service_properties(options)
        # ==== Construct Return Value ==== #
        LoggingAspect::info("Getting service properties")
        # ==== Construct Return Value ==== #
        XSS::Converter::CoreConverter.convertServicePropertiesToThriftStorageServiceProperties(result)
      end

      def getServiceStats(thriftRequestOptions, accountInfo, thriftOperationContext)
        # ==== Build Client ==== #
        internalRequestInfo = XSS::Utilities::get_default_request_info
        blobClient = self.build_client(internalRequestInfo, accountInfo)
        # ==== Construct Parameters ==== #
        options = XSS::Converter::BlobConverter::getRequestOptions(thriftRequestOptions)
        options.merge! XSS::Converter::CoreConverter::getOperationContextOptions(thriftOperationContext)
        # ==== Operation ==== #
        LoggingAspect::info("Getting service status")
        LoggingAspect::debug("'options' is #{options.to_s}")
        result = blobClient.get_service_stats(options)
        # ==== Construct Return Value ==== #
        LoggingAspect::info("Getting service status successful")
        XSS::Converter::CoreConverter.convertGetServiceStatsResultToThriftServiceStats(result)
      end
    end
  end
end
