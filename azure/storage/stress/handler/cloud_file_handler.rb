require_relative "base_handler"
require_relative "../utils"
require_relative "../auto_generated/cloud_file_service"
require_relative "../converter/core_converter"
require_relative "../converter/file_converter"
require_relative "../infrastructure/logging_aspect"


module Azure::Storage::Stress
  module Handler
    class CloudFileHandler < CloudFileBaseHandler
      def create(accountInfo, filePath, size, accessCondition, fileRequestOptions, operationContext)
        # ==== Build Client ==== #
        @request_info = XSS::Utilities::get_default_request_info
        fileClient = self.build_client(@request_info, accountInfo)
        # ==== Construct Parameters ==== #
        shareName = filePath.shareName
        directoryName = filePath.directoryName
        fileName = filePath.fileName
        # content_types?
        options = XSS::Converter::FileConverter::getRequestOptions(fileRequestOptions)
        options.merge! XSS::Converter::CoreConverter::getOperationContextOptions(operationContext)
        options.merge! XSS::Converter::CoreConverter::getAccessConditionOptions(accessCondition)
        # ==== Operation ==== #
        LoggingAspect::logger.info("Create file #{shareName}/#{directoryName}/#{fileName} with #{size} size")
        LoggingAspect::logger.debug("'options' is #{options.to_s}")
        result = fileClient.create_file(shareName, directoryName, fileName, size, options)
        # ==== Construct Return Value ==== #
        LoggingAspect::logger.info("Create file #{shareName}/#{directoryName}/#{fileName} with #{size} size successful")
        XSS::Converter::FileConverter::buildCloudFileResponseFromInternalRequestInfo(@request_info)
      end

      def writeRange(accountInfo, filePath, version, length, startOffset, contentMd5, accessCondition, fileRequestOptions, operationContext)
        # ==== Build Client ==== #
        @request_info = XSS::Utilities::get_default_request_info
        fileClient = self.build_client(@request_info, accountInfo)
        # ==== Construct Parameters ==== #
        shareName = filePath.shareName
        directoryName = filePath.directoryName
        fileName = filePath.fileName
        options = XSS::Converter::FileConverter::getRequestOptions(fileRequestOptions)
        options.merge! XSS::Converter::CoreConverter::getOperationContextOptions(operationContext)
        options.merge! XSS::Converter::CoreConverter::getAccessConditionOptions(accessCondition)
        options[:transactional_md5] = contentMd5 if contentMd5
        content = XSS::Utilities::generateMT19937Payload(length, version)
        # ==== Operation ==== #
        LoggingAspect::logger.info("Write range to file #{shareName}/#{directoryName}/#{fileName} with #{length} length payload")
        LoggingAspect::logger.debug("'options' is #{options.to_s}")
        LoggingAspect::logger.debug("'startOffset' is #{startOffset.to_s}")
        LoggingAspect::logger.debug("'contentMd5' is #{contentMd5.to_s}")
        result = fileClient.put_file_range(shareName, directoryName, fileName, startOffset, startOffset + length - 1, content, options)
        # ==== Construct Return Value ==== #
        LoggingAspect::logger.info("Write range to file #{shareName}/#{directoryName}/#{fileName} with #{length} length payload successful")
        XSS::Converter::FileConverter::buildCloudFileResponseFromInternalRequestInfo(@request_info)
      end

      def deleteFile(accountInfo, filePath, deleteIfExists, accessCondition, fileRequestOptions, operationContext)
        # If file does not exist, return success
        r = XSS::AutoGenerated::DeleteFileResponse.new
        r.wasDeleted = true
        if deleteIfExists
          exists = self.exists(accountInfo, filePath, fileRequestOptions, operationContext)
          unless (exists.exists)
            r.cloudFileResponse = exists.cloudFileResponse
            return r
          end
        end
        # ==== Build Client ==== #
        @request_info = XSS::Utilities::get_default_request_info
        fileClient = self.build_client(@request_info, accountInfo)
        # ==== Construct Parameters ==== #
        shareName = filePath.shareName
        directoryName = filePath.directoryName
        fileName = filePath.fileName
        options = XSS::Converter::FileConverter::getRequestOptions(fileRequestOptions)
        options.merge! XSS::Converter::CoreConverter::getOperationContextOptions(operationContext)
        options.merge! XSS::Converter::CoreConverter::getAccessConditionOptions(accessCondition)
        # ==== Operation ==== #
        LoggingAspect::logger.info("Delete file #{shareName}/#{directoryName}/#{fileName}")
        LoggingAspect::logger.debug("'options' is #{options.to_s}")
        result = fileClient.delete_file(shareName, directoryName, fileName, options)
        # ==== Construct Return Value ==== #
        LoggingAspect::logger.info("Delete file #{shareName}/#{directoryName}/#{fileName} successful")
        r.cloudFileResponse = XSS::Converter::FileConverter::buildCloudFileResponseFromInternalRequestInfo(@request_info)
        r
      end

      def setMetadata(accountInfo, filePath, metadata, accessCondition, fileRequestOptions, operationContext)
        # ==== Build Client ==== #
        @request_info = XSS::Utilities::get_default_request_info
        fileClient = self.build_client(@request_info, accountInfo)
        # ==== Construct Parameters ==== #
        shareName = filePath.shareName
        directoryName = filePath.directoryName
        fileName = filePath.fileName
        options = XSS::Converter::FileConverter::getRequestOptions(fileRequestOptions)
        options.merge! XSS::Converter::CoreConverter::getOperationContextOptions(operationContext)
        options.merge! XSS::Converter::CoreConverter::getAccessConditionOptions(accessCondition)
        # ==== Operation ==== #
        LoggingAspect::logger.info("Set metadata to file #{shareName}/#{directoryName}/#{fileName}")
        LoggingAspect::logger.debug("'options' is #{options.to_s}")
        LoggingAspect::logger.debug("'metadata' is #{metadata.to_s}")
        result = fileClient.set_file_metadata(shareName, directoryName, fileName, metadata, options)
        # ==== Construct Return Value ==== #
        LoggingAspect::logger.info("Set metadata to file #{shareName}/#{directoryName}/#{fileName} successful")
        r = XSS::Converter::FileConverter::buildCloudFileResponseFromInternalRequestInfo(@request_info)
        r.metadata = metadata
        r
      end

      def setProperties(accountInfo, filePath, properties, accessCondition, fileRequestOptions, operationContext)
        # ==== Build Client ==== #
        @request_info = XSS::Utilities::get_default_request_info
        fileClient = self.build_client(@request_info, accountInfo)
        # ==== Construct Parameters ==== #
        shareName = filePath.shareName
        directoryName = filePath.directoryName
        fileName = filePath.fileName
        options = XSS::Converter::FileConverter::getRequestOptions(fileRequestOptions)
        options.merge! XSS::Converter::CoreConverter::getOperationContextOptions(operationContext)
        options.merge! XSS::Converter::CoreConverter::getAccessConditionOptions(accessCondition)
        XSS::Converter::FileConverter::addPropertiesToOptions(properties, options) # content-length?
        # ==== Operation ==== #
        LoggingAspect::logger.info("Set properties to file #{shareName}/#{directoryName}/#{fileName}")
        LoggingAspect::logger.debug("'options' is #{options.to_s}")
        result = fileClient.set_file_properties(shareName, directoryName, fileName, options)
        # ==== Construct Return Value ==== #
        LoggingAspect::logger.info("Set properties to file #{shareName}/#{directoryName}/#{fileName} successful")
        XSS::Converter::FileConverter::buildCloudFileResponseFromInternalRequestInfo(@request_info)
      end

      def fetchAttributes(accountInfo, filePath, accessCondition, fileRequestOptions, operationContext)
        # ==== Build Client ==== #
        @request_info = XSS::Utilities::get_default_request_info
        fileClient = self.build_client(@request_info, accountInfo)
        # ==== Construct Parameters ==== #
        shareName = filePath.shareName
        directoryName = filePath.directoryName
        fileName = filePath.fileName
        options = XSS::Converter::FileConverter::getRequestOptions(fileRequestOptions)
        options.merge! XSS::Converter::CoreConverter::getOperationContextOptions(operationContext)
        options.merge! XSS::Converter::CoreConverter::getAccessConditionOptions(accessCondition)
        # ==== Operation ==== #
        LoggingAspect::logger.info("Fetch attributes from file #{shareName}/#{directoryName}/#{fileName}")
        LoggingAspect::logger.debug("'options' is #{options.to_s}")
        result = fileClient.get_file_properties(shareName, directoryName, fileName, options)
        # ==== Construct Return Value ==== #
        LoggingAspect::logger.info("Fetch attributes from file #{shareName}/#{directoryName}/#{fileName} successful")
        XSS::Converter::FileConverter::buildCloudFileResponseFromInternalRequestInfo(@request_info)
      end

      def exists(accountInfo, filePath, fileRequestOptions, operationContext)
        exists = true
        # ==== Build Client ==== #
        @request_info = XSS::Utilities::get_default_request_info
        fileClient = self.build_client(@request_info, accountInfo)
        # ==== Construct Parameters ==== #
        shareName = filePath.shareName
        directoryName = filePath.directoryName
        fileName = filePath.fileName
        options = XSS::Converter::FileConverter::getRequestOptions(fileRequestOptions)
        options.merge! XSS::Converter::CoreConverter::getOperationContextOptions(operationContext)
        # ==== Operation ==== #
        begin
          LoggingAspect::logger.info("Fetching attributes from file #{shareName}/#{directoryName}/#{fileName}")
          LoggingAspect::logger.debug("'options' is #{options.to_s}")
          result = fileClient.get_file_properties(shareName, directoryName, fileName, options)
        rescue Azure::Core::Http::HTTPError => e
          if e.description.include?(XSS::Constants::ERROR_FILE_NOT_EXIST) || e.description.include?(XSS::Constants::ERROR_PATH_NOT_EXIST)
            LoggingAspect::info("File #{shareName}/#{directoryName}/#{fileName} does not exist")
            exists = false
          else
            raise e
          end
        end
        # ==== Construct Return Value ==== #
        r = XSS::AutoGenerated::ExistsFileResponse.new
        r.exists = exists
        r.cloudFileResponse = XSS::Converter::FileConverter::buildCloudFileResponseFromInternalRequestInfo(@request_info)
        r
      end

      def clearRange(accountInfo, filePath, offset, length, accessCondition, fileRequestOptions, operationContext)
        # ==== Build Client ==== #
        @request_info = XSS::Utilities::get_default_request_info
        fileClient = self.build_client(@request_info, accountInfo)
        # ==== Construct Parameters ==== #
        shareName = filePath.shareName
        directoryName = filePath.directoryName
        fileName = filePath.fileName
        options = XSS::Converter::FileConverter::getRequestOptions(fileRequestOptions)
        options.merge! XSS::Converter::CoreConverter::getOperationContextOptions(operationContext)
        options.merge! XSS::Converter::CoreConverter::getAccessConditionOptions(accessCondition)
        # ==== Operation ==== #
        LoggingAspect::logger.info("Clear range for file #{shareName}/#{directoryName}/#{fileName} start from #{offset} with length #{length}")
        LoggingAspect::logger.debug("'options' is #{options.to_s}")
        result = fileClient.clear_file_range(shareName, directoryName, fileName, offset, offset + length - 1, options)
        # ==== Construct Return Value ==== #
        LoggingAspect::logger.info("Clear range for file #{shareName}/#{directoryName}/#{fileName} start from #{offset} with length #{length} successful")
        XSS::Converter::FileConverter::buildCloudFileResponseFromInternalRequestInfo(@request_info)
      end

      def resize(accountInfo, filePath, size, accessCondition, fileRequestOptions, operationContext)
        # ==== Build Client ==== #
        @request_info = XSS::Utilities::get_default_request_info
        fileClient = self.build_client(@request_info, accountInfo)
        # ==== Construct Parameters ==== #
        shareName = filePath.shareName
        directoryName = filePath.directoryName
        fileName = filePath.fileName
        options = XSS::Converter::FileConverter::getRequestOptions(fileRequestOptions)
        options.merge! XSS::Converter::CoreConverter::getOperationContextOptions(operationContext)
        options.merge! XSS::Converter::CoreConverter::getAccessConditionOptions(accessCondition)
        # ==== Operation ==== #
        LoggingAspect::logger.info("Resize file #{shareName}/#{directoryName}/#{fileName} to size #{size}")
        LoggingAspect::logger.debug("'options' is #{options.to_s}")
        result = fileClient.resize_file(shareName, directoryName, fileName, size, options)
        # ==== Construct Return Value ==== #
        LoggingAspect::logger.info("Resize file #{shareName}/#{directoryName}/#{fileName} to size #{size} successful")
        XSS::Converter::FileConverter::buildCloudFileResponseFromInternalRequestInfo(@request_info)
      end

      def listRanges(accountInfo, filePath, size, length, accessCondition, fileRequestOptions, operationContext)
        # ==== Build Client ==== #
        @request_info = XSS::Utilities::get_default_request_info
        fileClient = self.build_client(@request_info, accountInfo)
        # ==== Construct Parameters ==== #
        shareName = filePath.shareName
        directoryName = filePath.directoryName
        fileName = filePath.fileName
        options = XSS::Converter::FileConverter::getRequestOptions(fileRequestOptions)
        options.merge! XSS::Converter::CoreConverter::getOperationContextOptions(operationContext)
        options.merge! XSS::Converter::CoreConverter::getAccessConditionOptions(accessCondition)
        options[:start_range] = size if size
        options[:end_range] = size + length - 1 if size && length
        # ==== Operation ==== #
        LoggingAspect::logger.info("List ranges for file #{shareName}/#{directoryName}/#{fileName} with size #{size}, length #{length}")
        LoggingAspect::logger.debug("'options' is #{options.to_s}")
        result = fileClient.list_file_ranges(shareName, directoryName, fileName, options)
        # ==== Construct Return Value ==== #
        LoggingAspect::logger.info("List ranges for file #{shareName}/#{directoryName}/#{fileName} with size #{size}, length #{length} successful")
        r = XSS::AutoGenerated::ListRangesResponse.new
        r.cloudFileResponse = XSS::Converter::FileConverter::buildCloudFileResponseFromInternalRequestInfo(@request_info)
        r.ranges = []
        result[1].each { |range|
          tRange = XSS::AutoGenerated::ThriftFileRange.new
          tRange.startOffset = range[0]
          tRange.endOffset = range[1]
          r.ranges.push tRange
        }
        r
      end

      def uploadFromStream(accountInfo, filePath, source, length, accessCondition, fileRequestOptions, operationContext)
        # ==== Build Client ==== #
        @request_info = XSS::Utilities::get_default_request_info
        fileClient = self.build_client(@request_info, accountInfo)
        # ==== Construct Parameters ==== #
        shareName = filePath.shareName
        directoryName = filePath.directoryName
        fileName = filePath.fileName
        options = XSS::Converter::FileConverter::getRequestOptions(fileRequestOptions)
        options.merge! XSS::Converter::CoreConverter::getOperationContextOptions(operationContext)
        options.merge! XSS::Converter::CoreConverter::getAccessConditionOptions(accessCondition)
        # ==== Operation ==== #
        LoggingAspect::logger.info("Create file #{shareName}/#{directoryName}/#{fileName} using stream with size #{length}")
        LoggingAspect::logger.debug("'options' is #{options.to_s}")
        result = fileClient.create_file_with_content(shareName, directoryName, fileName, length, source, options)
        # ==== Construct Return Value ==== #
        LoggingAspect::logger.info("Create file #{shareName}/#{directoryName}/#{fileName} using stream with size #{length} successful")
        XSS::Converter::FileConverter::buildCloudFileResponseFromInternalRequestInfo(@request_info)
      end

      def uploadFromByteArray(accountInfo, filePath, buffer, index, count, accessCondition, fileRequestOptions, operationContext)
        # ==== Build Client ==== #
        @request_info = XSS::Utilities::get_default_request_info
        fileClient = self.build_client(@request_info, accountInfo)
        # ==== Construct Parameters ==== #
        shareName = filePath.shareName
        directoryName = filePath.directoryName
        fileName = filePath.fileName
        options = XSS::Converter::FileConverter::getRequestOptions(fileRequestOptions)
        options.merge! XSS::Converter::CoreConverter::getOperationContextOptions(operationContext)
        options.merge! XSS::Converter::CoreConverter::getAccessConditionOptions(accessCondition)
        # ==== Operation ==== #
        LoggingAspect::logger.info("Create file #{shareName}/#{directoryName}/#{fileName} with size #{count} and content")
        LoggingAspect::logger.debug("'options' is #{options.to_s}")
        result = fileClient.create_file_with_content(shareName, directoryName, fileName, count, buffer[index, count], options)
        # ==== Construct Return Value ==== #
        LoggingAspect::logger.info("Create file #{shareName}/#{directoryName}/#{fileName} with size #{count} and content successful")
        XSS::Converter::FileConverter::buildCloudFileResponseFromInternalRequestInfo(@request_info)
      end

      def downloadToByteArray(accountInfo, filePath, targetSize, index, accessCondition, fileRequestOptions, operationContext)
        # ==== Build Client ==== #
        @request_info = XSS::Utilities::get_default_request_info
        fileClient = self.build_client(@request_info, accountInfo)
        # ==== Construct Parameters ==== #
        shareName = filePath.shareName
        directoryName = filePath.directoryName
        fileName = filePath.fileName
        options = XSS::Converter::FileConverter::getRequestOptions(fileRequestOptions)
        options.merge! XSS::Converter::CoreConverter::getOperationContextOptions(operationContext)
        options.merge! XSS::Converter::CoreConverter::getAccessConditionOptions(accessCondition)
        # ==== Operation ==== #
        LoggingAspect::logger.info("Download file #{shareName}/#{directoryName}/#{fileName} to byte array")
        LoggingAspect::logger.debug("'options' is #{options.to_s}")
        result = fileClient.get_file(shareName, directoryName, fileName, options)
        # ==== Construct Return Value ==== #
        LoggingAspect::logger.info("Download file #{shareName}/#{directoryName}/#{fileName} to byte array successful")
        r = XSS::AutoGenerated::DownloadToByteArrayFileResponse.new
        r.totalBytesRead = @request_info.contentLength
        r.target = result[1]
        r.cloudFileResponse = XSS::Converter::FileConverter::buildCloudFileResponseFromInternalRequestInfo(@request_info)
        r
      end

      def downloadRangeToByteArray(accountInfo, filePath, targetSize, index, fileOffset, length, accessCondition, fileRequestOptions, operationContext)
        # ==== Build Client ==== #
        @request_info = XSS::Utilities::get_default_request_info
        fileClient = self.build_client(@request_info, accountInfo)
        # ==== Construct Parameters ==== #
        shareName = filePath.shareName
        directoryName = filePath.directoryName
        fileName = filePath.fileName
        options = XSS::Converter::FileConverter::getRequestOptions(fileRequestOptions)
        options.merge! XSS::Converter::CoreConverter::getOperationContextOptions(operationContext)
        options.merge! XSS::Converter::CoreConverter::getAccessConditionOptions(accessCondition)
        options[:start_range] = fileOffset if fileOffset
        options[:end_range] = fileOffset + length - 1 if fileOffset && length
        # ==== Operation ==== #
        LoggingAspect::logger.info("Download range from file #{shareName}/#{directoryName}/#{fileName} to byte array")
        LoggingAspect::logger.debug("'options' is #{options.to_s}")
        result = fileClient.get_file(shareName, directoryName, fileName, options)
        # ==== Construct Return Value ==== #
        LoggingAspect::logger.info("Download range from file #{shareName}/#{directoryName}/#{fileName} to byte array successful")
        r = XSS::AutoGenerated::DownloadToByteArrayFileResponse.new
        r.totalBytesRead = @request_info.contentLength
        r.target = result[1]
        r.cloudFileResponse = XSS::Converter::FileConverter::buildCloudFileResponseFromInternalRequestInfo(@request_info)
        r
      end

      def startCopyFromFileOrBlob(requestInfo, accountInfo, uri)
        # ==== Build Client ==== #
        @request_info = XSS::Utilities::get_default_request_info
        fileClient = self.build_client(@request_info, accountInfo)
        # ==== Construct Parameters ==== #
        filePath = requestInfo.filePath
        shareName = filePath.shareName
        directoryName = filePath.directoryName
        fileName = filePath.fileName
        options = XSS::Converter::FileConverter::getRequestOptions(requestInfo.thriftRequestOptions)
        options.merge! XSS::Converter::CoreConverter::getOperationContextOptions(requestInfo.thriftOperationContext)
        options.merge! XSS::Converter::CoreConverter::getAccessConditionOptions(requestInfo.destThriftAccessCondition)
        # TODO: requestInfo.sourceThriftAccessCondition?
        source = uri.primaryUri
        # ==== Operation ==== #
        LoggingAspect::logger.info("Copy file #{shareName}/#{directoryName}/#{fileName} from uri #{source}")
        LoggingAspect::logger.debug("'options' is #{options.to_s}")
        result = fileClient.copy_file_from_uri(shareName, directoryName, fileName, source, options)
        # ==== Construct Return Value ==== #
        LoggingAspect::logger.info("Copy file #{shareName}/#{directoryName}/#{fileName} from uri #{source} successful")
        r = XSS::AutoGenerated::FileStartCopyResponse.new
        r.copyID = result[0]
        r.cloudFileResponse = XSS::Converter::FileConverter::buildCloudFileResponseFromInternalRequestInfo(@request_info)
        r
      end
    end
  end
end
