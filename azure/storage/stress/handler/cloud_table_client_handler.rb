require_relative "base_handler"
require_relative "../utils"
require_relative "../auto_generated/cloud_table_client_service"
require_relative "../converter/core_converter"
require_relative "../converter/table_converter"
require_relative "../infrastructure/logging_aspect"

module Azure::Storage::Stress
  module Handler
    class CloudTableClientHandler < BaseHandler
      def getServiceStats(requestInfo, accountInfo)
        tableClient = XSS::Converter::TableConverter.getTableService(self, accountInfo)

        # ==== Construct Parameters ==== #
        reqOptions = XSS::Converter::CoreConverter.getRequestOptions(requestInfo.thriftRequestOptions)
        reqOptions.merge! XSS::Converter::CoreConverter::getOperationContextOptions(requestInfo.thriftOperationContext)

        # ==== Operation ==== #
        LoggingAspect::logger.info("Get tables service stats")
        LoggingAspect::logger.debug("'options' is #{reqOptions.to_s}")
        temp = tableClient.get_service_stats(reqOptions)

        # ==== Construct Return Value ==== #
        result = XSS::Converter::CoreConverter.convertGetServiceStatsResultToThriftServiceStats(temp)
        return result
      end

      def getServiceProperties(requestInfo, accountInfo)
        tableClient = XSS::Converter::TableConverter.getTableService(self, accountInfo)

        # ==== Construct Parameters ==== #
        reqOptions = XSS::Converter::CoreConverter.getRequestOptions(requestInfo.thriftRequestOptions)
        reqOptions.merge! XSS::Converter::CoreConverter::getOperationContextOptions(requestInfo.thriftOperationContext)

        # ==== Operation ==== #
        LoggingAspect::logger.info("Get table service properties")
        LoggingAspect::logger.debug("'options' is #{reqOptions.to_s}")
        temp = tableClient.get_service_properties(reqOptions)

        # ==== Construct Return Value ==== #
        result = XSS::Converter::CoreConverter.convertServicePropertiesToThriftStorageServiceProperties(temp)
        return result
      end

      def setServiceProperties(serviceProperties, requestInfo, accountInfo)
        tableClient = XSS::Converter::TableConverter.getTableService(self, accountInfo)

        # ==== Construct Parameters ==== #
        reqOptions = XSS::Converter::CoreConverter.getRequestOptions(requestInfo.thriftRequestOptions)
        reqOptions.merge! XSS::Converter::CoreConverter::getOperationContextOptions(requestInfo.thriftOperationContext)
        serviceProperties = XSS::Converter::CoreConverter.convertThriftStorageServicePropertiesToServiceProperties(properties)

        # ==== Operation ==== #
        LoggingAspect::logger.info("Set table service properties")
        LoggingAspect::logger.debug("'options' is #{reqOptions.to_s}")
        tableClient.set_service_properties(serviceProperties, reqOptions)

        # ==== Construct Return Value ==== #
        return
      end

      def listTables(prefix, requestInfo, accountInfo)
        tableClient = XSS::Converter::TableConverter.getTableService(self, accountInfo)

        # ==== Construct Parameters ==== #
        reqOptions = XSS::Converter::CoreConverter.getRequestOptions(requestInfo.thriftRequestOptions)
        reqOptions.merge! XSS::Converter::CoreConverter::getOperationContextOptions(requestInfo.thriftOperationContext)

        # ==== Operation ==== #
        temp = nil
        entries = []
        begin
          unless temp.nil?
            reqOptions[:next_table_token] = temp.continuation_token
          end
          LoggingAspect::logger.info("Listing tables")
          LoggingAspect::logger.debug("'options' is #{reqOptions.to_s}")
          temp = tableClient.list_tables(reqOptions)
          temp.each do |table|
            entry = XSS::AutoGenerated::ListTableItem.new
            entry.name = table.name
            # TODO storageURI
            entries.push(entry)
          end
        end while !temp.nil? && !temp.continuation_token.nil?

        # ==== Construct Return Value ==== #
        result = XSS::AutoGenerated::ListTableResultSegmented.new
        result.tableList = entries
        return result
      end

      def ListTableSegmented(prefix, maxResults, continuationToken, requestInfo, accountInfo)
        tableClient = XSS::Converter::TableConverter.getTableService(self, accountInfo)

        # ==== Construct Parameters ==== #
        reqOptions = XSS::Converter::CoreConverter.getRequestOptions(requestInfo.thriftRequestOptions)
        reqOptions.merge! XSS::Converter::CoreConverter::getOperationContextOptions(requestInfo.thriftOperationContext)
        reqOptions[:next_table_token] = continuationToken.nextTableName
        unless continuationToken.targetLocation.nil?
          reqOptions[:location_mode] = XSS::Converter::CoreConverter::getLocationModeFromStorageLocation(currentToken.targetLocation)
        end

        # ==== Operation ==== #
        LoggingAspect::logger.info("Listing tables segmented")
        LoggingAspect::logger.debug("'options' is #{reqOptions.to_s}")
        temp = tableClient.query_tables(reqOptions)

        # ==== Construct Return Value ==== #
        entries = []
        temp.each do |table|
          entry = XSS::AutoGenerated::ListTableItem.new
          entry.name = table.name
          # TODO storageURI
          entries.push(entry)
        end
        result = XSS::AutoGenerated::ListTableResultSegmented.new
        result.continuationToken.nextTableName = temp.continuation_token
        result.tableList = entries
        return result
      end
    end
  end
end
