require_relative "base_handler"
require_relative "../utils"
require_relative "../auto_generated/cloud_file_client_service"
require_relative "../converter/core_converter"
require_relative "../converter/file_converter"
require_relative "../infrastructure/logging_aspect"


module Azure::Storage::Stress
  module Handler
    class CloudFileClientHandler < CloudFileBaseHandler
      # Unsupported
      # def listShares(accountInfo, prefix, detailsIncluded, fileRequestOptions, operationContext)
      #   # ==== Build Client ==== #
      #   internalRequestInfo = XSS::Utilities::get_default_request_info
      #   fileClient = self.build_client(internalRequestInfo, accountInfo)
      #   # ==== Construct Parameters ==== #
      #   options = XSS::Converter::FileConverter::getRequestOptions(fileRequestOptions)
      #   options.merge! XSS::Converter::CoreConverter::getOperationContextOptions(operationContext)
      #   options[:prefix] = prefix 
      #   options[:max_results] = maxResults
      #   options[:marker] = currentToken.nextMarker
      #   options[:location_mode] = XSS::Converter::CoreConverter::getLocationModeFromStorageLocation(currentToken.targetLocation)
      #   # ==== Operation ==== #
      #   # ==== Construct Return Value ==== #
      # end



      def listSharesSegmented(accountInfo, prefix, detailsIncluded, maxResults, continuationToken, fileRequestOptions, operationContext)
        # ==== Build Client ==== #
        internalRequestInfo = XSS::Utilities::get_default_request_info
        fileClient = self.build_client(internalRequestInfo, accountInfo)
        # ==== Construct Parameters ==== #
        options = XSS::Converter::FileConverter::getRequestOptions(fileRequestOptions)
        options.merge! XSS::Converter::CoreConverter::getOperationContextOptions(operationContext)
        options[:prefix] = prefix 
        options[:max_results] = maxResults
        options[:marker] = continuationToken.nextMarker
        options[:location_mode] = XSS::Converter::CoreConverter::getLocationModeFromStorageLocation(continuationToken.targetLocation)
        # options[:metadata]?
        # ==== Operation ==== #
        LoggingAspect::logger.info("Listing Shares segmented")
        LoggingAspect::logger.debug("'options' is #{options.to_s}")
        result = fileClient.list_shares(options)
        # ==== Construct Return Value ==== #
        LoggingAspect::logger.info("Listing Shares successful")        
        r = XSS::AutoGenerated::ListFileShareResponse.new
        r.continuationToken = XSS::Converter::FileConverter::getFileContinuationToken(result.continuation_token, internalRequestInfo.uri)
        shareList = []
        result.each do |share|
          shareDetails = XSS::AutoGenerated::ShareDetail.new
          shareDetails.cloudStorageUri = XSS::AutoGenerated::CloudStorageUri.new
          # Not sure about the primary and secondary
          # shareDetails.cloudStorageUri.secondaryUri = internalRequestInfo.uri
          shareDetails.cloudStorageUri.primaryUri = internalRequestInfo.uri

          shareDetails.shareResponse = XSS::AutoGenerated::CloudFileShareResponse.new
          # TODO:etag, lastModified, snapshotTime
          # shareDetails.shareResponse.etag = 
          # shareDetails.shareResponse.lastModified = 
          shareDetails.shareResponse.shareQuota = share.quota
          shareDetails.shareResponse.metadata = share.metadata
          # shareDetails.shareResponse.snapshotTime = 
          shareList.push(shareDetails)
        end
        r.shares =shareList
        r
      end



      def setProperties(thriftRequestOptions, accountInfo, thriftOperationContext, properties)
        # ==== Build Client ==== #
        internalRequestInfo = XSS::Utilities::get_default_request_info
        fileClient = self.build_client(internalRequestInfo, accountInfo)
        # ==== Construct Parameters ==== #
        reqOptions = XSS::Converter::CoreConverter.getRequestOptions(thriftRequestOptions)
        reqOptions.merge! XSS::Converter::CoreConverter::getOperationContextOptions(thriftOperationContext)
        serviceProperties = XSS::Converter::CoreConverter.convertThriftStorageServicePropertiesToServiceProperties(properties)
        # ==== Operation ==== #
        fileClient.set_service_properties(serviceProperties, reqOptions)
        # ==== Construct Return Value ==== #
        XSS::Converter::BlobConverter::buildBlobContainerResponseFromInternalRequestInfo(internalRequestInfo)
      end



      def getProperties(thriftRequestOptions, accountInfo, thriftOperationContext)
        # ==== Build Client ==== #
        internalRequestInfo = XSS::Utilities::get_default_request_info
        fileClient = self.build_client(internalRequestInfo, accountInfo)
        # ==== Construct Parameters ==== #
        reqOptions = XSS::Converter::CoreConverter.getRequestOptions(thriftRequestOptions)
        reqOptions.merge! XSS::Converter::CoreConverter::getOperationContextOptions(thriftOperationContext)
        # ==== Operation ==== #
        result = fileClient.get_service_properties(reqOptions)
        # ==== Construct Return Value ==== #
        XSS::Converter::CoreConverter.convertServicePropertiesToThriftStorageServiceProperties(result)
      end
    end
  end
end
