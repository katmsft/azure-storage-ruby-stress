require_relative "base_handler"
require_relative "cloud_file_base_handler"
require_relative "../utils"
require_relative "../auto_generated/cloud_file_client_service"
require_relative "../converter/core_converter"
require_relative "../converter/file_converter"
require_relative "../infrastructure/logging_aspect"


module Azure::Storage::Stress
  module Handler
    class CloudFileClientHandler < CloudFileBaseHandler
      def listShares(accountInfo, prefix, detailsIncluded, fileRequestOptions, operationContext)
        # ==== Build Client ==== #
        internalRequestInfo = XSS::Utilities::get_default_request_info
        fileClient = self.build_client(internalRequestInfo, accountInfo)
        # ==== Construct Parameters ==== #
        options = XSS::Converter::FileConverter::getRequestOptions(fileRequestOptions)
        options.merge! XSS::Converter::CoreConverter::getOperationContextOptions(operationContext)
        options[:prefix] = prefix
        r = XSS::AutoGenerated::ListFileShareResponse.new
        r.shares = []
        # ==== Operation ==== #
        LoggingAspect::logger.info("Listing Shares")
        nextMarker = nil
        loop do
          options[:marker] = nextMarker if nextMarker
          LoggingAspect::debug("'options' is #{options.to_s}")
          result = fileClient.list_shares(options)
          # ==== Construct Return Value ==== #
          result.each { |share| r.shares.push XSS::Converter::FileConverter::buildShareDetailWithShareAndClient(container, blobclient) }
          nextMarker = result.continuation_token
          break unless nextMarker && !nextMarker.empty?
        end
        # ==== Construct Return Value ==== #
        LoggingAspect::logger.info("Listing Shares successful")
        r
      end

      def listSharesSegmented(accountInfo, prefix, detailsIncluded, maxResults, continuationToken, fileRequestOptions, operationContext)
        # ==== Build Client ==== #
        internalRequestInfo = XSS::Utilities::get_default_request_info
        fileClient = self.build_client(internalRequestInfo, accountInfo)
        # ==== Construct Parameters ==== #
        options = XSS::Converter::FileConverter::getRequestOptions(fileRequestOptions)
        options.merge! XSS::Converter::CoreConverter::getOperationContextOptions(operationContext)
        options[:prefix] = prefix
        options[:max_results] = maxResults
        options[:marker] = continuationToken.nextMarker if continuationToken
        # TODO: options[:metadata]?
        # ==== Operation ==== #
        LoggingAspect::logger.info("Listing Shares segmented")
        LoggingAspect::logger.debug("'options' is #{options.to_s}")
        result = fileClient.list_shares(options)
        # ==== Construct Return Value ==== #
        LoggingAspect::logger.info("Listing Shares successful")
        r = XSS::AutoGenerated::ListFileShareResponse.new
        r.continuationToken = XSS::Converter::FileConverter::getFileContinuationToken(result.continuation_token, internalRequestInfo.uri)
        result.each { |container| r.shares.push XSS::Converter::FileConverter::buildShareDetailWithShareAndClient(container, blobclient) }
        r
      end

      def setProperties(thriftRequestOptions, accountInfo, thriftOperationContext, properties)
        # ==== Build Client ==== #
        internalRequestInfo = XSS::Utilities::get_default_request_info
        fileClient = self.build_client(internalRequestInfo, accountInfo)
        # ==== Construct Parameters ==== #
        options = XSS::Converter::CoreConverter.getRequestOptions(thriftRequestOptions)
        options.merge! XSS::Converter::CoreConverter::getOperationContextOptions(thriftOperationContext)
        serviceProperties = XSS::Converter::CoreConverter.convertThriftStorageServicePropertiesToServiceProperties(properties)
        # ==== Operation ==== #
        LoggingAspect::logger.info("Set Properties")
        LoggingAspect::logger.debug("'options' is #{options.to_s}")
        fileClient.set_service_properties(serviceProperties, options)
        # ==== Construct Return Value ==== #
        LoggingAspect::logger.info("Set Properties successful")
        # TODO: why should this return response?
        # XSS::Converter::BlobConverter::buildBlobContainerResponseFromInternalRequestInfo(internalRequestInfo)
      end

      def getProperties(thriftRequestOptions, accountInfo, thriftOperationContext)
        # ==== Build Client ==== #
        internalRequestInfo = XSS::Utilities::get_default_request_info
        fileClient = self.build_client(internalRequestInfo, accountInfo)
        # ==== Construct Parameters ==== #
        options = XSS::Converter::CoreConverter.getRequestOptions(thriftRequestOptions)
        options.merge! XSS::Converter::CoreConverter::getOperationContextOptions(thriftOperationContext)
        # ==== Operation ==== #
        LoggingAspect::logger.info("Get Properties")
        LoggingAspect::logger.debug("'options' is #{options.to_s}")
        result = fileClient.get_service_properties(options)
        # ==== Construct Return Value ==== #
        LoggingAspect::logger.info("Get Properties successful")
        XSS::Converter::CoreConverter.convertServicePropertiesToThriftStorageServiceProperties(result)
      end
    end
  end
end
