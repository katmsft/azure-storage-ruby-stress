require "azure/storage"
require_relative "../infrastructure/logging_aspect"

module Azure
  module Storage
    module Converter
      class CoreConverter
        def CoreConverter.getStorageService(handler, accountInfo)
          # TODO: Support other client and secondary
          # TODO: Support SAS
          Azure::Storage::Infrastructure::LoggingAspect.logger.debug(storage_account_name: accountInfo.accountName, storage_access_key: accountInfo.base64EncodedKey)
          return Azure::Storage::Client.create(storage_account_name: accountInfo.accountName, storage_access_key: accountInfo.base64EncodedKey)
        end

        def CoreConverter.getCommonRequestOptions(thriftRequestOptions, thriftOperationContext)
          options = {}
          unless thriftRequestOptions.nil?
            options[:timeout] = thriftRequestOptions.maximumExecutionTimeSeconds unless thriftRequestOptions.maximumExecutionTimeSeconds.nil?
            # serverTimeoutSeconds no idea how to use
          end

          unless thriftOperationContext.nil?
            options[:request_id] = thriftOperationContext.clientRequestId unless thriftOperationContext.nil?
          end
          return options
        end

        def CoreConverter.convertThriftStorageServicePropertiesToServiceProperties(properties)
          storageProperties = Azure::Storage::Service::StorageServiceProperties.new
          storageProperties.cors = CoreConverter.convertCorsRuleArrayToCORSArray(properties.corsRules)
          storageProperties.default_service_version = properties.defaultServiceVersion
          storageProperties.hour_metrics = CoreConverter.convertMetricsPropertiesToMetrics(properties.hourMetrics)
          storageProperties.logging = CoreConverter.convertLoggingPropertiesToLogging(properties.logging)
          storageProperties.minute_metrics = CoreConverter.convertMetricsPropertiesToMetrics(properties.minuteMetrics)
          return storageProperties
        end

        def CoreConverter.convertServicePropertiesToThriftStorageServiceProperties(properties)
          thriftStorageServiceProperties = Azure::Storage::AutoGenerated::ThriftStorageServiceProperties.new
          thriftStorageServiceProperties.corsRules = CoreConverter.convertCORSArrayToCorsRuleArray(properties.cors)
          thriftStorageServiceProperties.defaultServiceVersion = properties.default_service_version
          thriftStorageServiceProperties.logging = CoreConverter.convertLoggingToLoggingProperties(properties.logging)
          thriftStorageServiceProperties.minuteMetrics = CoreConverter.convertMetricsToMetricsProperties(properties.minute_metrics)
          thriftStorageServiceProperties.hourMetrics = CoreConverter.convertMetricsToMetricsProperties(properties.hour_metrics)
          thriftStorageServiceProperties.deleteRetentionProperties = CoreConverter.convertDeleteRententionPolicyToDeleteRententionPolicyProperties()
        end

        def CoreConverter.convertCorsRuleArrayToCORSArray(corsRules)
          corss = Azure::Storage::Service::Cors.new
          return corss if corsRules.nil?
          corsRules.each do |corsRule|
            cors = Azure::Storage::Service::CorsRule.new
            cors.allowed_headers = corsRule.allowedHeaders
            cors.allowed_methods = CoreConverter.filterHTTPMethodsArray(corsRule.allowedMethods)
            cors.allowed_origins = corsRule.allowedOrigins
            cors.exposed_headers = corsRule.exposedHeaders
            cors.max_age_in_seconds = corsRule.maxAgeInSeconds
            corss.cors_rules.push(cors)
          end
          return corss
        end

        def CoreConverter.convertCORSArrayToCorsRuleArray(corss)
          # return nil if corss.nil?
          # corss cannot be nil, but whether the corsRules can be empty array or not? need to test
          corsRules = []
          corss.cors_rules.each do |cors|
            corsRule = Azure::Storage::AutoGenerated::CorsRule.new
            corsRule.maxAgeInSeconds = cors.max_age_in_seconds
            corsRule.allowedHeaders = cors.allowed_headers
            corsRule.allowedMethods = cors.allowed_methods.join(",")
            corsRule.allowedOrigins = cors.allowed_origins
            corsRule.exposedHeaders = cors.exposed_headers
            corsRules.push(corsRule)
          end
          return corsRules
        end

        def CoreConverter.filterHTTPMethodsArray(methods)
          result = []
          methods.split(",").each do |method|
            if Azure::Storage::Constants::Constant::HTTP_Methods.include?(method.capitalize)
              result.push(method.capitalize)
            end
          end
          return result
        end

        def CoreConverter.convertMetricsPropertiesToMetrics(thriftMetrics)
          metrics = Azure::Storage::Service::Metrics.new
          return metrics if thriftMetrics.nil?
          metrics.enabled = (thriftMetrics.metricsLevel != Azure::Storage::AutoGenerated::MetricsLevel::None)
          metrics.include_apis = (thriftMetrics.metricsLevel == Azure::Storage::AutoGenerated::MetricsLevel::ServiceAndApi)
          metrics.version = thriftMetrics.version
          # metrics.retention_policy = Azure::Storage::Service::RetentionPolicy.new
          metrics.retention_policy.days = thriftMetrics.retentionDays
          metrics.retention_policy.enabled = (thriftMetrics.retentionDays > 0)
        end

        def CoreConverter.convertMetricsToMetricsProperties(metrics)
          return nil if metrics.nil?
          thriftMetrics = Azure::Storage::AutoGenerated::MetricsProperties.new
          thriftMetrics.metricsLevel = metrics.enable ? (metrics.include_apis ? Azure::Storage::AutoGenerated::MetricsLevel::ServiceAndApi : Azure::Storage::AutoGenerated::MetricsLevel::Service) : Azure::Storage::AutoGenerated::MetricsLevel::None
          thriftMetrics.version = metrics.version
          thriftMetrics.retentionDays = metrics.retention_policy.enable ? metrics.retention_policy.days : nil
          return thriftMetrics
        end

        def CoreConverter.convertLoggingPropertiesToLogging(loggingProperties)
          logging = Azure::Storage::Service::Logging.new
          return logging if loggingProperties.nil?
          logging.version = loggingProperties.version
          # logging.retention_policy = Azure::Storage::Service::RetentionPolicy.new
          logging.retention_policy.days = loggingProperties.retentionDays
          logging.retention_policy.enabled = (loggingProperties.retentionDays > 0)
          logging.delete = loggingProperties.loggingOperations.include?(Azure::Storage::AutoGenerated::LoggingOperations::VALUE_MAP[Azure::Storage::AutoGenerated::LoggingOperations::Delete])
          logging.read = loggingProperties.loggingOperations.include?(Azure::Storage::AutoGenerated::LoggingOperations::VALUE_MAP[Azure::Storage::AutoGenerated::LoggingOperations::Read])
          logging.write = loggingProperties.loggingOperations.include?(Azure::Storage::AutoGenerated::LoggingOperations::VALUE_MAP[Azure::Storage::AutoGenerated::LoggingOperations::Write])
          return logging
        end

        def CoreConverter.convertLoggingToLoggingProperties(logging)
          return nil if logging.nil?
          loggingProperties = Azure::Storage::AutoGenerated::LoggingProperties.new
          loggingProperties.version = logging.version
          loggingProperties.retentionDays = logging.retention_policy.enable ? logging.retention_policy.days : nil
          operations = []
          if logging.delete
            operations.push(Azure::Storage::AutoGenerated::LoggingOperations::VALUE_MAP[Azure::Storage::AutoGenerated::LoggingOperations::Delete])
          end
          if logging.read
            operations.push(Azure::Storage::AutoGenerated::LoggingOperations::VALUE_MAP[Azure::Storage::AutoGenerated::LoggingOperations::Read])
          end
          if logging.write
            operations.push(Azure::Storage::AutoGenerated::LoggingOperations::VALUE_MAP[Azure::Storage::AutoGenerated::LoggingOperations::Write])
          end
          loggingProperties.loggingOperations = operations.join(",")
          return loggingProperties
        end

        def CoreConverter.convertDeleteRententionPolicyToDeleteRententionPolicyProperties()
          return nil
          # see PHP stress proxy - TODO: To be supported in Soft-Delete feature
        end

        def CoreConverter.convertGetServiceStatsResultToThriftServiceStats(serviceStats)
          thriftServiceStats = Azure::Storage::AutoGenerated::ThriftServiceStats.new
          thriftServiceStats.geoReplication = Azure::Storage::AutoGenerated::GeoReplicationStats.new
          thriftServiceStats.geoReplication.status = serviceStats.geo_replication.status
          thriftServiceStats.geoReplication.lastSyncTime = serviceStats.geo_replication.last_sync_time
          return thriftServiceStats
        end
      end
    end
  end
end
